{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction inserted(el, binding) {\n  var modifiers = binding.modifiers || {};\n  var value = binding.value;\n\n  var _ref = _typeof(value) === 'object' ? value : {\n    handler: value,\n    options: {}\n  },\n      handler = _ref.handler,\n      options = _ref.options;\n\n  var observer = new IntersectionObserver(function () {\n    var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var observer = arguments.length > 1 ? arguments[1] : undefined;\n\n    /* istanbul ignore if */\n    if (!el._observe) return; // Just in case, should never fire\n    // If is not quiet or has already been\n    // initted, invoke the user callback\n\n    if (handler && (!modifiers.quiet || el._observe.init)) {\n      var isIntersecting = Boolean(entries.find(function (entry) {\n        return entry.isIntersecting;\n      }));\n      handler(entries, observer, isIntersecting);\n    } // If has already been initted and\n    // has the once modifier, unbind\n\n\n    if (el._observe.init && modifiers.once) unbind(el); // Otherwise, mark the observer as initted\n    else el._observe.init = true;\n  }, options);\n  el._observe = {\n    init: false,\n    observer: observer\n  };\n  observer.observe(el);\n}\n\nfunction unbind(el) {\n  /* istanbul ignore if */\n  if (!el._observe) return;\n\n  el._observe.observer.unobserve(el);\n\n  delete el._observe;\n}\n\nexport var Intersect = {\n  inserted: inserted,\n  unbind: unbind\n};\nexport default Intersect;","map":null,"metadata":{},"sourceType":"module"}