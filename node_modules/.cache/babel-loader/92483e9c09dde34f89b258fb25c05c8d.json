{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions, mapGetters } from 'vuex';\nexport default {\n  name: 'GuestSelectForm',\n  props: ['event'],\n  computed: _objectSpread(_objectSpread({}, mapGetters('users', ['users'])), {}, {\n    selectedParticipants: function selectedParticipants() {\n      return this.participants.map(function (p) {\n        return p.userId;\n      });\n    }\n  }),\n  created: function created() {\n    this.fetchUsers();\n  },\n  methods: _objectSpread(_objectSpread(_objectSpread({}, mapActions('users', ['fetchUsers'])), mapActions('participant', ['addParticipant', 'removeParticipant'])), {}, {\n    updateParticipants: function updateParticipants(selectedUsers) {\n      var _this = this;\n\n      var currentParticipants = this.participants.map(function (p) {\n        return p.userId;\n      });\n      var addedParticipants = selectedUsers.filter(function (u) {\n        return !currentParticipants.includes(u);\n      });\n      var removedParticipants = currentParticipants.filter(function (u) {\n        return !selectedUsers.includes(u);\n      });\n      var eventId = this.event.id;\n      addedParticipants.forEach(function (userId) {\n        _this.addParticipant({\n          eventId: eventId,\n          userId: userId\n        });\n      });\n      removedParticipants.forEach(function (userId) {\n        _this.removeParticipant({\n          eventId: eventId,\n          userId: userId\n        });\n      });\n    }\n  })\n};","map":{"version":3,"sources":["GuestSelectForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;AAEA,EAAA,KAAA,EAAA,CAAA,OAAA,CAFA;AAGA,EAAA,QAAA,kCACA,UAAA,CAAA,OAAA,EAAA,CAAA,OAAA,CAAA,CADA;AAEA,IAAA,oBAFA,kCAEA;AACA,aAAA,KAAA,YAAA,CAAA,GAAA,CAAA,UAAA,CAAA;AAAA,eAAA,CAAA,CAAA,MAAA;AAAA,OAAA,CAAA;AACA;AAJA,IAHA;AASA,EAAA,OATA,qBASA;AACA,SAAA,UAAA;AACA,GAXA;AAYA,EAAA,OAAA,gDACA,UAAA,CAAA,OAAA,EAAA,CACA,YADA,CAAA,CADA,GAIA,UAAA,CAAA,aAAA,EAAA,CACA,gBADA,EAEA,mBAFA,CAAA,CAJA;AAQA,IAAA,kBARA,8BAQA,aARA,EAQA;AAAA;;AACA,UAAA,mBAAA,GAAA,KAAA,YAAA,CAAA,GAAA,CAAA,UAAA,CAAA;AAAA,eAAA,CAAA,CAAA,MAAA;AAAA,OAAA,CAAA;AACA,UAAA,iBAAA,GAAA,aAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,eAAA,CAAA,mBAAA,CAAA,QAAA,CAAA,CAAA,CAAA;AAAA,OAAA,CAAA;AACA,UAAA,mBAAA,GAAA,mBAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,eAAA,CAAA,aAAA,CAAA,QAAA,CAAA,CAAA,CAAA;AAAA,OAAA,CAAA;AACA,UAAA,OAAA,GAAA,KAAA,KAAA,CAAA,EAAA;AACA,MAAA,iBAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,QAAA,KAAA,CAAA,cAAA,CAAA;AAAA,UAAA,OAAA,EAAA,OAAA;AAAA,UAAA,MAAA,EAAA;AAAA,SAAA;AACA,OAFA;AAGA,MAAA,mBAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,QAAA,KAAA,CAAA,iBAAA,CAAA;AAAA,UAAA,OAAA,EAAA,OAAA;AAAA,UAAA,MAAA,EAAA;AAAA,SAAA;AACA,OAFA;AAGA;AAnBA;AAZA,CAAA","sourcesContent":["<template>\n  <v-container fluid>\n    <v-row align=\"center\">\n      <v-col cols=\"12\" md=\"6\">\n        <v-autocomplete\n          :items=\"users\"\n          small-chips\n          clearable\n          color=\"grey\"\n          label=\"参加者を追加\"\n          item-text=\"name\"\n          item-value=\"id\"\n          multiple\n          :value=\"selectedParticipants\"\n          @input=\"updateParticipants\"\n        >\n        </v-autocomplete>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\n\nexport default {\n  name: 'GuestSelectForm',\n  props: ['event'],\n  computed: {\n    ...mapGetters('users', ['users']),\n    selectedParticipants() {\n      return this.participants.map(p => p.userId);\n    }\n  },\n  created() {\n    this.fetchUsers();\n  },\n  methods: {\n    ...mapActions('users', [\n      'fetchUsers'\n    ]),\n    ...mapActions('participant', [\n      'addParticipant',\n      'removeParticipant'\n    ]),\n    updateParticipants(selectedUsers) {\n      const currentParticipants = this.participants.map(p => p.userId);\n      const addedParticipants = selectedUsers.filter(u => !currentParticipants.includes(u));\n      const removedParticipants = currentParticipants.filter(u => !selectedUsers.includes(u));\n      const eventId = this.event.id;\n      addedParticipants.forEach(userId => {\n        this.addParticipant({ eventId, userId });\n      });\n      removedParticipants.forEach(userId => {\n        this.removeParticipant({ eventId, userId });\n      });\n    }\n  }\n};\n</script>\n"],"sourceRoot":"app/javascript/components/forms"},"metadata":{},"sourceType":"module"}