{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar CONFIG = {\n  HOUR_TOKENS: ['HH', 'H', 'hh', 'h', 'kk', 'k'],\n  MINUTE_TOKENS: ['mm', 'm'],\n  SECOND_TOKENS: ['ss', 's'],\n  APM_TOKENS: ['A', 'a'],\n  BASIC_TYPES: ['hour', 'minute', 'second', 'apm']\n};\nvar DEFAULT_OPTIONS = {\n  format: 'HH:mm',\n  minuteInterval: 1,\n  secondInterval: 1,\n  hourRange: null,\n  minuteRange: null,\n  secondRange: null,\n  hideDisabledHours: false,\n  hideDisabledMinutes: false,\n  hideDisabledSeconds: false,\n  hideDisabledItems: false,\n  hideDropdown: false,\n  blurDelay: 300,\n  manualInputTimeout: 1000,\n  dropOffsetHeight: 160\n};\nexport default {\n  name: 'VueTimepicker',\n  props: {\n    value: {\n      type: [Object, String]\n    },\n    format: {\n      type: String\n    },\n    minuteInterval: {\n      type: [Number, String]\n    },\n    secondInterval: {\n      type: [Number, String]\n    },\n    hourRange: {\n      type: Array\n    },\n    minuteRange: {\n      type: Array\n    },\n    secondRange: {\n      type: Array\n    },\n    hideDisabledHours: {\n      type: Boolean,\n      default: false\n    },\n    hideDisabledMinutes: {\n      type: Boolean,\n      default: false\n    },\n    hideDisabledSeconds: {\n      type: Boolean,\n      default: false\n    },\n    hideDisabledItems: {\n      type: Boolean,\n      default: false\n    },\n    hideClearButton: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    closeOnComplete: {\n      type: Boolean,\n      default: false\n    },\n    id: {\n      type: String\n    },\n    name: {\n      type: String\n    },\n    inputClass: {\n      type: [String, Object, Array]\n    },\n    placeholder: {\n      type: String\n    },\n    tabindex: {\n      type: [Number, String],\n      default: 0\n    },\n    inputWidth: {\n      type: String\n    },\n    autocomplete: {\n      type: String,\n      default: 'off'\n    },\n    hourLabel: {\n      type: String\n    },\n    minuteLabel: {\n      type: String\n    },\n    secondLabel: {\n      type: String\n    },\n    apmLabel: {\n      type: String\n    },\n    amText: {\n      type: String\n    },\n    pmText: {\n      type: String\n    },\n    blurDelay: {\n      type: [Number, String]\n    },\n    advancedKeyboard: {\n      type: Boolean,\n      default: false\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    autoScroll: {\n      type: Boolean,\n      default: false\n    },\n    dropDirection: {\n      type: String,\n      default: 'down'\n    },\n    dropOffsetHeight: {\n      type: [Number, String]\n    },\n    containerId: {\n      type: String\n    },\n    appendToBody: {\n      type: Boolean,\n      default: false\n    },\n    manualInput: {\n      type: Boolean,\n      default: false\n    },\n    manualInputTimeout: {\n      type: [Number, String]\n    },\n    hideDropdown: {\n      type: Boolean,\n      default: false\n    },\n    fixedDropdownButton: {\n      type: Boolean,\n      default: false\n    },\n    debugMode: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      timeValue: {},\n      hours: [],\n      minutes: [],\n      seconds: [],\n      apms: [],\n      isActive: false,\n      showDropdown: false,\n      isFocusing: false,\n      debounceTimer: undefined,\n      hourType: 'HH',\n      minuteType: 'mm',\n      secondType: '',\n      apmType: '',\n      hour: '',\n      minute: '',\n      second: '',\n      apm: '',\n      fullValues: undefined,\n      bakDisplayTime: undefined,\n      doClearApmChecking: false,\n      selectionTimer: undefined,\n      kbInputTimer: undefined,\n      kbInputLog: '',\n      bakCurrentPos: undefined,\n      forceDropOnTop: false\n    };\n  },\n  computed: {\n    opts: function opts() {\n      var options = Object.assign({}, DEFAULT_OPTIONS);\n\n      if (this.format && this.format.length) {\n        options.format = String(this.format);\n      }\n\n      if (this.isNumber(this.minuteInterval)) {\n        options.minuteInterval = +this.minuteInterval;\n      } // minuteInterval failsafe\n\n\n      if (!options.minuteInterval || options.minuteInterval < 1 || options.minuteInterval > 60) {\n        if (this.debugMode) {\n          if (options.minuteInterval > 60) {\n            this.debugLog(\"\\\"minute-interval\\\" should be less than 60. Current value is \".concat(this.minuteInterval));\n          } else if (options.minuteInterval === 0 || options.minuteInterval < 1) {\n            this.debugLog(\"\\\"minute-interval\\\" should be NO less than 1. Current value is \".concat(this.minuteInterval));\n          }\n        }\n\n        if (options.minuteInterval === 0) {\n          options.minuteInterval = 60;\n        } else {\n          options.minuteInterval = 1;\n        }\n      }\n\n      if (this.isNumber(this.secondInterval)) {\n        options.secondInterval = +this.secondInterval;\n      } // secondInterval failsafe\n\n\n      if (!options.secondInterval || options.secondInterval < 1 || options.secondInterval > 60) {\n        if (this.debugMode) {\n          if (options.secondInterval > 60) {\n            this.debugLog(\"\\\"second-interval\\\" should be less than 60. Current value is \".concat(this.secondInterval));\n          } else if (options.secondInterval === 0 || options.secondInterval < 1) {\n            this.debugLog(\"\\\"second-interval\\\" should be NO less than 1. Current value is \".concat(this.secondInterval));\n          }\n        }\n\n        if (options.secondInterval === 0) {\n          options.secondInterval = 60;\n        } else {\n          options.secondInterval = 1;\n        }\n      }\n\n      if (this.hourRange && Array.isArray(this.hourRange)) {\n        options.hourRange = JSON.parse(JSON.stringify(this.hourRange));\n\n        if (!this.hourRange.length && this.debugMode) {\n          this.debugLog('The \"hour-range\" array is empty (length === 0)');\n        }\n      }\n\n      if (this.minuteRange && Array.isArray(this.minuteRange)) {\n        options.minuteRange = JSON.parse(JSON.stringify(this.minuteRange));\n\n        if (!this.minuteRange.length && this.debugMode) {\n          this.debugLog('The \"minute-range\" array is empty (length === 0)');\n        }\n      }\n\n      if (this.secondRange && Array.isArray(this.secondRange)) {\n        options.secondRange = JSON.parse(JSON.stringify(this.secondRange));\n\n        if (!this.secondRange.length && this.debugMode) {\n          this.debugLog('The \"second-range\" array is empty (length === 0)');\n        }\n      }\n\n      if (this.hideDisabledItems) {\n        options.hideDisabledItems = true;\n      }\n\n      if (this.hideDisabledHours || this.hideDisabledItems) {\n        options.hideDisabledHours = true;\n      }\n\n      if (this.hideDisabledMinutes || this.hideDisabledItems) {\n        options.hideDisabledMinutes = true;\n      }\n\n      if (this.hideDisabledSeconds || this.hideDisabledItems) {\n        options.hideDisabledSeconds = true;\n      }\n\n      if (this.hideDropdown) {\n        if (this.manualInput) {\n          options.hideDropdown = true;\n        } else if (this.debugMode) {\n          this.debugLog('\"hide-dropdown\" only works with \"manual-input\" mode');\n        }\n      }\n\n      if (this.blurDelay && +this.blurDelay > 0) {\n        options.blurDelay = +this.blurDelay;\n      }\n\n      if (this.manualInputTimeout && +this.manualInputTimeout > 0) {\n        options.manualInputTimeout = +this.manualInputTimeout;\n      }\n\n      if (this.dropOffsetHeight && +this.dropOffsetHeight > 0) {\n        options.dropOffsetHeight = +this.dropOffsetHeight;\n      }\n\n      return options;\n    },\n    useStringValue: function useStringValue() {\n      return typeof this.value === 'string';\n    },\n    formatString: function formatString() {\n      return this.opts.format || DEFAULT_OPTIONS.format;\n    },\n    inUse: function inUse() {\n      var _this = this;\n\n      var typesInUse = CONFIG.BASIC_TYPES.filter(function (type) {\n        return _this.getTokenByType(type);\n      }); // Sort types and tokens by their sequence in the \"format\" string\n\n      typesInUse.sort(function (l, r) {\n        return _this.formatString.indexOf(_this.getTokenByType(l) || null) - _this.formatString.indexOf(_this.getTokenByType(r) || null);\n      });\n      var tokensInUse = typesInUse.map(function (type) {\n        return _this.getTokenByType(type);\n      });\n      return {\n        hour: !!this.hourType,\n        minute: !!this.minuteType,\n        second: !!this.secondType,\n        apm: !!this.apmType,\n        types: typesInUse || [],\n        tokens: tokensInUse || []\n      };\n    },\n    displayTime: function displayTime() {\n      var formatString = String(this.formatString);\n\n      if (this.hour) {\n        formatString = formatString.replace(new RegExp(this.hourType, 'g'), this.hour);\n      }\n\n      if (this.minute) {\n        formatString = formatString.replace(new RegExp(this.minuteType, 'g'), this.minute);\n      }\n\n      if (this.second && this.secondType) {\n        formatString = formatString.replace(new RegExp(this.secondType, 'g'), this.second);\n      }\n\n      if (this.apm && this.apmType) {\n        formatString = formatString.replace(new RegExp(this.apmType, 'g'), this.apm);\n      }\n\n      return formatString;\n    },\n    customDisplayTime: function customDisplayTime() {\n      if (!this.amText && !this.pmText) {\n        return this.displayTime;\n      }\n\n      return this.displayTime.replace(new RegExp(this.apm, 'g'), this.apmDisplayText(this.apm));\n    },\n    inputIsEmpty: function inputIsEmpty() {\n      return this.formatString === this.displayTime;\n    },\n    allValueSelected: function allValueSelected() {\n      if (this.inUse.hour && !this.hour || this.inUse.minute && !this.minute || this.inUse.second && !this.second || this.inUse.apm && !this.apm) {\n        return false;\n      }\n\n      return true;\n    },\n    columnsSequence: function columnsSequence() {\n      return this.inUse.types.map(function (type) {\n        return type;\n      }) || [];\n    },\n    showClearBtn: function showClearBtn() {\n      if (this.hideClearButton || this.disabled) {\n        return false;\n      }\n\n      return !this.inputIsEmpty;\n    },\n    showDropdownBtn: function showDropdownBtn() {\n      if (this.fixedDropdownButton) {\n        return true;\n      }\n\n      if (this.opts.hideDropdown && this.isActive && !this.showDropdown) {\n        return true;\n      }\n\n      return false;\n    },\n    baseOn12Hours: function baseOn12Hours() {\n      return this.hourType === 'h' || this.hourType === 'hh';\n    },\n    hourRangeIn24HrFormat: function hourRangeIn24HrFormat() {\n      var _this2 = this;\n\n      if (!this.hourType || !this.opts.hourRange) {\n        return false;\n      }\n\n      if (!this.opts.hourRange.length) {\n        return [];\n      }\n\n      var range = [];\n      this.opts.hourRange.forEach(function (value) {\n        if (value instanceof Array) {\n          if (value.length > 2 && _this2.debugMode) {\n            _this2.debugLog(\"Nested array within \\\"hour-range\\\" must contain no more than two items. Only the first two items of \".concat(JSON.stringify(value), \" will be taken into account.\"));\n          }\n\n          var start = value[0];\n          var end = value[1] || value[0];\n\n          if (_this2.is12hRange(start)) {\n            start = _this2.translate12hRange(start);\n          }\n\n          if (_this2.is12hRange(end)) {\n            end = _this2.translate12hRange(end);\n          }\n\n          for (var i = +start; i <= +end; i++) {\n            if (i < 0 || i > 24) {\n              continue;\n            }\n\n            if (!range.includes(i)) {\n              range.push(i);\n            }\n          }\n        } else {\n          if (_this2.is12hRange(value)) {\n            value = _this2.translate12hRange(value);\n          } else {\n            value = +value;\n          }\n\n          if (value < 0 || value > 24) {\n            return;\n          }\n\n          if (!range.includes(value)) {\n            range.push(value);\n          }\n        }\n      });\n      range.sort(function (l, r) {\n        return l - r;\n      });\n      return range;\n    },\n    restrictedHourRange: function restrictedHourRange() {\n      // No restriction\n      if (!this.hourRangeIn24HrFormat) {\n        return false;\n      } // 12-Hour\n\n\n      if (this.baseOn12Hours) {\n        var range = this.hourRangeIn24HrFormat.map(function (value) {\n          if (value === 12) {\n            return '12p';\n          } else if (value === 24 || value === 0) {\n            return '12a';\n          }\n\n          return value > 12 ? \"\".concat(value % 12, \"p\") : \"\".concat(value, \"a\");\n        });\n        return range;\n      } // 24-Hour\n\n\n      return this.hourRangeIn24HrFormat;\n    },\n    validHoursList: function validHoursList() {\n      var _this3 = this;\n\n      if (!this.manualInput) {\n        return false;\n      }\n\n      if (this.restrictedHourRange) {\n        var list = [];\n\n        if (this.baseOn12Hours) {\n          list = this.restrictedHourRange.map(function (hr) {\n            var l = hr.substr(0, hr.length - 1);\n            var r = hr.substr(-1);\n            return \"\".concat(_this3.formatValue(_this3.hourType, l)).concat(r);\n          });\n          var am12Index = list.indexOf('12a');\n\n          if (am12Index > 0) {\n            // Make '12a' the first item in h/hh\n            list.unshift(list.splice(am12Index, 1)[0]);\n          }\n\n          return list;\n        }\n\n        list = this.restrictedHourRange.map(function (hr) {\n          return _this3.formatValue(_this3.hourType, hr);\n        });\n\n        if (list.length > 1 && list[0] && list[0] === '24') {\n          // Make '24' the last item in k/kk\n          list.push(list.shift());\n        }\n\n        return list;\n      }\n\n      if (this.baseOn12Hours) {\n        return [].concat([], this.hours.map(function (hr) {\n          return \"\".concat(hr, \"a\");\n        }), this.hours.map(function (hr) {\n          return \"\".concat(hr, \"p\");\n        }));\n      }\n\n      return this.hours;\n    },\n    has: function has() {\n      var result = {\n        customApmText: false\n      };\n      var apmEnabled = !!this.apmType;\n\n      if (apmEnabled && this.hourRangeIn24HrFormat && this.hourRangeIn24HrFormat.length) {\n        var range = [].concat([], this.hourRangeIn24HrFormat);\n        result.am = range.some(function (value) {\n          return value < 12 || value === 24;\n        });\n        result.pm = range.some(function (value) {\n          return value >= 12 && value < 24;\n        });\n      } else {\n        result.am = apmEnabled;\n        result.pm = apmEnabled;\n      }\n\n      if (this.amText && this.amText.length || this.pmText && this.pmText.length) {\n        result.customApmText = true;\n      }\n\n      return result;\n    },\n    minuteRangeList: function minuteRangeList() {\n      if (!this.minuteType || !this.opts.minuteRange) {\n        return false;\n      }\n\n      if (!this.opts.minuteRange.length) {\n        return [];\n      }\n\n      return this.renderRangeList(this.opts.minuteRange, 'minute');\n    },\n    secondRangeList: function secondRangeList() {\n      if (!this.secondType || !this.opts.secondRange) {\n        return false;\n      }\n\n      if (!this.opts.secondRange.length) {\n        return [];\n      }\n\n      return this.renderRangeList(this.opts.secondRange, 'second');\n    },\n    hourLabelText: function hourLabelText() {\n      return this.hourLabel || this.hourType;\n    },\n    minuteLabelText: function minuteLabelText() {\n      return this.minuteLabel || this.minuteType;\n    },\n    secondLabelText: function secondLabelText() {\n      return this.secondLabel || this.secondType;\n    },\n    apmLabelText: function apmLabelText() {\n      return this.apmLabel || this.apmType;\n    },\n    inputWidthStyle: function inputWidthStyle() {\n      if (!this.inputWidth || !this.inputWidth.length) {\n        return;\n      }\n\n      return {\n        width: this.inputWidth\n      };\n    },\n    tokenRegexBase: function tokenRegexBase() {\n      return this.inUse.tokens.join('|');\n    },\n    tokenChunks: function tokenChunks() {\n      if (!this.manualInput && !this.useStringValue) {\n        return false;\n      }\n\n      var formatString = String(this.formatString);\n      var tokensRegxStr = \"(\".concat(this.tokenRegexBase, \")+?\");\n      var tokensMatchAll = this.getMatchAllByRegex(formatString, tokensRegxStr);\n      var tokenChunks = [];\n\n      var _iterator = _createForOfIteratorHelper(tokensMatchAll),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var tkMatch = _step.value;\n          var rawToken = tkMatch[0];\n          var tokenMatchItem = {\n            index: tkMatch.index,\n            token: rawToken,\n            type: this.getTokenType(rawToken),\n            needsCalibrate: rawToken.length < 2,\n            len: (rawToken || '').length\n          };\n          tokenChunks.push(tokenMatchItem);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return tokenChunks;\n    },\n    needsPosCalibrate: function needsPosCalibrate() {\n      if (!this.manualInput) {\n        return false;\n      }\n\n      return this.tokenChunks.some(function (chk) {\n        return chk.needsCalibrate;\n      });\n    },\n    tokenChunksPos: function tokenChunksPos() {\n      var _this4 = this;\n\n      if (!this.manualInput) {\n        return false;\n      }\n\n      if (!this.needsPosCalibrate) {\n        return this.tokenChunks.map(function (chk) {\n          return {\n            token: chk.token,\n            type: chk.type,\n            start: chk.index,\n            end: chk.index + chk.len\n          };\n        });\n      }\n\n      var list = [];\n      var calibrateLen = 0;\n      this.tokenChunks.forEach(function (chk) {\n        var chunkCurrentLen; // Adjust for customized AM/PM text\n\n        if (chk.type === 'apm' && _this4.has.customApmText) {\n          if (_this4.apm && _this4.apm.length) {\n            var customApmText = _this4.apm.toLowerCase() === 'am' ? _this4.amText : _this4.pmText;\n            chunkCurrentLen = customApmText && customApmText.length ? customApmText.length : chk.len;\n          } else {\n            chunkCurrentLen = chk.len;\n          } // Others\n\n        } else {\n          chunkCurrentLen = _this4[chk.type] && _this4[chk.type].length ? _this4[chk.type].length : chk.len;\n        }\n\n        list.push({\n          token: chk.token,\n          type: chk.type,\n          start: chk.index + calibrateLen,\n          end: chk.index + calibrateLen + chunkCurrentLen\n        });\n\n        if (chk.needsCalibrate && chunkCurrentLen > chk.len) {\n          calibrateLen += chunkCurrentLen - chk.len;\n        }\n      });\n      return list;\n    },\n    invalidValues: function invalidValues() {\n      if (this.inputIsEmpty) {\n        return [];\n      }\n\n      if (!this.restrictedHourRange && !this.minuteRangeList && !this.secondRangeList && this.opts.minuteInterval === 1 && this.opts.secondInterval === 1) {\n        return [];\n      }\n\n      var result = [];\n\n      if (this.inUse.hour && !this.isEmptyValue(this.hourType, this.hour) && (!this.isValidValue(this.hourType, this.hour) || this.isDisabled('hour', this.hour))) {\n        result.push('hour');\n      }\n\n      if (this.inUse.minute && !this.isEmptyValue(this.minuteType, this.minute) && (!this.isValidValue(this.minuteType, this.minute) || this.isDisabled('minute', this.minute) || this.notInInterval('minute', this.minute))) {\n        result.push('minute');\n      }\n\n      if (this.inUse.second && !this.isEmptyValue(this.secondType, this.second) && (!this.isValidValue(this.secondType, this.second) || this.isDisabled('second', this.second) || this.notInInterval('second', this.second))) {\n        result.push('second');\n      }\n\n      if (this.inUse.apm && !this.isEmptyValue(this.apmType, this.apm) && (!this.isValidValue(this.apmType, this.apm) || this.isDisabled('apm', this.apm))) {\n        result.push('apm');\n      }\n\n      if (result.length) {\n        return result;\n      }\n\n      return [];\n    },\n    hasInvalidInput: function hasInvalidInput() {\n      return Boolean(this.invalidValues && this.invalidValues.length);\n    },\n    autoDirectionEnabled: function autoDirectionEnabled() {\n      return this.dropDirection === 'auto';\n    },\n    dropdownDirClass: function dropdownDirClass() {\n      if (this.autoDirectionEnabled) {\n        return this.forceDropOnTop ? 'drop-up' : 'drop-down';\n      }\n\n      return this.dropDirection === 'up' ? 'drop-up' : 'drop-down';\n    }\n  },\n  watch: {\n    'opts.format': function optsFormat(newValue) {\n      this.renderFormat(newValue);\n    },\n    'opts.minuteInterval': function optsMinuteInterval(newInteval) {\n      this.renderList('minute', newInteval);\n    },\n    'opts.secondInterval': function optsSecondInterval(newInteval) {\n      this.renderList('second', newInteval);\n    },\n    value: {\n      deep: true,\n      handler: function handler() {\n        this.readValues();\n      }\n    },\n    displayTime: function displayTime() {\n      this.fillValues();\n    },\n    disabled: function disabled(toDisabled) {\n      if (toDisabled) {\n        // Force close dropdown and reset status when disabled\n        if (this.isActive) {\n          this.isActive = false;\n        }\n\n        if (this.showDropdown) {\n          this.showDropdown = false;\n        }\n      }\n    },\n    'invalidValues.length': function invalidValuesLength(newLength, oldLength) {\n      if (newLength && newLength >= 1) {\n        this.$emit('error', this.invalidValues);\n      } else if (oldLength && oldLength >= 1) {\n        this.$emit('error', []);\n      }\n    }\n  },\n  methods: {\n    formatValue: function formatValue(token, i) {\n      if (!this.isNumber(i)) {\n        return '';\n      }\n\n      i = +i;\n\n      switch (token) {\n        case 'H':\n        case 'h':\n        case 'k':\n        case 'm':\n        case 's':\n          if (['h', 'k'].includes(token) && i === 0) {\n            return token === 'k' ? '24' : '12';\n          }\n\n          return String(i);\n\n        case 'HH':\n        case 'mm':\n        case 'ss':\n        case 'hh':\n        case 'kk':\n          if (['hh', 'kk'].includes(token) && i === 0) {\n            return token === 'kk' ? '24' : '12';\n          }\n\n          return i < 10 ? \"0\".concat(i) : String(i);\n\n        default:\n          return '';\n      }\n    },\n    checkAcceptingType: function checkAcceptingType(validValues, formatString) {\n      if (!validValues || !formatString || !formatString.length) {\n        return '';\n      }\n\n      for (var i = 0; i < validValues.length; i++) {\n        if (formatString.indexOf(validValues[i]) > -1) {\n          return validValues[i];\n        }\n      }\n\n      return '';\n    },\n    renderFormat: function renderFormat(newFormat) {\n      var _this5 = this;\n\n      newFormat = newFormat || this.opts.format || DEFAULT_OPTIONS.format;\n      var hourType = this.checkAcceptingType(CONFIG.HOUR_TOKENS, newFormat);\n      var minuteType = this.checkAcceptingType(CONFIG.MINUTE_TOKENS, newFormat);\n      this.secondType = this.checkAcceptingType(CONFIG.SECOND_TOKENS, newFormat);\n      this.apmType = this.checkAcceptingType(CONFIG.APM_TOKENS, newFormat); // Failsafe checking\n\n      if (!hourType && !minuteType && !this.secondType && !this.apmType) {\n        if (this.debugMode && this.format) {\n          this.debugLog(\"No valid tokens found in your defined \\\"format\\\" string \\\"\".concat(this.format, \"\\\". Fallback to the default \\\"HH:mm\\\" format.\"));\n        }\n\n        hourType = 'HH';\n        minuteType = 'mm';\n      }\n\n      this.hourType = hourType;\n      this.minuteType = minuteType;\n      this.hourType ? this.renderHoursList() : this.hours = [];\n      this.minuteType ? this.renderList('minute') : this.minutes = [];\n      this.secondType ? this.renderList('second') : this.seconds = [];\n      this.apmType ? this.renderApmList() : this.apms = [];\n      this.$nextTick(function () {\n        _this5.readValues();\n      });\n    },\n    renderHoursList: function renderHoursList() {\n      var hoursCount = this.baseOn12Hours ? 12 : 24;\n      var hours = [];\n\n      for (var i = 0; i < hoursCount; i++) {\n        if (this.hourType === 'k' || this.hourType === 'kk') {\n          hours.push(this.formatValue(this.hourType, i + 1));\n        } else {\n          hours.push(this.formatValue(this.hourType, i));\n        }\n      }\n\n      this.hours = hours;\n    },\n    renderList: function renderList(listType, interval) {\n      if (!this.isMinuteOrSecond(listType)) {\n        return;\n      }\n\n      var isMinute = listType === 'minute';\n      interval = interval || (isMinute ? this.opts.minuteInterval || DEFAULT_OPTIONS.minuteInterval : this.opts.secondInterval || DEFAULT_OPTIONS.secondInterval);\n      var result = [];\n\n      for (var i = 0; i < 60; i += interval) {\n        result.push(this.formatValue(isMinute ? this.minuteType : this.secondType, i));\n      }\n\n      isMinute ? this.minutes = result : this.seconds = result;\n    },\n    renderApmList: function renderApmList() {\n      this.apms = this.apmType === 'A' ? ['AM', 'PM'] : ['am', 'pm'];\n    },\n    readValues: function readValues() {\n      if (this.useStringValue) {\n        if (this.debugMode) {\n          this.debugLog(\"Received a string value: \\\"\".concat(this.value, \"\\\"\"));\n        }\n\n        this.readStringValues(this.value);\n      } else {\n        if (this.debugMode) {\n          this.debugLog(\"Received an object value: \\\"\".concat(JSON.stringify(this.value || {}), \"\\\"\"));\n        }\n\n        this.readObjectValues(this.value);\n      }\n    },\n    readObjectValues: function readObjectValues(objValue) {\n      var _this6 = this;\n\n      var timeValue = JSON.parse(JSON.stringify(objValue || {}));\n      var values = Object.keys(timeValue); // Failsafe for empty `v-model` object\n\n      if (values.length === 0) {\n        this.addFallbackValues();\n        return;\n      }\n\n      CONFIG.BASIC_TYPES.forEach(function (type) {\n        var token = _this6.getTokenByType(type);\n\n        if (values.indexOf(token) > -1) {\n          var sanitizedValue = _this6.sanitizedValue(token, timeValue[token]);\n\n          _this6[type] = sanitizedValue;\n          timeValue[token] = sanitizedValue;\n        } else {\n          _this6[type] = '';\n        }\n      });\n      this.timeValue = timeValue;\n    },\n    getMatchAllByRegex: function getMatchAllByRegex(testString, regexString) {\n      var str = 'polyfillTest';\n      var needsPolyfill = Boolean(!str.matchAll || typeof str.matchAll !== 'function');\n      return needsPolyfill ? this.polyfillMatchAll(testString, regexString) : testString.matchAll(new RegExp(regexString, 'g'));\n    },\n    readStringValues: function readStringValues(stringValue) {\n      var _this7 = this;\n\n      // Failsafe for empty `v-model` string\n      if (!stringValue || !stringValue.length) {\n        this.addFallbackValues();\n        return;\n      }\n\n      var formatString = String(this.formatString);\n      var tokensRegxStr = \"(\".concat(this.tokenRegexBase, \")+?\");\n      var othersRegxStr = \"[^(\".concat(this.tokenRegexBase, \")]+\");\n      var tokensMatchAll = this.getMatchAllByRegex(formatString, tokensRegxStr);\n      var othersMatchAll = this.getMatchAllByRegex(formatString, othersRegxStr);\n      var chunks = [];\n      var tokenChunks = [];\n\n      var _iterator2 = _createForOfIteratorHelper(tokensMatchAll),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var tkMatch = _step2.value;\n          var tokenMatchItem = {\n            index: tkMatch.index,\n            token: tkMatch[0],\n            isValueToken: true\n          };\n          chunks.push(tokenMatchItem);\n          tokenChunks.push(tokenMatchItem);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(othersMatchAll),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var otMatch = _step3.value;\n          chunks.push({\n            index: otMatch.index,\n            token: otMatch[0]\n          });\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      chunks.sort(function (l, r) {\n        return l.index < r.index ? -1 : 1;\n      });\n      var regexCombo = '';\n      chunks.forEach(function (chunk) {\n        if (chunk.isValueToken) {\n          var tokenRegex = _this7.getTokenRegex(chunk.token) || '';\n          regexCombo += tokenRegex;\n        } else {\n          var safeChars = chunk.token.replace(/\\\\{0}(\\*|\\?|\\.|\\+)/g, '\\\\$1');\n          regexCombo += \"(?:\".concat(safeChars, \")\");\n        }\n      });\n      var comboReg = new RegExp(regexCombo); // Do test before match\n\n      if (comboReg.test(stringValue)) {\n        var matchResults = stringValue.match(new RegExp(regexCombo));\n        var valueResults = matchResults.slice(1, tokenChunks.length + 1);\n        var timeValue = {};\n        valueResults.forEach(function (value, vrIndex) {\n          if (tokenChunks[vrIndex]) {\n            var targetToken = tokenChunks[vrIndex].token;\n            timeValue[targetToken] = _this7.setValueFromString(value, targetToken);\n          }\n        });\n        this.timeValue = timeValue;\n\n        if (this.debugMode) {\n          var tokenChunksForLog = tokenChunks.map(function (tChunk) {\n            return tChunk && tChunk.token;\n          });\n          this.debugLog(\"Successfully parsed values \".concat(JSON.stringify(valueResults), \"\\nfor \").concat(JSON.stringify(tokenChunksForLog), \"\\nin format pattern '\").concat(this.formatString, \"'\"));\n        }\n      } else {\n        if (this.debugMode) {\n          this.debugLog(\"The input string in \\\"v-model\\\" does NOT match the \\\"format\\\" pattern\\nformat: \".concat(this.formatString, \"\\nv-model: \").concat(stringValue));\n        }\n      }\n    },\n    polyfillMatchAll: function polyfillMatchAll(targetString, regxStr) {\n      var matchesList = targetString.match(new RegExp(regxStr, 'g'));\n      var result = [];\n      var indicesReg = [];\n\n      if (matchesList && matchesList.length) {\n        matchesList.forEach(function (matchedItem) {\n          var existIndex = indicesReg.findIndex(function (idxItem) {\n            return idxItem.str === matchedItem;\n          });\n          var index;\n\n          if (existIndex >= 0) {\n            if (indicesReg[existIndex] && indicesReg[existIndex].regex) {\n              index = indicesReg[existIndex].regex.exec(targetString).index;\n            }\n          } else {\n            var itemIndicesRegex = new RegExp(matchedItem, 'g');\n            index = itemIndicesRegex.exec(targetString).index;\n            indicesReg.push({\n              str: String(matchedItem),\n              regex: itemIndicesRegex\n            });\n          }\n\n          result.push({\n            0: String(matchedItem),\n            index: index\n          });\n        });\n      }\n\n      return result;\n    },\n    addFallbackValues: function addFallbackValues() {\n      var _this8 = this;\n\n      var timeValue = {};\n      this.inUse.types.forEach(function (type) {\n        timeValue[_this8.getTokenByType(type)] = '';\n      });\n      this.timeValue = timeValue;\n    },\n    setValueFromString: function setValueFromString(parsedValue, token) {\n      if (!token || !parsedValue) {\n        return '';\n      }\n\n      var tokenType = this.getTokenType(token);\n\n      if (!tokenType || !tokenType.length) {\n        return '';\n      }\n\n      var stdValue = parsedValue !== this.getTokenByType(tokenType) ? parsedValue : '';\n      this[tokenType] = stdValue;\n      return stdValue;\n    },\n    fillValues: function fillValues(forceEmit) {\n      var _this9 = this;\n\n      var fullValues = {};\n      var baseHour = this.hour;\n      var baseHourType = this.hourType;\n      var apmValue; // Hour type or hour value is NOT set in the \"format\" string\n\n      if (!baseHourType || !this.isNumber(baseHour)) {\n        CONFIG.HOUR_TOKENS.forEach(function (token) {\n          return fullValues[token] = '';\n        });\n        apmValue = this.lowerCasedApm(this.apm || '');\n        fullValues.a = apmValue;\n        fullValues.A = apmValue.toUpperCase(); // Both Hour type and value are set\n      } else {\n        var hourValue = +baseHour;\n\n        var _apmValue = this.baseOn12Hours && this.apm ? this.lowerCasedApm(this.apm) : false;\n\n        CONFIG.HOUR_TOKENS.forEach(function (token) {\n          if (token === baseHourType) {\n            fullValues[token] = baseHour;\n            return;\n          }\n\n          var value;\n          var apm;\n\n          switch (token) {\n            case 'H':\n            case 'HH':\n            case 'k':\n            case 'kk':\n              if (_this9.baseOn12Hours) {\n                if (_apmValue === 'pm') {\n                  value = hourValue < 12 ? hourValue + 12 : hourValue;\n                } else if (['k', 'kk'].includes(token)) {\n                  value = hourValue === 12 ? 24 : hourValue;\n                } else {\n                  value = hourValue % 12;\n                }\n              } else {\n                if (['k', 'kk'].includes(token)) {\n                  value = hourValue === 0 ? 24 : hourValue;\n                } else {\n                  value = hourValue % 24;\n                }\n              }\n\n              fullValues[token] = _this9.formatValue(token, value);\n              break;\n\n            case 'h':\n            case 'hh':\n              // h <-> hh\n              if (_this9.baseOn12Hours) {\n                value = hourValue;\n                apm = _apmValue || ''; // Read from other hour formats\n              } else {\n                if (hourValue > 11 && hourValue < 24) {\n                  apm = 'pm';\n                  value = hourValue === 12 ? 12 : hourValue % 12;\n                } else {\n                  apm = 'am';\n                  value = hourValue % 12 === 0 ? 12 : hourValue;\n                }\n              }\n\n              fullValues[token] = _this9.formatValue(token, value);\n              fullValues.a = apm;\n              fullValues.A = apm.toUpperCase();\n              break;\n          }\n        });\n      }\n\n      fullValues.m = this.formatValue('m', this.minute);\n      fullValues.mm = this.formatValue('mm', this.minute);\n      fullValues.s = this.formatValue('s', this.second);\n      fullValues.ss = this.formatValue('ss', this.second);\n      this.fullValues = fullValues; // On lazy mode, emit `input` and `change` events only when:\n      // - The user pick a new value and then close the dropdown\n      // - The user click the (\"x\") clear button\n\n      if (!this.lazy || forceEmit) {\n        this.emitTimeValue();\n      }\n\n      if (this.closeOnComplete && this.allValueSelected && this.showDropdown) {\n        this.toggleActive();\n      }\n    },\n    getFullData: function getFullData() {\n      if (!this.fullValues) {\n        this.fillValues();\n      }\n\n      return {\n        data: JSON.parse(JSON.stringify(this.fullValues)),\n        displayTime: this.inputIsEmpty ? '' : String(this.displayTime)\n      };\n    },\n    emitTimeValue: function emitTimeValue() {\n      if (this.lazy && this.bakDisplayTime === this.displayTime) {\n        if (this.debugMode) {\n          this.debugLog('The value does not change on `lazy` mode. Skip the emitting `input` and `change` event.');\n        }\n\n        return;\n      }\n\n      var fullData = this.getFullData();\n\n      if (this.useStringValue) {\n        this.$emit('input', fullData.displayTime);\n      } else {\n        var fullValues = fullData.data;\n        var tokensInUse = this.inUse.tokens || [];\n        var timeValue = {};\n        tokensInUse.forEach(function (token) {\n          timeValue[token] = fullValues[token] || '';\n        });\n        this.$emit('input', JSON.parse(JSON.stringify(timeValue)));\n      }\n\n      this.$emit('change', fullData);\n    },\n    translate12hRange: function translate12hRange(value) {\n      var valueT = this.match12hRange(value);\n\n      if (+valueT[1] === 12) {\n        return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 0 : 12);\n      }\n\n      return +valueT[1] + (valueT[2].toLowerCase() === 'p' ? 12 : 0);\n    },\n    isDisabled: function isDisabled(type, value) {\n      if (!this.isBasicType(type) || !this.inUse[type]) {\n        return true;\n      }\n\n      switch (type) {\n        case 'hour':\n          return this.isDisabledHour(value);\n\n        case 'minute':\n        case 'second':\n          if (!this[\"\".concat(type, \"RangeList\")]) {\n            return false;\n          }\n\n          return !this[\"\".concat(type, \"RangeList\")].includes(value);\n\n        case 'apm':\n          if (!this.restrictedHourRange) {\n            return false;\n          }\n\n          return !this.has[this.lowerCasedApm(value)];\n\n        default:\n          return true;\n      }\n    },\n    isDisabledHour: function isDisabledHour(value) {\n      if (!this.restrictedHourRange) {\n        return false;\n      }\n\n      if (this.baseOn12Hours) {\n        if (!this.apm || !this.apm.length) {\n          return false;\n        } else {\n          var token = this.apm.toLowerCase() === 'am' ? 'a' : 'p';\n          return !this.restrictedHourRange.includes(\"\".concat(+value).concat(token));\n        }\n      } // Fallback for 'HH' and 'H hour format with a `hour-range` in a 12-hour form\n\n\n      if ((this.hourType === 'HH' || this.hourType === 'H') && +value === 0 && this.restrictedHourRange.includes(24)) {\n        return false;\n      }\n\n      return !this.restrictedHourRange.includes(+value);\n    },\n    notInInterval: function notInInterval(section, value) {\n      if (!section || !this.isMinuteOrSecond(section)) {\n        return;\n      }\n\n      if (this.opts[\"\".concat(section, \"Interval\")] === 1) {\n        return false;\n      }\n\n      return +value % this.opts[\"\".concat(section, \"Interval\")] !== 0;\n    },\n    renderRangeList: function renderRangeList(rawRange, section) {\n      var _this10 = this;\n\n      if (!rawRange || !section || !this.isMinuteOrSecond(section)) {\n        return [];\n      }\n\n      var range = [];\n      var formatedValue;\n      rawRange.forEach(function (value) {\n        if (value instanceof Array) {\n          if (value.length > 2 && _this10.debugMode) {\n            _this10.debugLog(\"Nested array within \\\"\".concat(section, \"-range\\\" must contain no more than two items. Only the first two items of \").concat(JSON.stringify(value), \" will be taken into account.\"));\n          }\n\n          var start = value[0];\n          var end = value[1] || value[0];\n\n          for (var i = +start; i <= +end; i++) {\n            if (i < 0 || i > 59) {\n              continue;\n            }\n\n            formatedValue = _this10.formatValue(_this10.getTokenByType(section), i);\n\n            if (!range.includes(formatedValue)) {\n              range.push(formatedValue);\n            }\n          }\n        } else {\n          if (+value < 0 || +value > 59) {\n            return;\n          }\n\n          formatedValue = _this10.formatValue(_this10.getTokenByType(section), value);\n\n          if (!range.includes(formatedValue)) {\n            range.push(formatedValue);\n          }\n        }\n      });\n      range.sort(function (l, r) {\n        return l - r;\n      }); // Debug Mode\n\n      if (this.debugMode) {\n        var fullList = (section === 'minute' ? this.minutes : this.seconds) || [];\n        var validItems = fullList.filter(function (item) {\n          return range.includes(item);\n        });\n\n        if (!validItems || !validItems.length) {\n          if (section === 'minute') {\n            this.debugLog(\"The minute list is empty due to the \\\"minute-range\\\" config\\nminute-range: \".concat(JSON.stringify(this.minuteRange), \"\\nminute-interval: \").concat(this.opts.minuteInterval));\n          } else {\n            this.debugLog(\"The second list is empty due to the \\\"second-range\\\" config\\nsecond-range: \".concat(JSON.stringify(this.secondRange), \"\\nsecond-interval: \").concat(this.opts.secondInterval));\n          }\n        }\n      }\n\n      return range;\n    },\n    forceApmSelection: function forceApmSelection() {\n      if (this.manualInput) {\n        // Skip this to allow users to paste a string value from the clipboard in Manual Input mode\n        return;\n      }\n\n      if (this.apmType && !this.apm) {\n        if (this.has.am || this.has.pm) {\n          this.doClearApmChecking = true;\n          var apmValue = this.has.am ? 'am' : 'pm';\n          this.apm = this.apmType === 'A' ? apmValue.toUpperCase() : apmValue;\n        }\n      }\n    },\n    emptyApmSelection: function emptyApmSelection() {\n      if (this.doClearApmChecking && this.hour === '' && this.minute === '' && this.second === '') {\n        this.apm = '';\n      }\n\n      this.doClearApmChecking = false;\n    },\n    apmDisplayText: function apmDisplayText(apmValue) {\n      if (this.amText && this.lowerCasedApm(apmValue) === 'am') {\n        return this.amText;\n      }\n\n      if (this.pmText && this.lowerCasedApm(apmValue) === 'pm') {\n        return this.pmText;\n      }\n\n      return apmValue;\n    },\n    toggleActive: function toggleActive() {\n      var _this11 = this;\n\n      if (this.disabled) {\n        return;\n      }\n\n      this.isActive = !this.isActive;\n\n      if (this.isActive) {\n        this.isFocusing = true;\n\n        if (this.manualInput) {\n          this.$emit('focus');\n        }\n\n        if (!this.opts.hideDropdown) {\n          this.setDropdownState(true);\n        } // Record to check if value did change in the later phase\n\n\n        if (this.lazy) {\n          this.bakDisplayTime = String(this.displayTime || '');\n        }\n\n        if (this.manualInput && !this.inputIsEmpty) {\n          this.$nextTick(function () {\n            if (_this11.$refs.input && _this11.$refs.input.selectionStart === 0 && _this11.$refs.input.selectionEnd === _this11.displayTime.length) {\n              // Select the first slot instead of the whole value string when tabbed in\n              _this11.selectFirstSlot();\n            }\n          });\n        }\n      } else {\n        if (this.showDropdown) {\n          this.setDropdownState(false);\n        } else if (this.manualInput) {\n          this.$emit('blur', this.getFullData());\n        }\n\n        this.isFocusing = false;\n\n        if (this.lazy) {\n          this.fillValues(true);\n          this.bakDisplayTime = undefined;\n        }\n      }\n\n      if (this.restrictedHourRange && this.baseOn12Hours) {\n        this.showDropdown ? this.forceApmSelection() : this.emptyApmSelection();\n      }\n\n      if (this.showDropdown) {\n        this.checkForAutoScroll();\n      }\n    },\n    setDropdownState: function setDropdownState(toShow) {\n      var fromUserClick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (toShow) {\n        if (this.appendToBody) {\n          this.appendDropdownToBody();\n        }\n\n        this.keepFocusing();\n\n        if (this.autoDirectionEnabled) {\n          this.checkDropDirection();\n        }\n\n        this.showDropdown = true;\n        this.$emit('open');\n\n        if (fromUserClick) {\n          if (this.fixedDropdownButton) {\n            this.isActive = true;\n          }\n\n          this.$emit('blur', this.getFullData());\n          this.checkForAutoScroll();\n        }\n      } else {\n        this.showDropdown = false;\n        this.$emit('close', this.getFullData());\n\n        if (this.appendToBody) {\n          this.removeDropdownFromBody();\n        }\n      }\n    },\n    appendDropdownToBody: function appendDropdownToBody() {\n      var dropdown = this.$refs && this.$refs.dropdown;\n      var body = document.getElementsByTagName('body')[0];\n\n      if (body && dropdown) {\n        window.addEventListener('scroll', this.updateDropdownPos);\n        dropdown.classList.add('vue__time-picker-dropdown');\n        this.updateDropdownPos();\n        body.appendChild(dropdown);\n      }\n    },\n    updateDropdownPos: function updateDropdownPos() {\n      if (!this.appendToBody) {\n        return;\n      }\n\n      var dropdown = this.$refs && this.$refs.dropdown;\n      var body = document.getElementsByTagName('body')[0];\n\n      if (body && dropdown) {\n        var box = this.$el.getBoundingClientRect();\n\n        if (this.dropdownDirClass === 'drop-up') {\n          dropdown.style.bottom = \"\".concat(window.innerHeight - box.y, \"px\");\n          dropdown.style.top = 'auto';\n        } else {\n          dropdown.style.top = \"\".concat(box.y + box.height, \"px\");\n          dropdown.style.bottom = 'auto';\n        }\n\n        dropdown.style.left = \"\".concat(box.x, \"px\");\n      }\n    },\n    removeDropdownFromBody: function removeDropdownFromBody() {\n      var dropdown = this.$refs && this.$refs.dropdown;\n      var body = document.getElementsByTagName('body')[0];\n\n      if (body && dropdown && body.contains(dropdown)) {\n        body.removeChild(dropdown);\n      }\n\n      if (dropdown) {\n        dropdown.classList.remove('vue__time-picker-dropdown');\n        dropdown.style.top = '';\n        dropdown.style.bottom = '';\n        dropdown.style.left = '';\n        this.$el.appendChild(dropdown);\n      }\n\n      window.removeEventListener('scroll', this.updateDropdownPos);\n    },\n    blurEvent: function blurEvent() {\n      if (this.manualInput && !this.opts.hideDropdown) {\n        // hideDropdown's `blur` event is handled somewhere else\n        this.$emit('blur', this.getFullData());\n      }\n    },\n    select: function select(type, value) {\n      if (this.isBasicType(type) && !this.isDisabled(type, value)) {\n        this[type] = value;\n\n        if (this.doClearApmChecking) {\n          this.doClearApmChecking = false;\n        }\n      }\n    },\n    clearTime: function clearTime() {\n      if (this.disabled) {\n        return;\n      }\n\n      this.hour = '';\n      this.minute = '';\n      this.second = '';\n      this.apm = '';\n\n      if (this.manualInput && this.$refs && this.$refs.input && this.$refs.input.value.length) {\n        this.$refs.input.value = '';\n      }\n\n      if (this.lazy) {\n        this.fillValues(true);\n      }\n    },\n    //\n    // Auto-Scroll\n    //\n    checkForAutoScroll: function checkForAutoScroll() {\n      var _this12 = this;\n\n      if (this.inputIsEmpty) {\n        return;\n      }\n\n      if (this.autoScroll) {\n        this.$nextTick(function () {\n          _this12.scrollToSelectedValues();\n        });\n      } else if (this.advancedKeyboard) {\n        // Auto-focus on selected value in the first column for advanced-keyboard\n        this.$nextTick(function () {\n          var firstColumn = _this12.inUse.types[0];\n\n          _this12.scrollToSelected(firstColumn, true);\n        });\n      }\n    },\n    scrollToSelected: function scrollToSelected(column) {\n      var allowFallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!this.timeValue || this.inputIsEmpty) {\n        return;\n      }\n\n      var targetList;\n\n      if (this.appendToBody && this.$refs && this.$refs.dropdown) {\n        targetList = this.$refs.dropdown.querySelectorAll(\"ul.\".concat(column, \"s\"))[0];\n      } else {\n        targetList = this.$el.querySelectorAll(\"ul.\".concat(column, \"s\"))[0];\n      }\n\n      var targetValue = this.activeItemInCol(column)[0];\n\n      if (!targetValue && allowFallback) {\n        // No value selected in the target column, fallback to the first found valid item\n        targetValue = this.validItemsInCol(column)[0];\n      }\n\n      if (targetList && targetValue) {\n        targetList.scrollTop = targetValue.offsetTop || 0;\n\n        if (this.advancedKeyboard) {\n          targetValue.focus();\n        }\n      }\n    },\n    scrollToSelectedValues: function scrollToSelectedValues() {\n      var _this13 = this;\n\n      if (!this.timeValue || this.inputIsEmpty) {\n        return;\n      }\n\n      this.inUse.types.forEach(function (section) {\n        _this13.scrollToSelected(section);\n      });\n    },\n    //\n    // Additional Keyboard Navigation\n    //\n    onFocus: function onFocus() {\n      if (this.disabled) {\n        return;\n      }\n\n      if (!this.isFocusing) {\n        this.isFocusing = true;\n      }\n\n      if (!this.isActive) {\n        this.toggleActive();\n      }\n    },\n    escBlur: function escBlur() {\n      if (this.disabled) {\n        return;\n      }\n\n      window.clearTimeout(this.debounceTimer);\n      this.isFocusing = false;\n      var inputBox = this.$el.querySelectorAll('input.display-time')[0];\n\n      if (inputBox) {\n        inputBox.blur();\n      }\n    },\n    debounceBlur: function debounceBlur() {\n      var _this14 = this;\n\n      if (this.disabled) {\n        return;\n      }\n\n      this.isFocusing = false;\n      window.clearTimeout(this.debounceTimer);\n      this.debounceTimer = window.setTimeout(function () {\n        window.clearTimeout(_this14.debounceTimer);\n\n        _this14.onBlur();\n      }, this.opts.blurDelay);\n    },\n    onBlur: function onBlur() {\n      if (!this.disabled && !this.isFocusing && this.isActive) {\n        this.toggleActive();\n      }\n    },\n    keepFocusing: function keepFocusing() {\n      if (this.disabled) {\n        return;\n      }\n\n      window.clearTimeout(this.debounceTimer);\n\n      if (!this.isFocusing) {\n        this.isFocusing = true;\n      }\n    },\n    onTab: function onTab(column, value, evt) {\n      if (this.appendToBody && evt.shiftKey) {\n        var firstColumn = this.inUse.types[0];\n\n        if (column !== firstColumn) {\n          return;\n        }\n\n        var firstValidValue = this.validItemsInCol(firstColumn)[0]; // Is the first valid item in the first column\n\n        if (firstValidValue && firstValidValue.getAttribute('data-key') === String(value)) {\n          evt.preventDefault(); // Focus back on <input>\n\n          if (this.$refs && this.$refs.input) {\n            this.$refs.input.focus();\n          }\n        }\n      }\n    },\n    validItemsInCol: function validItemsInCol(column) {\n      var columnClass = \"\".concat(column, \"s\");\n\n      if (this.appendToBody && this.$refs && this.$refs.dropdown) {\n        return this.$refs.dropdown.querySelectorAll(\"ul.\".concat(columnClass, \" > li:not(.hint):not([disabled])\"));\n      }\n\n      return this.$el.querySelectorAll(\"ul.\".concat(columnClass, \" > li:not(.hint):not([disabled])\"));\n    },\n    activeItemInCol: function activeItemInCol(column) {\n      var columnClass = \"\".concat(column, \"s\");\n\n      if (this.appendToBody && this.$refs && this.$refs.dropdown) {\n        return this.$refs.dropdown.querySelectorAll(\"ul.\".concat(columnClass, \" > li.active:not(.hint)\"));\n      }\n\n      return this.$el.querySelectorAll(\"ul.\".concat(columnClass, \" > li.active:not(.hint)\"));\n    },\n    getClosestSibling: function getClosestSibling(column, dataKey) {\n      var getPrevious = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var siblingsInCol = this.validItemsInCol(column);\n      var selfIndex = Array.prototype.findIndex.call(siblingsInCol, function (sbl) {\n        return sbl.getAttribute('data-key') === dataKey;\n      }); // Already the first item\n\n      if (getPrevious && selfIndex === 0) {\n        return siblingsInCol[siblingsInCol.length - 1];\n      } // Already the last item\n\n\n      if (!getPrevious && selfIndex === siblingsInCol.length - 1) {\n        return siblingsInCol[0];\n      } // Selected value not in the valid values list\n\n\n      if (selfIndex < 0) {\n        return siblingsInCol[0];\n      }\n\n      if (getPrevious) {\n        return siblingsInCol[selfIndex - 1];\n      }\n\n      return siblingsInCol[selfIndex + 1];\n    },\n    prevItem: function prevItem(column, dataKey) {\n      var isManualInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var targetItem = this.getClosestSibling(column, dataKey, true);\n\n      if (targetItem) {\n        return isManualInput ? targetItem : targetItem.focus();\n      }\n    },\n    nextItem: function nextItem(column, dataKey) {\n      var isManualInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var targetItem = this.getClosestSibling(column, dataKey, false);\n\n      if (targetItem) {\n        return isManualInput ? targetItem : targetItem.focus();\n      }\n    },\n    getSideColumnName: function getSideColumnName(currentColumn) {\n      var toLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var currentColumnIndex = this.inUse.types.indexOf(currentColumn);\n\n      if (toLeft && currentColumnIndex <= 0) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the leftmost list already');\n        }\n\n        return;\n      } else if (!toLeft && currentColumnIndex === this.inUse.types.length - 1) {\n        if (this.debugMode) {\n          this.debugLog('You\\'re in the rightmost list already');\n        }\n\n        return;\n      }\n\n      return this.inUse.types[toLeft ? currentColumnIndex - 1 : currentColumnIndex + 1];\n    },\n    getFirstItemInSideColumn: function getFirstItemInSideColumn(currentColumn) {\n      var toLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var targetColumn = this.getSideColumnName(currentColumn, toLeft);\n\n      if (!targetColumn) {\n        return;\n      }\n\n      var listItems = this.validItemsInCol(targetColumn);\n\n      if (listItems && listItems[0]) {\n        return listItems[0];\n      }\n    },\n    getActiveItemInSideColumn: function getActiveItemInSideColumn(currentColumn) {\n      var toLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var targetColumn = this.getSideColumnName(currentColumn, toLeft);\n\n      if (!targetColumn) {\n        return;\n      }\n\n      var activeItems = this.activeItemInCol(targetColumn);\n\n      if (activeItems && activeItems[0]) {\n        return activeItems[0];\n      }\n    },\n    toLeftColumn: function toLeftColumn(currentColumn) {\n      var targetItem = this.getActiveItemInSideColumn(currentColumn, true) || this.getFirstItemInSideColumn(currentColumn, true);\n\n      if (targetItem) {\n        targetItem.focus();\n      }\n    },\n    toRightColumn: function toRightColumn(currentColumn) {\n      var targetItem = this.getActiveItemInSideColumn(currentColumn, false) || this.getFirstItemInSideColumn(currentColumn, false);\n\n      if (targetItem) {\n        targetItem.focus();\n      }\n    },\n    //\n    // Manual Input\n    //\n    onMouseDown: function onMouseDown() {\n      var _this15 = this;\n\n      if (!this.manualInput) {\n        return;\n      }\n\n      window.clearTimeout(this.selectionTimer);\n      this.selectionTimer = window.setTimeout(function () {\n        window.clearTimeout(_this15.selectionTimer);\n\n        if (_this15.$refs && _this15.$refs.input) {\n          var nearestSlot = _this15.getNearestChunkByPos(_this15.$refs.input.selectionStart || 0);\n\n          _this15.debounceSetInputSelection(nearestSlot);\n        }\n      }, 50);\n    },\n    keyDownHandler: function keyDownHandler(evt) {\n      if (evt.isComposing || evt.keyCode === 229) {\n        // Skip IME inputs\n        evt.preventDefault();\n        evt.stopPropagation();\n        return false;\n      } // Numbers\n\n\n      if (evt.keyCode >= 48 && evt.keyCode <= 57 || evt.keyCode >= 96 && evt.keyCode <= 105) {\n        evt.preventDefault();\n        this.keyboardInput(evt.key); // A|P|M\n      } else if ([65, 80, 77].includes(evt.keyCode)) {\n        evt.preventDefault();\n        this.keyboardInput(evt.key, true); // Arrow keys\n      } else if (evt.keyCode >= 37 && evt.keyCode <= 40) {\n        evt.preventDefault();\n        this.clearKbInputLog();\n        this.arrowHandler(evt); // Delete|Backspace\n      } else if (evt.keyCode === 8 || evt.keyCode === 46) {\n        evt.preventDefault();\n        this.clearKbInputLog();\n        this.clearTime(); // Tab\n      } else if (evt.keyCode === 9) {\n        this.clearKbInputLog();\n        this.tabHandler(evt); // Colon|Space\n      } else if (evt.keyCode === 186 || evt.keyCode === 32) {\n        evt.preventDefault();\n        this.clearKbInputLog();\n        this.toNextSlot(); // Prevent any Non-ESC and non-pasting inputs\n      } else if (evt.keyCode !== 27 && !(evt.metaKey || evt.ctrlKey)) {\n        evt.preventDefault();\n      }\n    },\n    onCompostionStart: function onCompostionStart(evt) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.bakCurrentPos = this.getCurrentTokenChunk();\n      return false;\n    },\n    onCompostionEnd: function onCompostionEnd(evt) {\n      var _this16 = this;\n\n      evt.preventDefault();\n      evt.stopPropagation();\n      var cpsData = evt.data;\n      var inputIsCustomApmText = false;\n\n      if (this.has.customApmText) {\n        inputIsCustomApmText = this.isCustomApmText(cpsData);\n      }\n\n      if (inputIsCustomApmText) {\n        this.setSanitizedValueToSection('apm', inputIsCustomApmText);\n      }\n\n      this.$refs.input.value = this.has.customApmText ? this.customDisplayTime : this.displayTime;\n      this.$nextTick(function () {\n        if (_this16.bakCurrentPos) {\n          var bakPos = JSON.parse(JSON.stringify(_this16.bakCurrentPos));\n\n          if (inputIsCustomApmText) {\n            bakPos.end = bakPos.start + cpsData.length;\n          }\n\n          _this16.debounceSetInputSelection(bakPos);\n\n          _this16.bakCurrentPos = null;\n        }\n      });\n      return false;\n    },\n    pasteHandler: function pasteHandler(evt) {\n      evt.preventDefault();\n      var pastingText = (evt.clipboardData || window.clipboardData).getData('text');\n\n      if (this.debugMode) {\n        this.debugLog(\"Pasting value \\\"\".concat(pastingText, \"\\\" from clipboard\"));\n      }\n\n      if (!pastingText || !pastingText.length) {\n        return;\n      } // Replace custom AM/PM text (if any)\n\n\n      if (this.has.customApmText) {\n        pastingText = this.replaceCustomApmText(pastingText);\n      }\n\n      if (this.inputIsEmpty) {\n        this.readStringValues(pastingText);\n      } else {\n        this.kbInputLog = pastingText.substr(-2, 2);\n        this.setKbInput();\n        this.debounceClearKbLog();\n      }\n    },\n    arrowHandler: function arrowHandler(evt) {\n      var direction = {\n        37: 'L',\n        38: 'U',\n        39: 'R',\n        40: 'D'\n      }[evt.keyCode];\n\n      if (direction === 'U' || direction === 'D') {\n        if (this.inputIsEmpty) {\n          this.selectFirstValidValue();\n        } else {\n          var currentChunk = this.getCurrentTokenChunk();\n\n          if (!currentChunk) {\n            this.selectFirstValidValue();\n            return;\n          }\n\n          var tokenType = currentChunk.type;\n          this.getClosestValidItemInCol(tokenType, this[tokenType], direction);\n          var newChunkPos = this.getCurrentTokenChunk();\n          this.debounceSetInputSelection(newChunkPos);\n        }\n      } else if (direction === 'R') {\n        this.toLateralToken(false);\n      } else if (direction === 'L') {\n        this.toLateralToken(true);\n      }\n    },\n    tabHandler: function tabHandler(evt) {\n      if (!this.inputIsEmpty && this.tokenChunksPos && this.tokenChunksPos.length) {\n        var currentChunk = this.getCurrentTokenChunk();\n\n        if (!currentChunk) {\n          return;\n        }\n\n        var firstChunk = this.tokenChunksPos[0];\n        var lastChunk = this.tokenChunksPos[this.tokenChunksPos.length - 1];\n\n        if (evt.shiftKey && currentChunk.token !== firstChunk.token || !evt.shiftKey && currentChunk.token !== lastChunk.token) {\n          evt.preventDefault();\n          this.toLateralToken(evt.shiftKey);\n        }\n      } else if (this.appendToBody && this.advancedKeyboard) {\n        if (evt.shiftKey) {\n          return;\n        }\n\n        evt.preventDefault();\n\n        if (this.inputIsEmpty) {\n          var firstColumn = this.inUse.types[0];\n          var targetValue = this.validItemsInCol(firstColumn)[0];\n\n          if (targetValue) {\n            targetValue.focus();\n          }\n        }\n      }\n    },\n    keyboardInput: function keyboardInput(newChar) {\n      var isApm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var currentChunk = this.getCurrentTokenChunk();\n\n      if (!currentChunk || currentChunk.type !== 'apm' && isApm || currentChunk.type === 'apm' && !isApm) {\n        return;\n      }\n\n      this.kbInputLog = \"\".concat(this.kbInputLog.substr(-1)).concat(newChar);\n      this.setKbInput();\n      this.debounceClearKbLog();\n    },\n    clearKbInputLog: function clearKbInputLog() {\n      window.clearTimeout(this.kbInputTimer);\n      this.kbInputLog = '';\n    },\n    debounceClearKbLog: function debounceClearKbLog() {\n      var _this17 = this;\n\n      window.clearTimeout(this.kbInputTimer);\n      this.kbInputTimer = window.setTimeout(function () {\n        _this17.clearKbInputLog();\n      }, this.opts.manualInputTimeout);\n    },\n    setKbInput: function setKbInput(value) {\n      value = value || this.kbInputLog;\n      var currentChunk = this.getCurrentTokenChunk();\n\n      if (!currentChunk || !value || !value.length) {\n        return;\n      }\n\n      var chunkType = currentChunk.type;\n      var chunkToken = currentChunk.token;\n      var validValue;\n\n      if (chunkType === 'apm') {\n        if (this.lowerCasedApm(value).includes('a')) {\n          validValue = 'am';\n        } else if (this.lowerCasedApm(value).includes('p')) {\n          validValue = 'pm';\n        }\n\n        if (validValue) {\n          validValue = chunkToken === 'A' ? validValue.toUpperCase() : validValue;\n        }\n      } else {\n        if (this.isValidValue(chunkToken, value)) {\n          validValue = value;\n        } else {\n          var lastInputValue = this.formatValue(chunkToken, value.substr(-1));\n\n          if (this.isValidValue(chunkToken, lastInputValue)) {\n            validValue = lastInputValue;\n          }\n        }\n      }\n\n      if (validValue) {\n        this.setSanitizedValueToSection(chunkType, validValue);\n        var newChunkPos = this.getCurrentTokenChunk();\n        this.debounceSetInputSelection(newChunkPos);\n      }\n\n      if (this.debugMode) {\n        if (validValue) {\n          this.debugLog(\"Successfully set value \\\"\".concat(validValue, \"\\\" from latest input \\\"\").concat(value, \"\\\" for the \\\"\").concat(chunkType, \"\\\" slot\"));\n        } else {\n          this.debugLog(\"Value \\\"\".concat(value, \"\\\" is invalid in the \\\"\").concat(chunkType, \"\\\" slot\"));\n        }\n      }\n    },\n    // Form Autofill\n    onChange: function onChange() {\n      if (!this.manualInput || !this.$refs || !this.$refs.input) {\n        return;\n      }\n\n      var autoFillValue = this.$refs.input.value || '';\n\n      if (autoFillValue && autoFillValue.length) {\n        this.readStringValues(autoFillValue);\n      }\n    },\n    getNearestChunkByPos: function getNearestChunkByPos(startPos) {\n      if (!this.tokenChunksPos || !this.tokenChunksPos.length) {\n        return;\n      }\n\n      var nearest;\n      var nearestDelta = -1;\n\n      for (var i = 0; i < this.tokenChunksPos.length; i++) {\n        var chunk = JSON.parse(JSON.stringify(this.tokenChunksPos[i]));\n\n        if (chunk.start === startPos) {\n          return chunk;\n        }\n\n        var delta = Math.abs(chunk.start - startPos);\n\n        if (nearestDelta < 0) {\n          nearest = chunk;\n          nearestDelta = delta;\n        } else {\n          if (nearestDelta <= delta) {\n            return nearest;\n          }\n\n          nearestDelta = delta;\n          nearest = chunk;\n        }\n      }\n\n      return nearest;\n    },\n    selectFirstValidValue: function selectFirstValidValue() {\n      if (!this.tokenChunksPos || !this.tokenChunksPos.length) {\n        return;\n      }\n\n      var firstSlotType = this.tokenChunksPos[0].type;\n\n      if (firstSlotType === 'hour') {\n        this.getClosestHourItem();\n      } else {\n        this.getClosestValidItemInCol(firstSlotType, this[firstSlotType]);\n      }\n\n      this.selectFirstSlot();\n    },\n    getClosestHourItem: function getClosestHourItem(currentValue) {\n      var _this18 = this;\n\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'U';\n\n      if (!this.validHoursList || !this.validHoursList.length) {\n        if (this.debugMode) {\n          this.debugLog(\"No valid hour values found, please check your \\\"hour-range\\\" config\\nhour-range: \".concat(JSON.stringify(this.hourRange)));\n        }\n\n        return;\n      }\n\n      if (!currentValue) {\n        this.setManualHour(this.validHoursList[0]);\n        return;\n      }\n\n      var currentIndex = this.validHoursList.findIndex(function (item) {\n        if (!_this18.baseOn12Hours) {\n          return item === currentValue;\n        } else {\n          var valueKey = \"\".concat(currentValue).concat(_this18.lowerCasedApm(_this18.apm) === 'pm' ? 'p' : 'a');\n          return item === valueKey;\n        }\n      });\n      var nextIndex;\n\n      if (currentIndex === -1) {\n        nextIndex = 0;\n      } else if (direction === 'D') {\n        nextIndex = currentIndex === 0 ? this.validHoursList.length - 1 : currentIndex - 1;\n      } else {\n        nextIndex = (currentIndex + 1) % this.validHoursList.length;\n      }\n\n      var nextItem = this.validHoursList[nextIndex];\n      this.setManualHour(nextItem);\n    },\n    getClosestValidItemInCol: function getClosestValidItemInCol(column, currentValue) {\n      var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'U';\n\n      if (column === 'hour') {\n        this.getClosestHourItem(currentValue, direction);\n      } else {\n        var nextItem = direction === 'D' ? this.prevItem(column, this[column], true) : this.nextItem(column, this[column], true);\n\n        if (nextItem) {\n          this.select(column, nextItem.getAttribute('data-key'));\n        }\n      }\n    },\n    setSanitizedValueToSection: function setSanitizedValueToSection(section, inputValue) {\n      if (!section || !this.getTokenByType(section)) {\n        return;\n      } // NOTE: Disabled values are allowed here, followed by an 'error' event, though\n\n\n      var sanitizedValue = this.sanitizedValue(this.getTokenByType(section), inputValue);\n      this[section] = sanitizedValue;\n    },\n    setManualHour: function setManualHour(nextItem) {\n      if (this.is12hRange(nextItem)) {\n        var hourT = this.match12hRange(nextItem);\n        var apmValue = hourT[2] === 'a' ? 'AM' : 'PM';\n        this.setSanitizedValueToSection('apm', this.apmType === 'a' ? apmValue.toLowerCase() : apmValue);\n        this.setSanitizedValueToSection('hour', hourT[1]);\n      } else {\n        this.setSanitizedValueToSection('hour', nextItem);\n      }\n    },\n    debounceSetInputSelection: function debounceSetInputSelection(_ref) {\n      var _this19 = this;\n\n      var _ref$start = _ref.start,\n          start = _ref$start === void 0 ? 0 : _ref$start,\n          _ref$end = _ref.end,\n          end = _ref$end === void 0 ? 0 : _ref$end;\n      this.$nextTick(function () {\n        _this19.setInputSelectionRange(start, end);\n      });\n      window.clearTimeout(this.selectionTimer);\n      this.selectionTimer = window.setTimeout(function () {\n        window.clearTimeout(_this19.selectionTimer); // Double-check selection for 12hr format\n\n        if (_this19.$refs.input && (_this19.$refs.input.selectionStart !== start || _this19.$refs.input.selectionEnd !== end)) {\n          _this19.setInputSelectionRange(start, end);\n        }\n      }, 30);\n    },\n    setInputSelectionRange: function setInputSelectionRange(start, end) {\n      if (this.$refs && this.$refs.input) {\n        this.$refs.input.setSelectionRange(start, end);\n      }\n    },\n    getCurrentTokenChunk: function getCurrentTokenChunk() {\n      return this.getNearestChunkByPos(this.$refs.input && this.$refs.input.selectionStart || 0);\n    },\n    selectFirstSlot: function selectFirstSlot() {\n      var firstChunkPos = this.getNearestChunkByPos(0);\n      this.debounceSetInputSelection(firstChunkPos);\n    },\n    toNextSlot: function toNextSlot() {\n      if (!this.inputIsEmpty && this.tokenChunksPos && this.tokenChunksPos.length) {\n        var currentChunk = this.getCurrentTokenChunk();\n\n        if (!currentChunk) {\n          return;\n        }\n\n        var lastChunk = this.tokenChunksPos[this.tokenChunksPos.length - 1];\n\n        if (currentChunk.token !== lastChunk.token) {\n          this.toLateralToken(false);\n        }\n      }\n    },\n    toLateralToken: function toLateralToken(toLeft) {\n      var currentChunk = this.getCurrentTokenChunk();\n\n      if (!currentChunk) {\n        this.selectFirstValidValue();\n        return;\n      }\n\n      var currentChunkIndex = this.tokenChunksPos.findIndex(function (chk) {\n        return chk.token === currentChunk.token;\n      });\n\n      if (!toLeft && currentChunkIndex >= this.tokenChunksPos.length - 1 || toLeft && currentChunkIndex === 0) {\n        if (this.debugMode) {\n          if (toLeft) {\n            this.debugLog('You\\'re in the leftmost slot already');\n          } else {\n            this.debugLog('You\\'re in the rightmost slot already');\n          }\n        }\n\n        return;\n      }\n\n      var targetSlotPos = toLeft ? this.tokenChunksPos[currentChunkIndex - 1] : this.tokenChunksPos[currentChunkIndex + 1];\n      this.debounceSetInputSelection(targetSlotPos);\n    },\n    isCustomApmText: function isCustomApmText(inputData) {\n      if (!inputData || !inputData.length) {\n        return false;\n      }\n\n      if (this.amText && this.amText === inputData) {\n        return this.apmType === 'A' ? 'AM' : 'am';\n      }\n\n      if (this.pmText && this.pmText === inputData) {\n        return this.apmType === 'A' ? 'PM' : 'pm';\n      }\n\n      return false;\n    },\n    replaceCustomApmText: function replaceCustomApmText(inputString) {\n      if (this.amText && this.amText.length && inputString.includes(this.amText)) {\n        return inputString.replace(new RegExp(this.amText, 'g'), this.apmType === 'A' ? 'AM' : 'am');\n      } else if (this.pmText && this.pmText.length && inputString.includes(this.pmText)) {\n        return inputString.replace(new RegExp(this.pmText, 'g'), this.apmType === 'A' ? 'PM' : 'pm');\n      }\n\n      return inputString;\n    },\n    checkDropDirection: function checkDropDirection() {\n      if (!this.$el) {\n        return;\n      }\n\n      var container;\n\n      if (this.containerId && this.containerId.length) {\n        container = document.getElementById(this.containerId);\n\n        if (!container && this.debugMode) {\n          this.debugLog(\"Container with id \\\"\".concat(this.containerId, \"\\\" not found. Fallback to document body.\"));\n        }\n      }\n\n      var el = this.$el;\n      var spaceDown;\n\n      if (container && container.offsetHeight) {\n        // Valid container found\n        spaceDown = container.offsetTop + container.offsetHeight - (el.offsetTop + el.offsetHeight);\n      } else {\n        // Fallback to document body\n        var docHeight = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight);\n        spaceDown = docHeight - (el.offsetTop + el.offsetHeight);\n      }\n\n      this.forceDropOnTop = this.opts.dropOffsetHeight > spaceDown;\n    },\n    //\n    // Helpers\n    //\n    is12hRange: function is12hRange(value) {\n      return /^\\d{1,2}(a|p|A|P)$/.test(value);\n    },\n    match12hRange: function match12hRange(value) {\n      return value.match(/^(\\d{1,2})(a|p|A|P)$/);\n    },\n    isNumber: function isNumber(value) {\n      return !isNaN(parseFloat(value)) && isFinite(value);\n    },\n    isBasicType: function isBasicType(type) {\n      return CONFIG.BASIC_TYPES.includes(type);\n    },\n    lowerCasedApm: function lowerCasedApm(apmValue) {\n      return (apmValue || '').toLowerCase();\n    },\n    getTokenRegex: function getTokenRegex(token) {\n      switch (token) {\n        case 'HH':\n          return '([01][0-9]|2[0-3]|H{2})';\n\n        case 'H':\n          return '([0-9]{1}|1[0-9]|2[0-3]|H{1})';\n\n        case 'hh':\n          return '(0[1-9]|1[0-2]|h{2})';\n\n        case 'h':\n          return '([1-9]{1}|1[0-2]|h{1})';\n\n        case 'kk':\n          return '(0[1-9]|1[0-9]|2[0-4]|k{2})';\n\n        case 'k':\n          return '([1-9]{1}|1[0-9]|2[0-4]|k{1})';\n\n        case 'mm':\n          return '([0-5][0-9]|m{2})';\n\n        case 'ss':\n          return '([0-5][0-9]|s{2})';\n\n        case 'm':\n          return '([0-9]{1}|[1-5][0-9]|m{1})';\n\n        case 's':\n          return '([0-9]{1}|[1-5][0-9]|s{1})';\n\n        case 'A':\n          return '(AM|PM|A{1})';\n\n        case 'a':\n          return '(am|pm|a{1})';\n\n        default:\n          return '';\n      }\n    },\n    isEmptyValue: function isEmptyValue(targetToken, testValue) {\n      return !testValue || !testValue.length || testValue && testValue === targetToken;\n    },\n    isValidValue: function isValidValue(targetToken, testValue) {\n      if (!targetToken || this.isEmptyValue(targetToken, testValue)) {\n        return false;\n      }\n\n      var tokenRegexStr = this.getTokenRegex(targetToken);\n\n      if (!tokenRegexStr || !tokenRegexStr.length) {\n        return false;\n      }\n\n      return new RegExp(\"^\".concat(tokenRegexStr, \"$\")).test(testValue);\n    },\n    sanitizedValue: function sanitizedValue(targetToken, inputValue) {\n      if (this.isValidValue(targetToken, inputValue)) {\n        return inputValue;\n      }\n\n      return '';\n    },\n    getTokenType: function getTokenType(token) {\n      return this.inUse.types[this.inUse.tokens.indexOf(token)] || '';\n    },\n    getTokenByType: function getTokenByType(type) {\n      return this[\"\".concat(type, \"Type\")] || '';\n    },\n    isMinuteOrSecond: function isMinuteOrSecond(type) {\n      return ['minute', 'second'].includes(type);\n    },\n    debugLog: function debugLog(logText) {\n      var _this20 = this;\n\n      if (!logText || !logText.length) {\n        return;\n      }\n\n      var identifier = '';\n\n      if (this.id) {\n        identifier += \"#\".concat(this.id);\n      }\n\n      if (this.name) {\n        identifier += \"[name=\".concat(this.name, \"]\");\n      }\n\n      if (this.inputClass) {\n        var inputClasses = [];\n\n        if (typeof this.inputClass === 'string') {\n          inputClasses = this.inputClass.split(/\\s/g);\n        } else if (Array.isArray(this.inputClass)) {\n          inputClasses = [].concat([], this.inputClass);\n        } else if (_typeof(this.inputClass) === 'object') {\n          Object.keys(this.inputClass).forEach(function (clsName) {\n            if (_this20.inputClass[clsName]) {\n              inputClasses.push(clsName);\n            }\n          });\n        }\n\n        var _iterator4 = _createForOfIteratorHelper(inputClasses),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var inputClass = _step4.value;\n\n            if (inputClass && inputClass.trim().length) {\n              identifier += \".\".concat(inputClass.trim());\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n\n      var finalLogText = \"DEBUG: \".concat(logText).concat(identifier ? \"\\n\\t(\".concat(identifier, \")\") : '');\n\n      if (window.console.debug && typeof window.console.debug === 'function') {\n        window.console.debug(finalLogText);\n      } else {\n        window.console.log(finalLogText);\n      }\n    }\n  },\n  mounted: function mounted() {\n    window.clearTimeout(this.debounceTimer);\n    window.clearTimeout(this.selectionTimer);\n    window.clearTimeout(this.kbInputTimer);\n    this.renderFormat();\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.clearTimeout(this.debounceTimer);\n    window.clearTimeout(this.selectionTimer);\n    window.clearTimeout(this.kbInputTimer);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}