{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport function genPoints(values, boundary) {\n  var minX = boundary.minX,\n      maxX = boundary.maxX,\n      minY = boundary.minY,\n      maxY = boundary.maxY;\n  var totalValues = values.length;\n  var maxValue = Math.max.apply(Math, _toConsumableArray(values));\n  var minValue = Math.min.apply(Math, _toConsumableArray(values));\n  var gridX = (maxX - minX) / (totalValues - 1);\n  var gridY = (maxY - minY) / (maxValue - minValue || 1);\n  return values.map(function (value, index) {\n    return {\n      x: minX + index * gridX,\n      y: maxY - (value - minValue) * gridY,\n      value: value\n    };\n  });\n}\nexport function genBars(values, boundary) {\n  var minX = boundary.minX,\n      maxX = boundary.maxX,\n      minY = boundary.minY,\n      maxY = boundary.maxY;\n  var totalValues = values.length;\n  var maxValue = Math.max.apply(Math, _toConsumableArray(values));\n  var minValue = Math.min.apply(Math, _toConsumableArray(values));\n  if (minValue > 0) minValue = 0;\n  if (maxValue < 0) maxValue = 0;\n  var gridX = maxX / totalValues;\n  var gridY = (maxY - minY) / (maxValue - minValue || 1);\n  var horizonY = maxY - Math.abs(minValue * gridY);\n  return values.map(function (value, index) {\n    var height = Math.abs(gridY * value);\n    return {\n      x: minX + index * gridX,\n      y: horizonY - height + +(value < 0) * height,\n      height: height,\n      value: value\n    };\n  });\n}","map":null,"metadata":{},"sourceType":"module"}