{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport { getTimestampIdentifier } from '../util/timestamp';\nvar MILLIS_IN_DAY = 86400000;\n\nfunction _getVisuals(events) {\n  var minStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var visuals = events.map(function (event) {\n    return {\n      event: event,\n      columnCount: 0,\n      column: 0,\n      left: 0,\n      width: 100\n    };\n  });\n  visuals.sort(function (a, b) {\n    return Math.max(minStart, a.event.startTimestampIdentifier) - Math.max(minStart, b.event.startTimestampIdentifier) || b.event.endTimestampIdentifier - a.event.endTimestampIdentifier;\n  });\n  return visuals;\n}\n\nexport { _getVisuals as getVisuals };\nexport function hasOverlap(s0, e0, s1, e1) {\n  var exclude = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  return exclude ? !(s0 >= e1 || e0 <= s1) : !(s0 > e1 || e0 < s1);\n}\nexport function setColumnCount(groups) {\n  groups.forEach(function (group) {\n    group.visuals.forEach(function (groupVisual) {\n      groupVisual.columnCount = groups.length;\n    });\n  });\n}\nexport function getRange(event) {\n  return [event.startTimestampIdentifier, event.endTimestampIdentifier];\n}\nexport function getDayRange(event) {\n  return [event.startIdentifier, event.endIdentifier];\n}\nexport function getNormalizedRange(event, dayStart) {\n  return [Math.max(dayStart, event.startTimestampIdentifier), Math.min(dayStart + MILLIS_IN_DAY, event.endTimestampIdentifier)];\n}\nexport function getOpenGroup(groups, start, end, timed) {\n  for (var i = 0; i < groups.length; i++) {\n    var group = groups[i];\n    var intersected = false;\n\n    if (hasOverlap(start, end, group.start, group.end, timed)) {\n      for (var k = 0; k < group.visuals.length; k++) {\n        var groupVisual = group.visuals[k];\n\n        var _ref = timed ? getRange(groupVisual.event) : getDayRange(groupVisual.event),\n            _ref2 = _slicedToArray(_ref, 2),\n            groupStart = _ref2[0],\n            groupEnd = _ref2[1];\n\n        if (hasOverlap(start, end, groupStart, groupEnd, timed)) {\n          intersected = true;\n          break;\n        }\n      }\n    }\n\n    if (!intersected) {\n      return i;\n    }\n  }\n\n  return -1;\n}\nexport function getOverlapGroupHandler(firstWeekday) {\n  var handler = {\n    groups: [],\n    min: -1,\n    max: -1,\n    reset: function reset() {\n      handler.groups = [];\n      handler.min = handler.max = -1;\n    },\n    getVisuals: function getVisuals(day, dayEvents, timed) {\n      var reset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (day.weekday === firstWeekday || reset) {\n        handler.reset();\n      }\n\n      var dayStart = getTimestampIdentifier(day);\n\n      var visuals = _getVisuals(dayEvents, dayStart);\n\n      visuals.forEach(function (visual) {\n        var _ref3 = timed ? getRange(visual.event) : getDayRange(visual.event),\n            _ref4 = _slicedToArray(_ref3, 2),\n            start = _ref4[0],\n            end = _ref4[1];\n\n        if (handler.groups.length > 0 && !hasOverlap(start, end, handler.min, handler.max, timed)) {\n          setColumnCount(handler.groups);\n          handler.reset();\n        }\n\n        var targetGroup = getOpenGroup(handler.groups, start, end, timed);\n\n        if (targetGroup === -1) {\n          targetGroup = handler.groups.length;\n          handler.groups.push({\n            start: start,\n            end: end,\n            visuals: []\n          });\n        }\n\n        var target = handler.groups[targetGroup];\n        target.visuals.push(visual);\n        target.start = Math.min(target.start, start);\n        target.end = Math.max(target.end, end);\n        visual.column = targetGroup;\n\n        if (handler.min === -1) {\n          handler.min = start;\n          handler.max = end;\n        } else {\n          handler.min = Math.min(handler.min, start);\n          handler.max = Math.max(handler.max, end);\n        }\n      });\n      setColumnCount(handler.groups);\n\n      if (timed) {\n        handler.reset();\n      }\n\n      return visuals;\n    }\n  };\n  return handler;\n}","map":null,"metadata":{},"sourceType":"module"}