{"ast":null,"code":"import mergeData from '../../util/mergeData';\n\nfunction mergeTransitions() {\n  var _Array;\n\n  var dest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  for (var _len = arguments.length, transitions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    transitions[_key - 1] = arguments[_key];\n  }\n\n  /* eslint-disable-next-line no-array-constructor */\n  return (_Array = Array()).concat.apply(_Array, [dest].concat(transitions));\n}\n\nexport function createSimpleTransition(name) {\n  var origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top center 0';\n  var mode = arguments.length > 2 ? arguments[2] : undefined;\n  return {\n    name: name,\n    functional: true,\n    props: {\n      group: {\n        type: Boolean,\n        default: false\n      },\n      hideOnLeave: {\n        type: Boolean,\n        default: false\n      },\n      leaveAbsolute: {\n        type: Boolean,\n        default: false\n      },\n      mode: {\n        type: String,\n        default: mode\n      },\n      origin: {\n        type: String,\n        default: origin\n      }\n    },\n    render: function render(h, context) {\n      var tag = \"transition\".concat(context.props.group ? '-group' : '');\n      var data = {\n        props: {\n          name: name,\n          mode: context.props.mode\n        },\n        on: {\n          beforeEnter: function beforeEnter(el) {\n            el.style.transformOrigin = context.props.origin;\n            el.style.webkitTransformOrigin = context.props.origin;\n          }\n        }\n      };\n\n      if (context.props.leaveAbsolute) {\n        data.on.leave = mergeTransitions(data.on.leave, function (el) {\n          return el.style.position = 'absolute';\n        });\n      }\n\n      if (context.props.hideOnLeave) {\n        data.on.leave = mergeTransitions(data.on.leave, function (el) {\n          return el.style.display = 'none';\n        });\n      }\n\n      return h(tag, mergeData(context.data, data), context.children);\n    }\n  };\n}\nexport function createJavascriptTransition(name, functions) {\n  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'in-out';\n  return {\n    name: name,\n    functional: true,\n    props: {\n      mode: {\n        type: String,\n        default: mode\n      }\n    },\n    render: function render(h, context) {\n      return h('transition', mergeData(context.data, {\n        props: {\n          name: name\n        },\n        on: functions\n      }), context.children);\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}