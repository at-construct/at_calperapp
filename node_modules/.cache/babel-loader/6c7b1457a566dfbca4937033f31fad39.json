{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions, mapGetters } from 'vuex';\nexport default {\n  name: 'GuestSelectForm',\n  props: ['value'],\n  computed: _objectSpread({}, mapGetters('participants', ['participantUsers'])),\n  methods: {\n    remove: function remove(item) {\n      var index = this.value.findIndex(function (x) {\n        return x.id === item.id;\n      });\n\n      if (index >= 0) {\n        this.value.splice(index, 1);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["GuestSelectForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;AAEA,EAAA,KAAA,EAAA,CAAA,OAAA,CAFA;AAGA,EAAA,QAAA,oBACA,UAAA,CAAA,cAAA,EAAA,CAAA,kBAAA,CAAA,CADA,CAHA;AAMA,EAAA,OAAA,EAAA;AACA,IAAA,MADA,kBACA,IADA,EACA;AACA,UAAA,KAAA,GAAA,KAAA,KAAA,CAAA,SAAA,CAAA,UAAA,CAAA;AAAA,eAAA,CAAA,CAAA,EAAA,KAAA,IAAA,CAAA,EAAA;AAAA,OAAA,CAAA;;AACA,UAAA,KAAA,IAAA,CAAA,EAAA;AACA,aAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA;AACA;AACA;AANA;AANA,CAAA","sourcesContent":["<template>\n  <v-container fluid>\n    <v-row align=\"center\">\n      <v-col cols=\"12\" md=\"6\">\n        <v-autocomplete\n          small-chips\n          clearable\n          color=\"grey\"\n          label=\"参加者を追加\"\n          item-text=\"name\"\n          item-value=\"id\"\n          multiple\n          :value=\"value\"\n          :items=\"participantUsers\"\n          @input=\"$emit('input', $event)\"\n        >\n          <template v-slot:selection=\"{ item }\">\n            <v-chip\n              close\n              @click:close=\"remove(item)\"\n            >\n              {{ item.name }}\n            </v-chip>\n          </template>\n        </v-autocomplete>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\n\nexport default {\n  name: 'GuestSelectForm',\n  props: ['value'],\n  computed: {\n    ...mapGetters('participants', ['participantUsers']),\n  },\n  methods: {\n    remove(item) {\n      const index = this.value.findIndex(x => x.id === item.id);\n      if (index >= 0) {\n        this.value.splice(index, 1);\n      }\n    }\n  },\n};\n</script>\n"],"sourceRoot":"app/javascript/components/forms"},"metadata":{},"sourceType":"module"}