{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * vue-datetime v1.0.0-beta.14\n * (c) 2020 Mario JuÃ¡rez\n * Released under the MIT License.\n */\n(function (global, factory) {\n  (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('luxon')) : typeof define === 'function' && define.amd ? define(['exports', 'luxon'], factory) : factory(global.VueDatetime = global.VueDatetime || {}, global.luxon);\n})(this, function (exports, luxon) {\n  'use strict';\n\n  var FlowManager = function FlowManager(flow, endStatus) {\n    if (flow === void 0) flow = [];\n    if (endStatus === void 0) endStatus = null;\n    this.flow = flow;\n    this.endStatus = endStatus;\n    this.diversionNext = null;\n  };\n\n  FlowManager.prototype.step = function step(index) {\n    return this.flow.length > index ? this.flow[index] : this.endStatus;\n  };\n\n  FlowManager.prototype.first = function first() {\n    return this.step(0);\n  };\n\n  FlowManager.prototype.next = function next(current) {\n    if (this.diversionNext) {\n      var next = this.diversionNext;\n      this.diversionNext = null;\n      return next;\n    }\n\n    return this.step(this.flow.indexOf(current) + 1);\n  };\n\n  FlowManager.prototype.diversion = function diversion(next) {\n    this.diversionNext = next;\n  };\n\n  function capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  function datetimeFromISO(string) {\n    var datetime = luxon.DateTime.fromISO(string).toUTC();\n    return datetime.isValid ? datetime : null;\n  }\n\n  function monthDays(year, month, weekStart) {\n    var monthDate = luxon.DateTime.local(year, month, 1);\n    var firstDay = monthDate.weekday - weekStart;\n\n    if (firstDay < 0) {\n      firstDay += 7;\n    }\n\n    var lastDay = (weekStart - monthDate.weekday - monthDate.daysInMonth) % 7;\n\n    if (lastDay < 0) {\n      lastDay += 7;\n    }\n\n    return Array.apply(null, Array(monthDate.daysInMonth + firstDay + lastDay)).map(function (value, index) {\n      return index + 1 <= firstDay || index >= firstDay + monthDate.daysInMonth ? null : index + 1 - firstDay;\n    });\n  }\n\n  function monthDayIsDisabled(minDate, maxDate, year, month, day) {\n    var date = luxon.DateTime.fromObject({\n      year: year,\n      month: month,\n      day: day,\n      zone: 'UTC'\n    });\n    minDate = minDate ? startOfDay(minDate.setZone('UTC', {\n      keepLocalTime: true\n    })) : null;\n    maxDate = maxDate ? startOfDay(maxDate.setZone('UTC', {\n      keepLocalTime: true\n    })) : null;\n    return minDate && date < minDate || maxDate && date > maxDate;\n  }\n\n  function monthIsDisabled(minDate, maxDate, year, month) {\n    return minDate && minDate > luxon.DateTime.utc(year, month, luxon.DateTime.utc(year, month).daysInMonth) || maxDate && maxDate < luxon.DateTime.utc(year, month, 1);\n  }\n\n  function yearIsDisabled(minDate, maxDate, year) {\n    var minYear = minDate ? minDate.year : null;\n    var maxYear = maxDate ? maxDate.year : null;\n    return minYear && year < minYear || maxYear && year > maxYear;\n  }\n\n  function timeComponentIsDisabled(min, max, component) {\n    return min !== null && component < min || max !== null && component > max;\n  }\n\n  function weekdays(weekStart) {\n    if (--weekStart < 0) {\n      weekStart = 6;\n    }\n\n    var weekDays = luxon.Info.weekdays('short').map(function (weekday) {\n      return capitalize(weekday);\n    });\n    weekDays = weekDays.concat(weekDays.splice(0, weekStart));\n    return weekDays;\n  }\n\n  function months() {\n    return luxon.Info.months().map(function (month) {\n      return capitalize(month);\n    });\n  }\n\n  function hours(step) {\n    return Array.apply(null, Array(Math.ceil(24 / step))).map(function (item, index) {\n      return index * step;\n    });\n  }\n\n  function minutes(step) {\n    return Array.apply(null, Array(Math.ceil(60 / step))).map(function (item, index) {\n      return index * step;\n    });\n  }\n\n  function years(current) {\n    return Array.apply(null, Array(201)).map(function (item, index) {\n      return current - 100 + index;\n    });\n  }\n\n  function pad(number) {\n    return number < 10 ? '0' + number : number;\n  }\n\n  function startOfDay(datetime) {\n    return datetime.startOf('day');\n  }\n\n  function createFlowManager(flow) {\n    return new FlowManager(flow, 'end');\n  }\n\n  function createFlowManagerFromType(type) {\n    var flow = [];\n\n    switch (type) {\n      case 'datetime':\n        flow = ['date', 'time'];\n        break;\n\n      case 'time':\n        flow = ['time'];\n        break;\n\n      default:\n        flow = ['date'];\n    }\n\n    return new FlowManager(flow, 'end');\n  }\n\n  function weekStart() {\n    var weekstart;\n\n    try {\n      weekstart = require('weekstart/package.json').version ? require('weekstart') : null;\n    } catch (e) {\n      weekstart = window.weekstart;\n    }\n\n    var firstDay = weekstart ? weekstart.getWeekStartByLocale(luxon.Settings.defaultLocale) : 1;\n    return firstDay === 0 ? 7 : firstDay;\n  }\n\n  var DatetimeCalendar = {\n    render: function render() {\n      var _vm = this;\n\n      var _h = _vm.$createElement;\n\n      var _c = _vm._self._c || _h;\n\n      return _c('div', {\n        staticClass: \"vdatetime-calendar\"\n      }, [_c('div', {\n        staticClass: \"vdatetime-calendar__navigation\"\n      }, [_c('div', {\n        staticClass: \"vdatetime-calendar__navigation--previous\",\n        on: {\n          \"click\": _vm.previousMonth\n        }\n      }, [_c('svg', {\n        attrs: {\n          \"xmlns\": \"http://www.w3.org/2000/svg\",\n          \"viewBox\": \"0 0 61.3 102.8\"\n        }\n      }, [_c('path', {\n        attrs: {\n          \"fill\": \"none\",\n          \"stroke\": \"#444\",\n          \"stroke-width\": \"14\",\n          \"stroke-miterlimit\": \"10\",\n          \"d\": \"M56.3 97.8L9.9 51.4 56.3 5\"\n        }\n      })])]), _vm._v(\" \"), _c('div', {\n        staticClass: \"vdatetime-calendar__current--month\"\n      }, [_vm._v(_vm._s(_vm.monthName) + \" \" + _vm._s(_vm.newYear))]), _vm._v(\" \"), _c('div', {\n        staticClass: \"vdatetime-calendar__navigation--next\",\n        on: {\n          \"click\": _vm.nextMonth\n        }\n      }, [_c('svg', {\n        attrs: {\n          \"xmlns\": \"http://www.w3.org/2000/svg\",\n          \"viewBox\": \"0 0 61.3 102.8\"\n        }\n      }, [_c('path', {\n        attrs: {\n          \"fill\": \"none\",\n          \"stroke\": \"#444\",\n          \"stroke-width\": \"14\",\n          \"stroke-miterlimit\": \"10\",\n          \"d\": \"M56.3 97.8L9.9 51.4 56.3 5\"\n        }\n      })])])]), _vm._v(\" \"), _c('div', {\n        staticClass: \"vdatetime-calendar__month\"\n      }, [_vm._l(_vm.weekdays, function (weekday) {\n        return _c('div', {\n          staticClass: \"vdatetime-calendar__month__weekday\"\n        }, [_vm._v(_vm._s(weekday))]);\n      }), _vm._v(\" \"), _vm._l(_vm.days, function (day) {\n        return _c('div', {\n          staticClass: \"vdatetime-calendar__month__day\",\n          class: {\n            'vdatetime-calendar__month__day--selected': day.selected,\n            'vdatetime-calendar__month__day--disabled': day.disabled\n          },\n          on: {\n            \"click\": function click($event) {\n              _vm.selectDay(day);\n            }\n          }\n        }, [_c('span', [_c('span', [_vm._v(_vm._s(day.number))])])]);\n      })], 2)]);\n    },\n    staticRenderFns: [],\n    props: {\n      year: {\n        type: Number,\n        required: true\n      },\n      month: {\n        type: Number,\n        required: true\n      },\n      day: {\n        type: Number,\n        default: null\n      },\n      disabled: {\n        type: Array\n      },\n      minDate: {\n        type: luxon.DateTime,\n        default: null\n      },\n      maxDate: {\n        type: luxon.DateTime,\n        default: null\n      },\n      weekStart: {\n        type: Number,\n        default: 1\n      }\n    },\n    data: function data() {\n      return {\n        newDate: luxon.DateTime.fromObject({\n          year: this.year,\n          month: this.month,\n          zone: 'UTC'\n        }),\n        weekdays: weekdays(this.weekStart),\n        months: months()\n      };\n    },\n    computed: {\n      newYear: function newYear() {\n        return this.newDate.year;\n      },\n      newMonth: function newMonth() {\n        return this.newDate.month;\n      },\n      monthName: function monthName() {\n        return this.months[this.newMonth - 1];\n      },\n      days: function days() {\n        var this$1 = this;\n        return monthDays(this.newYear, this.newMonth, this.weekStart).map(function (day) {\n          return {\n            number: day,\n            selected: day && this$1.year === this$1.newYear && this$1.month === this$1.newMonth && this$1.day === day,\n            disabled: !day || monthDayIsDisabled(this$1.minDate, this$1.maxDate, this$1.newYear, this$1.newMonth, day)\n          };\n        });\n      }\n    },\n    methods: {\n      selectDay: function selectDay(day) {\n        if (day.disabled) {\n          return;\n        }\n\n        this.$emit('change', this.newYear, this.newMonth, day.number);\n      },\n      previousMonth: function previousMonth() {\n        this.newDate = this.newDate.minus({\n          months: 1\n        });\n      },\n      nextMonth: function nextMonth() {\n        this.newDate = this.newDate.plus({\n          months: 1\n        });\n      }\n    }\n  };\n  var DatetimeTimePicker = {\n    render: function render() {\n      var _vm = this;\n\n      var _h = _vm.$createElement;\n\n      var _c = _vm._self._c || _h;\n\n      return _c('div', {\n        class: {\n          'vdatetime-time-picker': true,\n          'vdatetime-time-picker__with-suffix': _vm.use12Hour\n        }\n      }, [_c('div', {\n        ref: \"hourList\",\n        staticClass: \"vdatetime-time-picker__list vdatetime-time-picker__list--hours\"\n      }, _vm._l(_vm.hours, function (hour) {\n        return _c('div', {\n          staticClass: \"vdatetime-time-picker__item\",\n          class: {\n            'vdatetime-time-picker__item--selected': hour.selected,\n            'vdatetime-time-picker__item--disabled': hour.disabled\n          },\n          on: {\n            \"click\": function click($event) {\n              _vm.selectHour(hour);\n            }\n          }\n        }, [_vm._v(_vm._s(_vm.formatHour(hour.number)))]);\n      })), _vm._v(\" \"), _c('div', {\n        ref: \"minuteList\",\n        staticClass: \"vdatetime-time-picker__list vdatetime-time-picker__list--minutes\"\n      }, _vm._l(_vm.minutes, function (minute) {\n        return _c('div', {\n          staticClass: \"vdatetime-time-picker__item\",\n          class: {\n            'vdatetime-time-picker__item--selected': minute.selected,\n            'vdatetime-time-picker__item--disabled': minute.disabled\n          },\n          on: {\n            \"click\": function click($event) {\n              _vm.selectMinute(minute);\n            }\n          }\n        }, [_vm._v(_vm._s(minute.number))]);\n      })), _vm._v(\" \"), _vm.use12Hour ? _c('div', {\n        ref: \"suffixList\",\n        staticClass: \"vdatetime-time-picker__list vdatetime-time-picker__list--suffix\"\n      }, [_c('div', {\n        staticClass: \"vdatetime-time-picker__item\",\n        class: {\n          'vdatetime-time-picker__item--selected': _vm.hour < 12\n        },\n        on: {\n          \"click\": function click($event) {\n            _vm.selectSuffix('am');\n          }\n        }\n      }, [_vm._v(\"am\")]), _vm._v(\" \"), _c('div', {\n        staticClass: \"vdatetime-time-picker__item\",\n        class: {\n          'vdatetime-time-picker__item--selected': _vm.hour >= 12\n        },\n        on: {\n          \"click\": function click($event) {\n            _vm.selectSuffix('pm');\n          }\n        }\n      }, [_vm._v(\"pm\")])]) : _vm._e()]);\n    },\n    staticRenderFns: [],\n    props: {\n      hour: {\n        type: Number,\n        required: true\n      },\n      minute: {\n        type: Number,\n        required: true\n      },\n      use12Hour: {\n        type: Boolean,\n        default: false\n      },\n      hourStep: {\n        type: Number,\n        default: 1\n      },\n      minuteStep: {\n        type: Number,\n        default: 1\n      },\n      minTime: {\n        type: String,\n        default: null\n      },\n      maxTime: {\n        type: String,\n        default: null\n      }\n    },\n    computed: {\n      hours: function hours$1() {\n        var this$1 = this;\n        return hours(this.hourStep).filter(function (hour) {\n          if (!this$1.use12Hour) {\n            return true;\n          } else {\n            if (this$1.hour < 12) {\n              return hour < 12;\n            } else {\n              return hour >= 12;\n            }\n          }\n        }).map(function (hour) {\n          return {\n            number: pad(hour),\n            selected: hour === this$1.hour,\n            disabled: timeComponentIsDisabled(this$1.minHour, this$1.maxHour, hour)\n          };\n        });\n      },\n      minutes: function minutes$1() {\n        var this$1 = this;\n        return minutes(this.minuteStep).map(function (minute) {\n          return {\n            number: pad(minute),\n            selected: minute === this$1.minute,\n            disabled: timeComponentIsDisabled(this$1.minMinute, this$1.maxMinute, minute)\n          };\n        });\n      },\n      minHour: function minHour() {\n        return this.minTime ? parseInt(this.minTime.split(':')[0]) : null;\n      },\n      minMinute: function minMinute() {\n        return this.minTime && this.minHour === this.hour ? parseInt(this.minTime.split(':')[1]) : null;\n      },\n      maxHour: function maxHour() {\n        return this.maxTime ? parseInt(this.maxTime.split(':')[0]) : null;\n      },\n      maxMinute: function maxMinute() {\n        return this.maxTime && this.maxHour === this.hour ? parseInt(this.maxTime.split(':')[1]) : null;\n      }\n    },\n    methods: {\n      selectHour: function selectHour(hour) {\n        if (hour.disabled) {\n          return;\n        }\n\n        this.$emit('change', {\n          hour: parseInt(hour.number)\n        });\n      },\n      selectMinute: function selectMinute(minute) {\n        if (minute.disabled) {\n          return;\n        }\n\n        this.$emit('change', {\n          minute: parseInt(minute.number)\n        });\n      },\n      selectSuffix: function selectSuffix(suffix) {\n        if (suffix === 'am') {\n          if (this.hour >= 12) {\n            this.$emit('change', {\n              hour: parseInt(this.hour - 12),\n              suffixTouched: true\n            });\n          }\n        }\n\n        if (suffix === 'pm') {\n          if (this.hour < 12) {\n            this.$emit('change', {\n              hour: parseInt(this.hour + 12),\n              suffixTouched: true\n            });\n          }\n        }\n      },\n      formatHour: function formatHour(hour) {\n        var numHour = Number(hour);\n\n        if (this.use12Hour) {\n          if (numHour === 0) {\n            return 12;\n          }\n\n          if (numHour > 12) {\n            return numHour - 12;\n          }\n\n          return numHour;\n        }\n\n        return hour;\n      }\n    },\n    mounted: function mounted() {\n      var selectedHour = this.$refs.hourList.querySelector('.vdatetime-time-picker__item--selected');\n      var selectedMinute = this.$refs.minuteList.querySelector('.vdatetime-time-picker__item--selected');\n      this.$refs.hourList.scrollTop = selectedHour ? selectedHour.offsetTop - 250 : 0;\n      this.$refs.minuteList.scrollTop = selectedMinute ? selectedMinute.offsetTop - 250 : 0;\n    }\n  };\n  var DatetimeYearPicker = {\n    render: function render() {\n      var _vm = this;\n\n      var _h = _vm.$createElement;\n\n      var _c = _vm._self._c || _h;\n\n      return _c('div', {\n        staticClass: \"vdatetime-year-picker\"\n      }, [_c('div', {\n        ref: \"yearList\",\n        staticClass: \"vdatetime-year-picker__list vdatetime-year-picker__list\"\n      }, _vm._l(_vm.years, function (year) {\n        return _c('div', {\n          staticClass: \"vdatetime-year-picker__item\",\n          class: {\n            'vdatetime-year-picker__item--selected': year.selected,\n            'vdatetime-year-picker__item--disabled': year.disabled\n          },\n          on: {\n            \"click\": function click($event) {\n              _vm.select(year);\n            }\n          }\n        }, [_vm._v(_vm._s(year.number) + \" \")]);\n      }))]);\n    },\n    staticRenderFns: [],\n    props: {\n      year: {\n        type: Number,\n        required: true\n      },\n      minDate: {\n        type: luxon.DateTime,\n        default: null\n      },\n      maxDate: {\n        type: luxon.DateTime,\n        default: null\n      }\n    },\n    computed: {\n      years: function years$1() {\n        var this$1 = this;\n        return years(this.year).map(function (year) {\n          return {\n            number: year,\n            selected: year === this$1.year,\n            disabled: !year || yearIsDisabled(this$1.minDate, this$1.maxDate, year)\n          };\n        });\n      }\n    },\n    methods: {\n      select: function select(year) {\n        if (year.disabled) {\n          return;\n        }\n\n        this.$emit('change', parseInt(year.number));\n      },\n      scrollToCurrent: function scrollToCurrent() {\n        if (this.$refs.yearList) {\n          var selectedYear = this.$refs.yearList.querySelector('.vdatetime-year-picker__item--selected');\n          this.$refs.yearList.scrollTop = selectedYear ? selectedYear.offsetTop - 250 : 0;\n        }\n      }\n    },\n    mounted: function mounted() {\n      this.scrollToCurrent();\n    },\n    updated: function updated() {\n      this.scrollToCurrent();\n    }\n  };\n  var DatetimeMonthPicker = {\n    render: function render() {\n      var _vm = this;\n\n      var _h = _vm.$createElement;\n\n      var _c = _vm._self._c || _h;\n\n      return _c('div', {\n        staticClass: \"vdatetime-month-picker\"\n      }, [_c('div', {\n        ref: \"monthList\",\n        staticClass: \"vdatetime-month-picker__list vdatetime-month-picker__list\"\n      }, _vm._l(_vm.months, function (month) {\n        return _c('div', {\n          staticClass: \"vdatetime-month-picker__item\",\n          class: {\n            'vdatetime-month-picker__item--selected': month.selected,\n            'vdatetime-month-picker__item--disabled': month.disabled\n          },\n          on: {\n            \"click\": function click($event) {\n              _vm.select(month);\n            }\n          }\n        }, [_vm._v(_vm._s(month.label) + \" \")]);\n      }))]);\n    },\n    staticRenderFns: [],\n    props: {\n      year: {\n        type: Number,\n        required: true\n      },\n      month: {\n        type: Number,\n        required: true\n      },\n      minDate: {\n        type: luxon.DateTime,\n        default: null\n      },\n      maxDate: {\n        type: luxon.DateTime,\n        default: null\n      }\n    },\n    computed: {\n      months: function months$1() {\n        var this$1 = this;\n        return months(this.month).map(function (month, index) {\n          return {\n            number: ++index,\n            label: month,\n            selected: index === this$1.month,\n            disabled: !index || monthIsDisabled(this$1.minDate, this$1.maxDate, this$1.year, index)\n          };\n        });\n      }\n    },\n    methods: {\n      select: function select(month) {\n        if (month.disabled) {\n          return;\n        }\n\n        this.$emit('change', parseInt(month.number));\n      },\n      scrollToCurrent: function scrollToCurrent() {\n        var selectedMonth = this.$refs.monthList.querySelector('.vdatetime-month-picker__item--selected');\n        this.$refs.monthList.scrollTop = selectedMonth ? selectedMonth.offsetTop - 250 : 0;\n      }\n    },\n    mounted: function mounted() {\n      this.scrollToCurrent();\n    },\n    updated: function updated() {\n      this.scrollToCurrent();\n    }\n  };\n  var KEY_TAB = 9;\n  var KEY_ENTER = 13;\n  var KEY_ESC = 27;\n  var DatetimePopup = {\n    render: function render() {\n      var _vm = this;\n\n      var _h = _vm.$createElement;\n\n      var _c = _vm._self._c || _h;\n\n      return _c('div', {\n        staticClass: \"vdatetime-popup\"\n      }, [_c('div', {\n        staticClass: \"vdatetime-popup__header\"\n      }, [_vm.title ? _c('div', {\n        staticClass: \"vdatetime-popup__title\"\n      }, [_vm._v(_vm._s(_vm.title))]) : _vm._e(), _vm._v(\" \"), _vm.type !== 'time' ? _c('div', {\n        staticClass: \"vdatetime-popup__year\",\n        on: {\n          \"click\": _vm.showYear\n        }\n      }, [_vm._v(_vm._s(_vm.year))]) : _vm._e(), _vm._v(\" \"), _vm.type !== 'time' ? _c('div', {\n        staticClass: \"vdatetime-popup__date\",\n        on: {\n          \"click\": _vm.showMonth\n        }\n      }, [_vm._v(_vm._s(_vm.dateFormatted))]) : _vm._e()]), _vm._v(\" \"), _c('div', {\n        staticClass: \"vdatetime-popup__body\"\n      }, [_vm.step === 'year' ? _c('datetime-year-picker', {\n        attrs: {\n          \"min-date\": _vm.minDatetime,\n          \"max-date\": _vm.maxDatetime,\n          \"year\": _vm.year\n        },\n        on: {\n          \"change\": _vm.onChangeYear\n        }\n      }) : _vm._e(), _vm._v(\" \"), _vm.step === 'month' ? _c('datetime-month-picker', {\n        attrs: {\n          \"min-date\": _vm.minDatetime,\n          \"max-date\": _vm.maxDatetime,\n          \"year\": _vm.year,\n          \"month\": _vm.month\n        },\n        on: {\n          \"change\": _vm.onChangeMonth\n        }\n      }) : _vm._e(), _vm._v(\" \"), _vm.step === 'date' ? _c('datetime-calendar', {\n        attrs: {\n          \"year\": _vm.year,\n          \"month\": _vm.month,\n          \"day\": _vm.day,\n          \"min-date\": _vm.minDatetime,\n          \"max-date\": _vm.maxDatetime,\n          \"week-start\": _vm.weekStart\n        },\n        on: {\n          \"change\": _vm.onChangeDate\n        }\n      }) : _vm._e(), _vm._v(\" \"), _vm.step === 'time' ? _c('datetime-time-picker', {\n        attrs: {\n          \"hour\": _vm.hour,\n          \"minute\": _vm.minute,\n          \"use12-hour\": _vm.use12Hour,\n          \"hour-step\": _vm.hourStep,\n          \"minute-step\": _vm.minuteStep,\n          \"min-time\": _vm.minTime,\n          \"max-time\": _vm.maxTime\n        },\n        on: {\n          \"change\": _vm.onChangeTime\n        }\n      }) : _vm._e()], 1), _vm._v(\" \"), _c('div', {\n        staticClass: \"vdatetime-popup__actions\"\n      }, [_c('div', {\n        staticClass: \"vdatetime-popup__actions__button vdatetime-popup__actions__button--cancel\",\n        on: {\n          \"click\": _vm.cancel\n        }\n      }, [_vm._t(\"button-cancel__internal\", [_vm._v(_vm._s(_vm.phrases.cancel))], {\n        step: _vm.step\n      })], 2), _vm._v(\" \"), _c('div', {\n        staticClass: \"vdatetime-popup__actions__button vdatetime-popup__actions__button--confirm\",\n        on: {\n          \"click\": _vm.confirm\n        }\n      }, [_vm._t(\"button-confirm__internal\", [_vm._v(_vm._s(_vm.phrases.ok))], {\n        step: _vm.step\n      })], 2)])]);\n    },\n    staticRenderFns: [],\n    components: {\n      DatetimeCalendar: DatetimeCalendar,\n      DatetimeTimePicker: DatetimeTimePicker,\n      DatetimeYearPicker: DatetimeYearPicker,\n      DatetimeMonthPicker: DatetimeMonthPicker\n    },\n    props: {\n      datetime: {\n        type: luxon.DateTime,\n        required: true\n      },\n      phrases: {\n        type: Object,\n        default: function default$1() {\n          return {\n            cancel: 'Cancel',\n            ok: 'Ok'\n          };\n        }\n      },\n      type: {\n        type: String,\n        default: 'date'\n      },\n      use12Hour: {\n        type: Boolean,\n        default: false\n      },\n      hourStep: {\n        type: Number,\n        default: 1\n      },\n      minuteStep: {\n        type: Number,\n        default: 1\n      },\n      minDatetime: {\n        type: luxon.DateTime,\n        default: null\n      },\n      maxDatetime: {\n        type: luxon.DateTime,\n        default: null\n      },\n      auto: {\n        type: Boolean,\n        default: false\n      },\n      weekStart: {\n        type: Number,\n        default: 1\n      },\n      flow: {\n        type: Array\n      },\n      title: {\n        type: String\n      }\n    },\n    data: function data() {\n      var flowManager = this.flow ? createFlowManager(this.flow) : createFlowManagerFromType(this.type);\n      return {\n        newDatetime: this.datetime,\n        flowManager: flowManager,\n        step: flowManager.first(),\n        timePartsTouched: []\n      };\n    },\n    created: function created() {\n      document.addEventListener('keydown', this.onKeyDown);\n    },\n    beforeDestroy: function beforeDestroy() {\n      document.removeEventListener('keydown', this.onKeyDown);\n    },\n    computed: {\n      year: function year() {\n        return this.newDatetime.year;\n      },\n      month: function month() {\n        return this.newDatetime.month;\n      },\n      day: function day() {\n        return this.newDatetime.day;\n      },\n      hour: function hour() {\n        return this.newDatetime.hour;\n      },\n      minute: function minute() {\n        return this.newDatetime.minute;\n      },\n      dateFormatted: function dateFormatted() {\n        return this.newDatetime.toLocaleString({\n          month: 'long',\n          day: 'numeric'\n        });\n      },\n      minTime: function minTime() {\n        return this.minDatetime && this.minDatetime.year === this.year && this.minDatetime.month === this.month && this.minDatetime.day === this.day ? this.minDatetime.toFormat('HH:mm') : null;\n      },\n      maxTime: function maxTime() {\n        return this.maxDatetime && this.maxDatetime.year === this.year && this.maxDatetime.month === this.month && this.maxDatetime.day === this.day ? this.maxDatetime.toFormat('HH:mm') : null;\n      }\n    },\n    methods: {\n      nextStep: function nextStep() {\n        this.step = this.flowManager.next(this.step);\n        this.timePartsTouched = [];\n\n        if (this.step === 'end') {\n          this.$emit('confirm', this.newDatetime);\n        }\n      },\n      showYear: function showYear() {\n        this.step = 'year';\n        this.flowManager.diversion('date');\n      },\n      showMonth: function showMonth() {\n        this.step = 'month';\n        this.flowManager.diversion('date');\n      },\n      confirm: function confirm() {\n        this.nextStep();\n      },\n      cancel: function cancel() {\n        this.$emit('cancel');\n      },\n      onChangeYear: function onChangeYear(year) {\n        this.newDatetime = this.newDatetime.set({\n          year: year\n        });\n\n        if (this.auto) {\n          this.nextStep();\n        }\n      },\n      onChangeMonth: function onChangeMonth(month) {\n        this.newDatetime = this.newDatetime.set({\n          month: month\n        });\n\n        if (this.auto) {\n          this.nextStep();\n        }\n      },\n      onChangeDate: function onChangeDate(year, month, day) {\n        this.newDatetime = this.newDatetime.set({\n          year: year,\n          month: month,\n          day: day\n        });\n\n        if (this.auto) {\n          this.nextStep();\n        }\n      },\n      onChangeTime: function onChangeTime(ref) {\n        var hour = ref.hour;\n        var minute = ref.minute;\n        var suffixTouched = ref.suffixTouched;\n\n        if (suffixTouched) {\n          this.timePartsTouched['suffix'] = true;\n        }\n\n        if (Number.isInteger(hour)) {\n          this.newDatetime = this.newDatetime.set({\n            hour: hour\n          });\n          this.timePartsTouched['hour'] = true;\n        }\n\n        if (Number.isInteger(minute)) {\n          this.newDatetime = this.newDatetime.set({\n            minute: minute\n          });\n          this.timePartsTouched['minute'] = true;\n        }\n\n        var goNext = this.auto && this.timePartsTouched['hour'] && this.timePartsTouched['minute'] && (this.timePartsTouched['suffix'] || !this.use12Hour);\n\n        if (goNext) {\n          this.nextStep();\n        }\n      },\n      onKeyDown: function onKeyDown(event) {\n        switch (event.keyCode) {\n          case KEY_ESC:\n          case KEY_TAB:\n            this.cancel();\n            break;\n\n          case KEY_ENTER:\n            this.nextStep();\n            break;\n        }\n      }\n    }\n  };\n  var Datetime = {\n    render: function render() {\n      var _vm = this;\n\n      var _h = _vm.$createElement;\n\n      var _c = _vm._self._c || _h;\n\n      return _c('div', {\n        staticClass: \"vdatetime\"\n      }, [_vm._t(\"before\"), _vm._v(\" \"), _c('input', _vm._g(_vm._b({\n        staticClass: \"vdatetime-input\",\n        class: _vm.inputClass,\n        style: _vm.inputStyle,\n        attrs: {\n          \"id\": _vm.inputId,\n          \"type\": \"text\"\n        },\n        domProps: {\n          \"value\": _vm.inputValue\n        },\n        on: {\n          \"click\": _vm.open,\n          \"focus\": _vm.open\n        }\n      }, 'input', _vm.$attrs, false), _vm.$listeners)), _vm._v(\" \"), _vm.hiddenName ? _c('input', {\n        attrs: {\n          \"type\": \"hidden\",\n          \"name\": _vm.hiddenName\n        },\n        domProps: {\n          \"value\": _vm.value\n        },\n        on: {\n          \"input\": _vm.setValue\n        }\n      }) : _vm._e(), _vm._v(\" \"), _vm._t(\"after\"), _vm._v(\" \"), _c('transition-group', {\n        attrs: {\n          \"name\": \"vdatetime-fade\",\n          \"tag\": \"div\"\n        }\n      }, [_vm.isOpen && !_vm.hideBackdrop ? _c('div', {\n        key: \"overlay\",\n        staticClass: \"vdatetime-overlay\",\n        on: {\n          \"click\": function click($event) {\n            if ($event.target !== $event.currentTarget) {\n              return null;\n            }\n\n            _vm.clickOutside($event);\n          }\n        }\n      }) : _vm._e(), _vm._v(\" \"), _vm.isOpen ? _c('datetime-popup', {\n        key: \"popup\",\n        attrs: {\n          \"type\": _vm.type,\n          \"datetime\": _vm.popupDate,\n          \"phrases\": _vm.phrases,\n          \"use12-hour\": _vm.use12Hour,\n          \"hour-step\": _vm.hourStep,\n          \"minute-step\": _vm.minuteStep,\n          \"min-datetime\": _vm.popupMinDatetime,\n          \"max-datetime\": _vm.popupMaxDatetime,\n          \"auto\": _vm.auto,\n          \"week-start\": _vm.weekStart,\n          \"flow\": _vm.flow,\n          \"title\": _vm.title\n        },\n        on: {\n          \"confirm\": _vm.confirm,\n          \"cancel\": _vm.cancel\n        },\n        scopedSlots: _vm._u([{\n          key: \"button-cancel__internal\",\n          fn: function fn(scope) {\n            return [_vm._t(\"button-cancel\", [_vm._v(_vm._s(_vm.phrases.cancel))], {\n              step: scope.step\n            })];\n          }\n        }, {\n          key: \"button-confirm__internal\",\n          fn: function fn(scope) {\n            return [_vm._t(\"button-confirm\", [_vm._v(_vm._s(_vm.phrases.ok))], {\n              step: scope.step\n            })];\n          }\n        }])\n      }) : _vm._e()], 1)], 2);\n    },\n    staticRenderFns: [],\n    components: {\n      DatetimePopup: DatetimePopup\n    },\n    inheritAttrs: false,\n    props: {\n      value: {\n        type: String\n      },\n      valueZone: {\n        type: String,\n        default: 'UTC'\n      },\n      inputId: {\n        type: String,\n        default: null\n      },\n      inputClass: {\n        type: [Object, Array, String],\n        default: ''\n      },\n      inputStyle: {\n        type: [Object, Array, String],\n        default: ''\n      },\n      hiddenName: {\n        type: String\n      },\n      zone: {\n        type: String,\n        default: 'local'\n      },\n      format: {\n        type: [Object, String],\n        default: null\n      },\n      type: {\n        type: String,\n        default: 'date'\n      },\n      phrases: {\n        type: Object,\n        default: function default$1() {\n          return {\n            cancel: 'Cancel',\n            ok: 'Ok'\n          };\n        }\n      },\n      use12Hour: {\n        type: Boolean,\n        default: false\n      },\n      hourStep: {\n        type: Number,\n        default: 1\n      },\n      minuteStep: {\n        type: Number,\n        default: 1\n      },\n      minDatetime: {\n        type: String,\n        default: null\n      },\n      maxDatetime: {\n        type: String,\n        default: null\n      },\n      auto: {\n        type: Boolean,\n        default: false\n      },\n      weekStart: {\n        type: Number,\n        default: function default$2() {\n          return weekStart();\n        }\n      },\n      flow: {\n        type: Array\n      },\n      title: {\n        type: String\n      },\n      hideBackdrop: {\n        type: Boolean,\n        default: false\n      },\n      backdropClick: {\n        type: Boolean,\n        default: true\n      }\n    },\n    data: function data() {\n      return {\n        isOpen: false,\n        datetime: datetimeFromISO(this.value)\n      };\n    },\n    watch: {\n      value: function value(newValue) {\n        this.datetime = datetimeFromISO(newValue);\n      }\n    },\n    created: function created() {\n      this.emitInput();\n    },\n    computed: {\n      inputValue: function inputValue() {\n        var format = this.format;\n\n        if (!format) {\n          switch (this.type) {\n            case 'date':\n              format = luxon.DateTime.DATE_MED;\n              break;\n\n            case 'time':\n              format = luxon.DateTime.TIME_24_SIMPLE;\n              break;\n\n            case 'datetime':\n            case 'default':\n              format = luxon.DateTime.DATETIME_MED;\n              break;\n          }\n        }\n\n        if (typeof format === 'string') {\n          return this.datetime ? luxon.DateTime.fromISO(this.datetime).setZone(this.zone).toFormat(format) : '';\n        } else {\n          return this.datetime ? this.datetime.setZone(this.zone).toLocaleString(format) : '';\n        }\n      },\n      popupDate: function popupDate() {\n        return this.datetime ? this.datetime.setZone(this.zone) : this.newPopupDatetime();\n      },\n      popupMinDatetime: function popupMinDatetime() {\n        return this.minDatetime ? luxon.DateTime.fromISO(this.minDatetime).setZone(this.zone) : null;\n      },\n      popupMaxDatetime: function popupMaxDatetime() {\n        return this.maxDatetime ? luxon.DateTime.fromISO(this.maxDatetime).setZone(this.zone) : null;\n      }\n    },\n    methods: {\n      emitInput: function emitInput() {\n        var datetime = this.datetime ? this.datetime.setZone(this.valueZone) : null;\n\n        if (datetime && this.type === 'date') {\n          datetime = startOfDay(datetime);\n        }\n\n        this.$emit('input', datetime ? datetime.toISO() : '');\n      },\n      open: function open(event) {\n        event.target.blur();\n        this.isOpen = true;\n      },\n      close: function close() {\n        this.isOpen = false;\n        this.$emit('close');\n      },\n      confirm: function confirm(datetime) {\n        this.datetime = datetime.toUTC();\n        this.emitInput();\n        this.close();\n      },\n      cancel: function cancel() {\n        this.close();\n      },\n      clickOutside: function clickOutside() {\n        if (this.backdropClick === true) {\n          this.cancel();\n        }\n      },\n      newPopupDatetime: function newPopupDatetime() {\n        var datetime = luxon.DateTime.utc().setZone(this.zone).set({\n          seconds: 0,\n          milliseconds: 0\n        });\n\n        if (this.popupMinDatetime && datetime < this.popupMinDatetime) {\n          datetime = this.popupMinDatetime.set({\n            seconds: 0,\n            milliseconds: 0\n          });\n        }\n\n        if (this.popupMaxDatetime && datetime > this.popupMaxDatetime) {\n          datetime = this.popupMaxDatetime.set({\n            seconds: 0,\n            milliseconds: 0\n          });\n        }\n\n        if (this.minuteStep === 1) {\n          return datetime;\n        }\n\n        var roundedMinute = Math.round(datetime.minute / this.minuteStep) * this.minuteStep;\n\n        if (roundedMinute === 60) {\n          return datetime.plus({\n            hours: 1\n          }).set({\n            minute: 0\n          });\n        }\n\n        return datetime.set({\n          minute: roundedMinute\n        });\n      },\n      setValue: function setValue(event) {\n        this.datetime = datetimeFromISO(event.target.value);\n        this.emitInput();\n      }\n    }\n  };\n\n  function plugin(Vue) {\n    Vue.component('datetime', Datetime);\n    Vue.component('datetime-popup', DatetimePopup);\n  } // Install by default if using the script tag\n\n\n  if (typeof window !== 'undefined' && window.Vue) {\n    window.Vue.use(plugin);\n  }\n\n  var version = '1.0.0-beta.14';\n  exports['default'] = plugin;\n  exports.Datetime = Datetime;\n  exports.DatetimePopup = DatetimePopup;\n  exports.version = version;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"module"}