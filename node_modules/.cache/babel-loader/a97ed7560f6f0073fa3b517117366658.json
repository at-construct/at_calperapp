{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nvar apiUrl = 'http://localhost:5000';\nvar state = {\n  events: []\n};\nvar getters = {\n  events: function events(state) {\n    return state.events.map(function (event) {\n      return _objectSpread(_objectSpread({}, event), {}, {\n        start: new Date(event.start),\n        end: new Date(event.end)\n      });\n    });\n  }\n};\nvar mutations = {\n  setEvents: function setEvents(state, events) {\n    return state.events = events;\n  }\n};\nvar actions = {\n  fetchEvents: function fetchEvents(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return axios.get(\"\".concat(apiUrl, \"/events\"));\n\n            case 3:\n              response = _context.sent;\n              commit('setEvents', response.data); // mutationを呼び出す\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"sources":["/Users/at19830906/projects/CalRailsVueApp/app/javascript/store/modules/events.js"],"names":["axios","apiUrl","state","events","getters","map","event","start","Date","end","mutations","setEvents","actions","fetchEvents","commit","get","response","data","namespaced"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,MAAM,GAAG,uBAAf;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE;AADI,CAAd;AAIA,IAAMC,OAAO,GAAG;AACdD,EAAAA,MAAM,EAAE,gBAAAD,KAAK;AAAA,WAAIA,KAAK,CAACC,MAAN,CAAaE,GAAb,CAAiB,UAAAC,KAAK,EAAI;AACzC,6CACKA,KADL;AAEEC,QAAAA,KAAK,EAAE,IAAIC,IAAJ,CAASF,KAAK,CAACC,KAAf,CAFT;AAGEE,QAAAA,GAAG,EAAE,IAAID,IAAJ,CAASF,KAAK,CAACG,GAAf;AAHP;AAKD,KANgB,CAAJ;AAAA;AADC,CAAhB;AAUA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,SAAS,EAAE,mBAACT,KAAD,EAAQC,MAAR;AAAA,WAAoBD,KAAK,CAACC,MAAN,GAAeA,MAAnC;AAAA;AADK,CAAlB;AAIA,IAAMS,OAAO,GAAG;AACRC,EAAAA,WADQ,6BACgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAVC,cAAAA,MAAU,QAAVA,MAAU;AAAA;AAAA,qBACLd,KAAK,CAACe,GAAN,WAAad,MAAb,aADK;;AAAA;AACtBe,cAAAA,QADsB;AAE5BF,cAAAA,MAAM,CAAC,WAAD,EAAcE,QAAQ,CAACC,IAAvB,CAAN,CAF4B,CAES;;AAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG7B;AAJa,CAAhB;AAOA,eAAe;AACbC,EAAAA,UAAU,EAAE,IADC;AAEbhB,EAAAA,KAAK,EAALA,KAFa;AAGbE,EAAAA,OAAO,EAAPA,OAHa;AAIbM,EAAAA,SAAS,EAATA,SAJa;AAKbE,EAAAA,OAAO,EAAPA;AALa,CAAf","sourcesContent":["import axios from 'axios';\n\nconst apiUrl = 'http://localhost:5000';\n\nconst state = {\n  events: []\n};\n\nconst getters = {\n  events: state => state.events.map(event => {\n    return {\n      ...event,\n      start: new Date(event.start),\n      end: new Date(event.end)\n    };\n  }),\n}\n\nconst mutations = {\n  setEvents: (state, events) => (state.events = events)\n}\n\nconst actions = {\n  async fetchEvents({ commit }) {\n    const response = await axios.get(`${apiUrl}/events`);\n    commit('setEvents', response.data);  // mutationを呼び出す\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};"]},"metadata":{},"sourceType":"module"}