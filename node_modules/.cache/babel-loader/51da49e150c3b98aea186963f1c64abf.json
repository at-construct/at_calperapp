{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport axios from 'axios';\nimport { isDateWithinInterval, compareDates } from '../../functions/datetime';\nimport { serializeEvent } from '../../functions/serializers';\nvar apiUrl = 'https://localhost:9292';\nvar state = {\n  events: [],\n  event: null,\n  isEditMode: false,\n  clickedDate: null,\n  user_visibility: [],\n  user_name: '' // ユーザー名を保持するための状態を追加\n\n};\nvar getters = {\n  events: function events(state) {\n    return state.events.filter(function (event) {\n      return event;\n    }).map(function (event) {\n      return serializeEvent(event);\n    });\n  },\n  event: function event(state) {\n    return serializeEvent(state.event);\n  },\n  dayEvents: function dayEvents(state) {\n    return state.events.map(function (event) {\n      return serializeEvent(event);\n    }).filter(function (event) {\n      return isDateWithinInterval(state.clickedDate, event.startDate, event.endDate);\n    }).sort(compareDates);\n  },\n  isEditMode: function isEditMode(state) {\n    return state.isEditMode;\n  },\n  clickedDate: function clickedDate(state) {\n    return state.clickedDate;\n  }\n};\nvar mutations = {\n  setEvents: function setEvents(state, events) {\n    return state.events = events;\n  },\n  appendEvent: function appendEvent(state, event) {\n    return state.events = [].concat(_toConsumableArray(state.events), [event]);\n  },\n  setEvent: function setEvent(state, event) {\n    return state.event = event;\n  },\n  removeEvent: function removeEvent(state, event) {\n    return state.events = state.events.filter(function (e) {\n      return e.id !== event.id;\n    });\n  },\n  resetEvent: function resetEvent(state) {\n    return state.event = null;\n  },\n  updateEvent: function updateEvent(state, event) {\n    return state.events = state.events.map(function (e) {\n      return e.id === event.id ? event : e;\n    });\n  },\n  setEditMode: function setEditMode(state, bool) {\n    return state.isEditMode = bool;\n  },\n  setClickedDate: function setClickedDate(state, date) {\n    return state.clickedDate = date;\n  },\n  setUserName: function setUserName(state, userName) {\n    return state.user_name = userName;\n  } // ユーザー名を保持するためのミューテーションを追加\n\n};\nvar actions = {\n  fetchEvents: function fetchEvents(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commit, response, user;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return axios.get(\"\".concat(apiUrl, \"/events\"));\n\n            case 3:\n              response = _context.sent;\n              commit('setEvents', response.data);\n\n              try {\n                user = usersResponse.data.find(function (user) {\n                  return user.id === currentUserId;\n                }); // ログインユーザーの情報を取得\n\n                if (user) {\n                  commit('setUserName', user.user_name); // ユーザー名をセット\n                }\n              } catch (error) {\n                console.error(error);\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  createEvent: function createEvent(_ref2, event) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              console.log('createEvent', event);\n              _context2.next = 4;\n              return axios.post(\"\".concat(apiUrl, \"/events\"), event);\n\n            case 4:\n              response = _context2.sent;\n              commit('appendEvent', response.data);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  deleteEvent: function deleteEvent(_ref3, id) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              _context3.next = 3;\n              return axios[\"delete\"](\"\".concat(apiUrl, \"/events/\").concat(id));\n\n            case 3:\n              response = _context3.sent;\n              commit('removeEvent', response.data);\n              commit('resetEvent');\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  updateEvent: function updateEvent(_ref4, event) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref4.commit;\n              _context4.next = 3;\n              return axios.put(\"\".concat(apiUrl, \"/events/\").concat(event.id), event);\n\n            case 3:\n              response = _context4.sent;\n              commit('updateEvent', response.data);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  },\n  setEvent: function setEvent(_ref5, event) {\n    var commit = _ref5.commit;\n    commit('setEvent', event);\n  },\n  setEditMode: function setEditMode(_ref6, bool) {\n    var commit = _ref6.commit;\n    commit('setEditMode', bool);\n  },\n  setClickedDate: function setClickedDate(_ref7, date) {\n    var commit = _ref7.commit;\n    commit('setClickedDate', date);\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"sources":["/Users/aaattt/projects/CalRailsVueApp/app/javascript/store/modules/events.js"],"names":["axios","isDateWithinInterval","compareDates","serializeEvent","apiUrl","state","events","event","isEditMode","clickedDate","user_visibility","user_name","getters","filter","map","dayEvents","startDate","endDate","sort","mutations","setEvents","appendEvent","setEvent","removeEvent","e","id","resetEvent","updateEvent","setEditMode","bool","setClickedDate","date","setUserName","userName","actions","fetchEvents","commit","get","response","data","user","usersResponse","find","currentUserId","error","console","createEvent","log","post","deleteEvent","put","namespaced"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { isDateWithinInterval, compareDates } from '../../functions/datetime';\nimport { serializeEvent } from '../../functions/serializers';\n\nconst apiUrl = 'https://localhost:9292';\n\nconst state = {\n  events: [],\n  event: null,\n  isEditMode: false,\n  clickedDate: null,\n  user_visibility: [],\n  user_name: '', // ユーザー名を保持するための状態を追加\n};\n\nconst getters = {\n  events: state =>\n    state.events.filter(event => event).map(event => serializeEvent(event)),\n  event: state => serializeEvent(state.event),\n  dayEvents: state =>\n    state.events\n      .map(event => serializeEvent(event))\n      .filter(event =>\n        isDateWithinInterval(state.clickedDate, event.startDate, event.endDate)\n      )\n      .sort(compareDates),\n  isEditMode: state => state.isEditMode,\n  clickedDate: state => state.clickedDate,\n};\n\nconst mutations = {\n  setEvents: (state, events) => (state.events = events),\n  appendEvent: (state, event) => (state.events = [...state.events, event]),\n  setEvent: (state, event) => (state.event = event),\n  removeEvent: (state, event) =>\n    (state.events = state.events.filter(e => e.id !== event.id)),\n  resetEvent: state => (state.event = null),\n  updateEvent: (state, event) =>\n    (state.events = state.events.map(e => (e.id === event.id ? event : e))),\n  setEditMode: (state, bool) => (state.isEditMode = bool),\n  setClickedDate: (state, date) => (state.clickedDate = date),\n  setUserName: (state, userName) => (state.user_name = userName), // ユーザー名を保持するためのミューテーションを追加\n};\n\nconst actions = {\n  async fetchEvents({ commit }) {\n    const response = await axios.get(`${apiUrl}/events`);\n    commit('setEvents', response.data);\n    try {\n      const user = usersResponse.data.find(user => user.id === currentUserId); // ログインユーザーの情報を取得\n      if (user) {\n        commit('setUserName', user.user_name); // ユーザー名をセット\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  },\n  async createEvent({ commit }, event) {\n    console.log('createEvent', event);\n    const response = await axios.post(`${apiUrl}/events`, event);\n    commit('appendEvent', response.data);\n  },\n  async deleteEvent({ commit }, id) {\n    const response = await axios.delete(`${apiUrl}/events/${id}`);\n    commit('removeEvent', response.data);\n    commit('resetEvent');\n  },\n  async updateEvent({ commit }, event) {\n    const response = await axios.put(`${apiUrl}/events/${event.id}`, event);\n    commit('updateEvent', response.data);\n  },\n  setEvent({ commit }, event) {\n    commit('setEvent', event);\n  },\n  setEditMode({ commit }, bool) {\n    commit('setEditMode', bool);\n  },\n  setClickedDate({ commit }, date) {\n    commit('setClickedDate', date);\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};\n"]},"metadata":{},"sourceType":"module"}