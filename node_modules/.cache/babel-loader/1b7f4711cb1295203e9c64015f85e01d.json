{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios'; // import { serializeParticipant } from '../../functions/serializers';\n\nvar apiUrl = 'https://localhost:9292/';\nvar state = {\n  events: [],\n  participants: [],\n  participant: null,\n  participantEvents: {}\n};\nvar getters = {\n  participants: function participants(state) {\n    return state.participants.map(function (participant) {\n      return _objectSpread(_objectSpread({}, participant), {}, {\n        start: new Date(participant.event.start),\n        end: new Date(participant.event.end)\n      });\n    });\n  },\n  mergedEvents: function mergedEvents(state) {\n    var events = state.events.slice();\n    state.participants.forEach(function (participant) {\n      if (state.participantEvents[participant.id]) {\n        events.push.apply(events, _toConsumableArray(state.participantEvents[participant.id]));\n      }\n    });\n    return events;\n  }\n};\nvar mutations = {\n  setEvents: function setEvents(state, events) {\n    state.events = events;\n  },\n  setParticipants: function setParticipants(state, participants) {\n    return state.participants = participants;\n  },\n  appendParticipant: function appendParticipant(state, participant) {\n    return state.participants = [].concat(_toConsumableArray(state.participants), [participant]);\n  },\n  removeParticipant: function removeParticipant(state, participant) {\n    return state.participants = state.participants.filter(function (p) {\n      return p.id !== participant.id;\n    });\n  },\n  updateParticipant: function updateParticipant(state, participant) {\n    return state.participants = state.participants.map(function (p) {\n      return p.id === participant.id ? participant : p;\n    });\n  },\n  setParticipantEvents: function setParticipantEvents(state, _ref) {\n    var participantId = _ref.participantId,\n        events = _ref.events;\n    state.participantEvents[participantId] = events;\n  }\n};\nvar actions = {\n  fetchParticipants: function fetchParticipants(_ref2, eventId) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.get(\"/api/events/\".concat(eventId, \"/participants\"));\n\n            case 4:\n              response = _context.sent;\n              commit('setParticipants', response.data);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8]]);\n    }))();\n  },\n  fetchParticipantEvents: function fetchParticipantEvents(_ref3, participantId) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref3.commit;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return axios.get(\"/api/participants/\".concat(participantId, \"/events\"));\n\n            case 4:\n              response = _context2.sent;\n              commit('setParticipantEvents', {\n                participantId: participantId,\n                events: response.data\n              });\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 8]]);\n    }))();\n  },\n  createParticipant: function createParticipant(_ref4, participant) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref4.commit;\n              console.log('createParticipant', participant);\n              _context3.next = 4;\n              return axios.post(\"\".concat(apiUrl, \"/participants\"), participant);\n\n            case 4:\n              response = _context3.sent;\n              commit('appendParticipant', response.data);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  deleteParticipant: function deleteParticipant(_ref5, participantId) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref5.commit;\n              _context4.next = 3;\n              return axios[\"delete\"](\"\".concat(apiUrl, \"/participants/\").concat(participantId));\n\n            case 3:\n              response = _context4.sent;\n              commit('removeParticipant', response.data);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  },\n  updateParticipant: function updateParticipant(_ref6, participant) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref6.commit;\n              _context5.next = 3;\n              return axios.put(\"\".concat(apiUrl, \"/participants/\").concat(participant.id), participant);\n\n            case 3:\n              response = _context5.sent;\n              commit('updateParticipant', response.data);\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }))();\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"sources":["/Users/aaattt/projects/CalRailsVueApp/app/javascript/store/modules/participants.js"],"names":["axios","apiUrl","state","events","participants","participant","participantEvents","getters","map","start","Date","event","end","mergedEvents","slice","forEach","id","push","mutations","setEvents","setParticipants","appendParticipant","removeParticipant","filter","p","updateParticipant","setParticipantEvents","participantId","actions","fetchParticipants","eventId","commit","get","response","data","console","log","fetchParticipantEvents","createParticipant","post","deleteParticipant","put","namespaced"],"mappings":"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","sourcesContent":["import axios from 'axios';\n// import { serializeParticipant } from '../../functions/serializers';\n\nconst apiUrl = 'https://localhost:9292/';\n\nconst state = {\n  events: [],\n  participants: [],\n  participant: null,\n  participantEvents: {},\n};\n\nconst getters = {\n  participants: state => state.participants.map(participant => {\n    return {\n      ...participant,\n      start: new Date(participant.event.start),\n      end: new Date(participant.event.end)\n    };\n  }),\n  mergedEvents(state) {\n    const events = state.events.slice();\n\n    state.participants.forEach((participant) => {\n      if (state.participantEvents[participant.id]) {\n        events.push(...state.participantEvents[participant.id]);\n      }\n    });\n\n    return events;\n  },\n};\n\nconst mutations = {\n  setEvents(state, events) {\n    state.events = events;\n  },\n  setParticipants: (state, participants) => (state.participants = participants),\n  appendParticipant: (state, participant) =>\n    (state.participants = [...state.participants, participant]),\n  removeParticipant: (state, participant) =>\n    (state.participants = state.participants.filter(\n      p => p.id !== participant.id\n    )),\n  updateParticipant: (state, participant) =>\n    (state.participants = state.participants.map(p =>\n      p.id === participant.id ? participant : p\n    )),\n  setParticipantEvents(state, { participantId, events }) {\n    state.participantEvents[participantId] = events;\n  },\n\n};\n\nconst actions = {\n  async fetchParticipants({ commit }, eventId) {\n    try {\n      const response = await axios.get(`/api/events/${eventId}/participants`);\n      commit('setParticipants', response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  },\n\n  async fetchParticipantEvents({ commit }, participantId) {\n    try {\n      const response = await axios.get(`/api/participants/${participantId}/events`);\n      commit('setParticipantEvents', { participantId, events: response.data });\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  async createParticipant({ commit }, participant) {\n    console.log('createParticipant', participant);\n    const response = await axios.post(`${apiUrl}/participants`, participant);\n    commit('appendParticipant', response.data);\n  },\n  async deleteParticipant({ commit }, participantId) {\n    const response = await axios.delete(\n      `${apiUrl}/participants/${participantId}`\n    );\n    commit('removeParticipant', response.data);\n  },\n  async updateParticipant({ commit }, participant) {\n    const response = await axios.put(\n      `${apiUrl}/participants/${participant.id}`,\n      participant\n    );\n    commit('updateParticipant', response.data);\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};\n"]},"metadata":{},"sourceType":"module"}