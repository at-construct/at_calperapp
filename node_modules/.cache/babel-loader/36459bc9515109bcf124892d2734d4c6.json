{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios'; // import { serializeParticipant } from '../../functions/serializers';\n\nvar apiUrl = 'https://localhost:9292/';\nvar state = {\n  participantEvent: [],\n  participantUser: []\n};\nvar getters = {\n  participantEvent: function participantEvent(state) {\n    return state.participantEvent.map(function (participant) {\n      return _objectSpread(_objectSpread({}, participant), {}, {\n        start: new Date(participant.start),\n        end: new Date(participant.end)\n      });\n    });\n  },\n  participantUser: function participantUser(state) {\n    return state.participantUser;\n  }\n};\nvar mutations = {\n  setParticipantsEvent: function setParticipantsEvent(state, participants) {\n    return state.participantsEvent = participants;\n  },\n  appendParticipantEvent: function appendParticipantEvent(state, participant) {\n    return state.participantsEvent = [].concat(_toConsumableArray(state.participantsEvent), [participant]);\n  },\n  updateParticipantEvent: function updateParticipantEvent(state, participant) {\n    return state.participantsEvent = state.participantsEvent.map(function (p) {\n      return p.id === participant.id ? participant : p;\n    });\n  },\n  removeParticipantEvent: function removeParticipantEvent(state, participantId) {\n    return state.participantsEvent = state.participantsEvent.filter(function (p) {\n      return p.id !== participantId;\n    });\n  },\n  setParticipantsUser: function setParticipantsUser(state, participants) {\n    return state.participantsUser = participants;\n  },\n  appendParticipantUser: function appendParticipantUser(state, participant) {\n    return state.participantsUser = [].concat(_toConsumableArray(state.participantsUser), [participant]);\n  },\n  updateParticipantUser: function updateParticipantUser(state, participant) {\n    return state.participantsUser = state.participantsUser.map(function (p) {\n      return p.id === participant.id ? participant : p;\n    });\n  },\n  removeParticipantUser: function removeParticipantUser(state, participantId) {\n    return state.participantsUser = state.participantsUser.filter(function (p) {\n      return p.id !== participantId;\n    });\n  }\n};\nvar actions = {\n  fetchParticipantEvent: function fetchParticipantEvent(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return axios.get(\"\".concat(apiUrl, \"/participants/event_excerpt/\"));\n\n            case 3:\n              response = _context.sent;\n              commit('setParticipantsEvent', response.data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  createParticipantEvent: function createParticipantEvent(_ref2, participant) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              console.log('createParticipantEvent', participant);\n              _context2.next = 4;\n              return axios.post(\"\".concat(apiUrl, \"/participants/event_excerpt/\"), participant);\n\n            case 4:\n              response = _context2.sent;\n              commit('appendParticipantEvent', response.data);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  updateParticipantEvent: function updateParticipantEvent(_ref3, participant) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              _context3.next = 3;\n              return axios.put(\"\".concat(apiUrl, \"/participants/event_excerpt/\").concat(participant.id), participant);\n\n            case 3:\n              response = _context3.sent;\n              commit('updateParticipantEvent', response.data);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  deleteParticipantEvent: function deleteParticipantEvent(_ref4, participantId) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref4.commit;\n              _context4.next = 3;\n              return axios[\"delete\"](\"\".concat(apiUrl, \"/participants/event_excerpt/\").concat(participantId));\n\n            case 3:\n              response = _context4.sent;\n              commit('removeParticipantEvent', response.data);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  },\n  fetchParticipantUser: function fetchParticipantUser(_ref5) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref5.commit;\n              _context5.next = 3;\n              return axios.get(\"\".concat(apiUrl, \"/participants/user_excerpt/\"));\n\n            case 3:\n              response = _context5.sent;\n              commit('setParticipantsUser', response.data);\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }))();\n  },\n  createParticipantUser: function createParticipantUser(_ref6, participant) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref6.commit;\n              console.log('createParticipantUser', participant);\n              _context6.next = 4;\n              return axios.post(\"\".concat(apiUrl, \"/participants/user_excerpt/\"), participant);\n\n            case 4:\n              response = _context6.sent;\n              commit('appendParticipantUser', response.data);\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  },\n  updateParticipantUser: function updateParticipantUser(_ref7, participant) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              commit = _ref7.commit;\n              _context7.next = 3;\n              return axios.put(\"\".concat(apiUrl, \"/participants/user_excerpt/\").concat(participant.id), participant);\n\n            case 3:\n              response = _context7.sent;\n              commit('updateParticipantUser', response.data);\n\n            case 5:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }))();\n  },\n  deleteParticipantUser: function deleteParticipantUser(_ref8, participantId) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              commit = _ref8.commit;\n              _context8.next = 3;\n              return axios[\"delete\"](\"\".concat(apiUrl, \"/participants/user_excerpt/\").concat(participantId));\n\n            case 3:\n              response = _context8.sent;\n              commit('removeParticipantUser', response.data);\n\n            case 5:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }))();\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"sources":["/Users/aaattt/projects/CalRailsVueApp/app/javascript/store/modules/participants.js"],"names":["axios","apiUrl","state","participantEvent","participantUser","getters","map","participant","start","Date","end","mutations","setParticipantsEvent","participants","participantsEvent","appendParticipantEvent","updateParticipantEvent","p","id","removeParticipantEvent","participantId","filter","setParticipantsUser","participantsUser","appendParticipantUser","updateParticipantUser","removeParticipantUser","actions","fetchParticipantEvent","commit","get","response","data","createParticipantEvent","console","log","post","put","deleteParticipantEvent","fetchParticipantUser","createParticipantUser","deleteParticipantUser","namespaced"],"mappings":"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","sourcesContent":["import axios from 'axios';\n// import { serializeParticipant } from '../../functions/serializers';\nconst apiUrl = 'https://localhost:9292/';\n\nconst state = {\n  participantEvent: [],\n  participantUser: []\n};\n\nconst getters = {\n  participantEvent: state => state.participantEvent.map(participant => {\n    return {\n      ...participant,\n      start: new Date(participant.start),\n      end: new Date(participant.end)\n    };\n  }),\n  participantUser: state => state.participantUser\n};\n\nconst mutations = {\n  setParticipantsEvent: (state, participants) => (state.participantsEvent = participants),\n  appendParticipantEvent: (state, participant) =>\n    (state.participantsEvent = [...state.participantsEvent, participant]),\n  updateParticipantEvent: (state, participant) =>\n    (state.participantsEvent = state.participantsEvent.map(p =>\n      p.id === participant.id ? participant : p\n    )),\n  removeParticipantEvent: (state, participantId) =>\n    (state.participantsEvent = state.participantsEvent.filter(\n      p => p.id !== participantId\n    )),\n  setParticipantsUser: (state, participants) => (state.participantsUser = participants),\n  appendParticipantUser: (state, participant) =>\n    (state.participantsUser = [...state.participantsUser, participant]),\n  updateParticipantUser: (state, participant) =>\n    (state.participantsUser = state.participantsUser.map(p =>\n      p.id === participant.id ? participant : p\n    )),\n  removeParticipantUser: (state, participantId) =>\n    (state.participantsUser = state.participantsUser.filter(\n      p => p.id !== participantId\n    ))\n};\n\nconst actions = {\n  async fetchParticipantEvent({ commit }) {\n    const response = await axios.get(`${apiUrl}/participants/event_excerpt/`);\n    commit('setParticipantsEvent', response.data);\n  },\n  async createParticipantEvent({ commit }, participant) {\n    console.log('createParticipantEvent', participant);\n    const response = await axios.post(`${apiUrl}/participants/event_excerpt/`, participant);\n    commit('appendParticipantEvent', response.data);\n  },\n  async updateParticipantEvent({ commit }, participant) {\n    const response = await axios.put(\n      `${apiUrl}/participants/event_excerpt/${participant.id}`,\n      participant\n    );\n    commit('updateParticipantEvent', response.data);\n  },\n  async deleteParticipantEvent({ commit }, participantId) {\n    const response = await axios.delete(\n      `${apiUrl}/participants/event_excerpt/${participantId}`\n    );\n    commit('removeParticipantEvent', response.data);\n  },\n  async fetchParticipantUser({ commit }) {\n    const response = await axios.get(`${apiUrl}/participants/user_excerpt/`);\n    commit('setParticipantsUser', response.data);\n  },\n  async createParticipantUser({ commit }, participant) {\n    console.log('createParticipantUser', participant);\n    const response = await axios.post(`${apiUrl}/participants/user_excerpt/`, participant);\n    commit('appendParticipantUser', response.data);\n  },\n  async updateParticipantUser({ commit }, participant) {\n    const response = await axios.put(\n      `${apiUrl}/participants/user_excerpt/${participant.id}`,\n      participant\n    );\n    commit('updateParticipantUser', response.data);\n  },\n  async deleteParticipantUser({ commit }, participantId) {\n    const response = await axios.delete(\n      `${apiUrl}/participants/user_excerpt/${participantId}`\n    );\n    commit('removeParticipantUser', response.data);\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};\n"]},"metadata":{},"sourceType":"module"}