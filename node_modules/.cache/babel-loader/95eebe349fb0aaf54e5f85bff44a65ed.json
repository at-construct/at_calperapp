{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios'; // import { serializeParticipant } from '../../functions/serializers';\n\nvar apiUrl = 'https://localhost:9292/';\nvar state = {\n  participantEvents: []\n};\nvar getters = {\n  participantEvents: function participantEvents(state) {\n    return state.participantEvents.map(function (participantEvent) {\n      return _objectSpread(_objectSpread({}, participantEvent), {}, {\n        start: new Date(participantEvent.start),\n        end: new Date(participantEvent.end)\n      });\n    });\n  }\n};\nvar mutations = {\n  setParticipantEvents: function setParticipantEvents(state, participantEvents) {\n    return state.participantEvents = participantEvents;\n  },\n  appendParticipantEvent: function appendParticipantEvent(state, participantEvent) {\n    return state.participantEvents = [].concat(_toConsumableArray(state.participantEvents), [participantEvent]);\n  },\n  ADD_PARTICIPANT_EVENT: function ADD_PARTICIPANT_EVENT(state, participantEvent) {\n    state.participantEvents.push(participantEvent);\n  },\n  REMOVE_PARTICIPANT_EVENT: function REMOVE_PARTICIPANT_EVENT(state, participantEventId) {\n    return state.participantEvents = state.participantEvents.filter(function (p) {\n      return p.id !== participantEventId;\n    });\n  },\n  updateParticipantEvent: function updateParticipantEvent(state, participantEvent) {\n    return state.participantEvents = state.participantEvents.map(function (p) {\n      return p.id === participantEvent.id ? participantEvent : p;\n    });\n  }\n};\nvar actions = {\n  fetchParticipantEvents: function fetchParticipantEvents(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return axios.get(\"\".concat(apiUrl, \"/participants/event_excerpt/\"));\n\n            case 3:\n              response = _context.sent;\n              commit('setParticipantEvents', response.data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  createParticipantEvent: function createParticipantEvent(_ref2, participantEvent) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              console.log('createParticipantEvent', participantEvent);\n              _context2.next = 4;\n              return axios.post(\"\".concat(apiUrl, \"/participants/event_excerpt/\"), participantEvent);\n\n            case 4:\n              response = _context2.sent;\n              commit('appendParticipantEvent', response.data);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  deleteParticipantEvent: function deleteParticipantEvent(_ref3, participantEventId) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              _context3.next = 3;\n              return axios[\"delete\"](\"\".concat(apiUrl, \"/participants/event_excerpt/\").concat(participantEventId));\n\n            case 3:\n              response = _context3.sent;\n              commit('removeParticipantEvent', response.data);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  updateParticipantEvent: function updateParticipantEvent(_ref4, participantEvent) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref4.commit;\n              _context4.next = 3;\n              return axios.put(\"\".concat(apiUrl, \"/participants/event_excerpt/\").concat(participantEvent.id), participantEvent);\n\n            case 3:\n              response = _context4.sent;\n              commit('updateParticipantEvent', response.data);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  },\n  addParticipantEvent: function addParticipantEvent(_ref5, _ref6) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var commit, eventId, userId, response, participantEvent;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref5.commit;\n              eventId = _ref6.eventId, userId = _ref6.userId;\n              _context5.next = 4;\n              return RailsAPI.addParticipant(eventId, userId);\n\n            case 4:\n              response = _context5.sent;\n              participantEvent = response.data;\n              commit('ADD_PARTICIPANT_EVENT', participantEvent);\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }))();\n  },\n  removeParticipantEvent: function removeParticipantEvent(_ref7, _ref8) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var commit, eventId, userId, response, participantEvent;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref7.commit;\n              eventId = _ref8.eventId, userId = _ref8.userId;\n              _context6.next = 4;\n              return RailsAPI.removeParticipant(eventId, userId);\n\n            case 4:\n              response = _context6.sent;\n              participantEvent = response.data;\n              commit('REMOVE_PARTICIPANT_EVENT', participantEvent.id);\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"sources":["/Users/aaattt/projects/CalRailsVueApp/app/javascript/store/modules/participants.js"],"names":["axios","apiUrl","state","participantEvents","getters","map","participantEvent","start","Date","end","mutations","setParticipantEvents","appendParticipantEvent","ADD_PARTICIPANT_EVENT","push","REMOVE_PARTICIPANT_EVENT","participantEventId","filter","p","id","updateParticipantEvent","actions","fetchParticipantEvents","commit","get","response","data","createParticipantEvent","console","log","post","deleteParticipantEvent","put","addParticipantEvent","eventId","userId","RailsAPI","addParticipant","removeParticipantEvent","removeParticipant","namespaced"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,IAAMC,MAAM,GAAG,yBAAf;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,iBAAiB,EAAE;AADP,CAAd;AAIA,IAAMC,OAAO,GAAG;AACdD,EAAAA,iBAAiB,EAAE,2BAACD,KAAD;AAAA,WAAWA,KAAK,CAACC,iBAAN,CAAwBE,GAAxB,CAA4B,UAAAC,gBAAgB,EAAI;AAC5E,6CACKA,gBADL;AAEEC,QAAAA,KAAK,EAAE,IAAIC,IAAJ,CAASF,gBAAgB,CAACC,KAA1B,CAFT;AAGEE,QAAAA,GAAG,EAAE,IAAID,IAAJ,CAASF,gBAAgB,CAACG,GAA1B;AAHP;AAKD,KAN6B,CAAX;AAAA;AADL,CAAhB;AAUA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,oBAAoB,EAAE,8BAACT,KAAD,EAAQC,iBAAR;AAAA,WAA+BD,KAAK,CAACC,iBAAN,GAA0BA,iBAAzD;AAAA,GADN;AAEhBS,EAAAA,sBAAsB,EAAE,gCAACV,KAAD,EAAQI,gBAAR;AAAA,WACrBJ,KAAK,CAACC,iBAAN,gCAA8BD,KAAK,CAACC,iBAApC,IAAuDG,gBAAvD,EADqB;AAAA,GAFR;AAIhBO,EAAAA,qBAJgB,iCAIMX,KAJN,EAIaI,gBAJb,EAI+B;AAC7CJ,IAAAA,KAAK,CAACC,iBAAN,CAAwBW,IAAxB,CAA6BR,gBAA7B;AACD,GANe;AAOhBS,EAAAA,wBAAwB,EAAE,kCAACb,KAAD,EAAQc,kBAAR;AAAA,WACvBd,KAAK,CAACC,iBAAN,GAA0BD,KAAK,CAACC,iBAAN,CAAwBc,MAAxB,CACzB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,EAAF,KAASH,kBAAb;AAAA,KADwB,CADH;AAAA,GAPV;AAWhBI,EAAAA,sBAAsB,EAAE,gCAAClB,KAAD,EAAQI,gBAAR;AAAA,WACrBJ,KAAK,CAACC,iBAAN,GAA0BD,KAAK,CAACC,iBAAN,CAAwBE,GAAxB,CAA4B,UAAAa,CAAC;AAAA,aACtDA,CAAC,CAACC,EAAF,KAASb,gBAAgB,CAACa,EAA1B,GAA+Bb,gBAA/B,GAAkDY,CADI;AAAA,KAA7B,CADL;AAAA;AAXR,CAAlB;AAiBA,IAAMG,OAAO,GAAG;AACRC,EAAAA,sBADQ,wCAC2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAVC,cAAAA,MAAU,QAAVA,MAAU;AAAA;AAAA,qBAChBvB,KAAK,CAACwB,GAAN,WAAavB,MAAb,kCADgB;;AAAA;AACjCwB,cAAAA,QADiC;AAEvCF,cAAAA,MAAM,CAAC,sBAAD,EAAyBE,QAAQ,CAACC,IAAlC,CAAN;;AAFuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGxC,GAJa;AAKRC,EAAAA,sBALQ,yCAK2BrB,gBAL3B,EAK6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BiB,cAAAA,MAA4B,SAA5BA,MAA4B;AACzDK,cAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCvB,gBAAtC;AADyD;AAAA,qBAElCN,KAAK,CAAC8B,IAAN,WAAc7B,MAAd,mCAAoDK,gBAApD,CAFkC;;AAAA;AAEnDmB,cAAAA,QAFmD;AAGzDF,cAAAA,MAAM,CAAC,wBAAD,EAA2BE,QAAQ,CAACC,IAApC,CAAN;;AAHyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI1D,GATa;AAURK,EAAAA,sBAVQ,yCAU2Bf,kBAV3B,EAU+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA9BO,cAAAA,MAA8B,SAA9BA,MAA8B;AAAA;AAAA,qBACpCvB,KAAK,UAAL,WAClBC,MADkB,yCACmBe,kBADnB,EADoC;;AAAA;AACrDS,cAAAA,QADqD;AAI3DF,cAAAA,MAAM,CAAC,wBAAD,EAA2BE,QAAQ,CAACC,IAApC,CAAN;;AAJ2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK5D,GAfa;AAgBRN,EAAAA,sBAhBQ,yCAgB2Bd,gBAhB3B,EAgB6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA5BiB,cAAAA,MAA4B,SAA5BA,MAA4B;AAAA;AAAA,qBAClCvB,KAAK,CAACgC,GAAN,WAClB/B,MADkB,yCACmBK,gBAAgB,CAACa,EADpC,GAErBb,gBAFqB,CADkC;;AAAA;AACnDmB,cAAAA,QADmD;AAKzDF,cAAAA,MAAM,CAAC,wBAAD,EAA2BE,QAAQ,CAACC,IAApC,CAAN;;AALyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM1D,GAtBa;AAuBRO,EAAAA,mBAvBQ,6CAuB6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA/BV,cAAAA,MAA+B,SAA/BA,MAA+B;AAAnBW,cAAAA,OAAmB,SAAnBA,OAAmB,EAAVC,MAAU,SAAVA,MAAU;AAAA;AAAA,qBAClCC,QAAQ,CAACC,cAAT,CAAwBH,OAAxB,EAAiCC,MAAjC,CADkC;;AAAA;AACnDV,cAAAA,QADmD;AAEnDnB,cAAAA,gBAFmD,GAEhCmB,QAAQ,CAACC,IAFuB;AAGzDH,cAAAA,MAAM,CAAC,uBAAD,EAA0BjB,gBAA1B,CAAN;;AAHyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI1D,GA3Ba;AA4BRgC,EAAAA,sBA5BQ,gDA4BgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA/Bf,cAAAA,MAA+B,SAA/BA,MAA+B;AAAnBW,cAAAA,OAAmB,SAAnBA,OAAmB,EAAVC,MAAU,SAAVA,MAAU;AAAA;AAAA,qBACrCC,QAAQ,CAACG,iBAAT,CAA2BL,OAA3B,EAAoCC,MAApC,CADqC;;AAAA;AACtDV,cAAAA,QADsD;AAEtDnB,cAAAA,gBAFsD,GAEnCmB,QAAQ,CAACC,IAF0B;AAG5DH,cAAAA,MAAM,CAAC,0BAAD,EAA6BjB,gBAAgB,CAACa,EAA9C,CAAN;;AAH4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI7D;AAhCa,CAAhB;AAmCA,eAAe;AACbqB,EAAAA,UAAU,EAAE,IADC;AAEbtC,EAAAA,KAAK,EAALA,KAFa;AAGbE,EAAAA,OAAO,EAAPA,OAHa;AAIbM,EAAAA,SAAS,EAATA,SAJa;AAKbW,EAAAA,OAAO,EAAPA;AALa,CAAf","sourcesContent":["import axios from 'axios';\n// import { serializeParticipant } from '../../functions/serializers';\nconst apiUrl = 'https://localhost:9292/';\n\nconst state = {\n  participantEvents: [],\n};\n\nconst getters = {\n  participantEvents: (state) => state.participantEvents.map(participantEvent => {\n    return {\n      ...participantEvent,\n      start: new Date(participantEvent.start),\n      end: new Date(participantEvent.end)\n    };\n  }),\n};\n\nconst mutations = {\n  setParticipantEvents: (state, participantEvents) => (state.participantEvents = participantEvents),\n  appendParticipantEvent: (state, participantEvent) =>\n    (state.participantEvents = [...state.participantEvents, participantEvent]),\n  ADD_PARTICIPANT_EVENT(state, participantEvent) {\n    state.participantEvents.push(participantEvent);\n  },\n  REMOVE_PARTICIPANT_EVENT: (state, participantEventId) =>\n    (state.participantEvents = state.participantEvents.filter(\n      p => p.id !== participantEventId\n    )),\n  updateParticipantEvent: (state, participantEvent) =>\n    (state.participantEvents = state.participantEvents.map(p =>\n      p.id === participantEvent.id ? participantEvent : p\n    ))\n};\n\nconst actions = {\n  async fetchParticipantEvents({ commit }) {\n    const response = await axios.get(`${apiUrl}/participants/event_excerpt/`);\n    commit('setParticipantEvents', response.data);\n  },\n  async createParticipantEvent({ commit }, participantEvent) {\n    console.log('createParticipantEvent', participantEvent);\n    const response = await axios.post(`${apiUrl}/participants/event_excerpt/`, participantEvent);\n    commit('appendParticipantEvent', response.data);\n  },\n  async deleteParticipantEvent({ commit }, participantEventId) {\n    const response = await axios.delete(\n      `${apiUrl}/participants/event_excerpt/${participantEventId}`\n    );\n    commit('removeParticipantEvent', response.data);\n  },\n  async updateParticipantEvent({ commit }, participantEvent) {\n    const response = await axios.put(\n      `${apiUrl}/participants/event_excerpt/${participantEvent.id}`,\n      participantEvent\n    );\n    commit('updateParticipantEvent', response.data);\n  },\n  async addParticipantEvent({ commit }, { eventId, userId }) {\n    const response = await RailsAPI.addParticipant(eventId, userId);\n    const participantEvent = response.data;\n    commit('ADD_PARTICIPANT_EVENT', participantEvent);\n  },\n  async removeParticipantEvent({ commit }, { eventId, userId }) {\n    const response = await RailsAPI.removeParticipant(eventId, userId);\n    const participantEvent = response.data;\n    commit('REMOVE_PARTICIPANT_EVENT', participantEvent.id);\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};\n"]},"metadata":{},"sourceType":"module"}