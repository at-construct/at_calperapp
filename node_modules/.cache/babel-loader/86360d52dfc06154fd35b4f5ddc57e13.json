{"ast":null,"code":"var _objectSpread2;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { format } from 'date-fns';\nimport { mapActions, mapGetters } from 'vuex';\nimport CalendarFormDialog from './CalendarFormDialog';\nimport OtherCalendar from './OtherCalendar';\nimport DayEventList from '../events/DayEventList';\nexport default {\n  name: 'CalendarList',\n  components: {\n    CalendarFormDialog: CalendarFormDialog,\n    OtherCalendar: OtherCalendar\n  },\n  data: function data() {\n    return {\n      selectedItem: [],\n      selectedGroups: [],\n      isCalendarDialogOpen: false,\n      selectedCalendar: null,\n      // events:[],\n      value: format(new Date(), 'yyyy/MM/dd'),\n      DayEventList: DayEventList\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, mapGetters('calendars', ['calendars', 'calendar'])), mapGetters('groups', ['groups'])), mapGetters('users', ['users'])), mapGetters('events', ['events', 'clickedDate'])), {}, {\n    filteredCalendars: function filteredCalendars() {\n      return this.calendars.filter(function (calendar) {\n        return calendar.name !== '会議室' && calendar.name !== '社用車' && calendar.name !== 'スタジオ';\n      });\n    },\n    facilityCalendar: function facilityCalendar() {\n      return this.calendars.filter(function (calendar) {\n        return calendar.name === '会議室' || calendar.name === '社用車' || calendar.name === 'スタジオ';\n      });\n    },\n    title: function title() {\n      return format(new Date(this.value), 'yyyy年 M月');\n    }\n  }),\n  created: function created() {\n    this.fetchCalendars();\n    this.fetchGroups();\n    this.fetchUsers();\n  },\n  methods: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, mapActions('calendars', ['fetchCalendars', 'updateCalendar', 'deleteCalendar', 'setCalendar'])), mapActions('groups', ['fetchGroups', 'updateGroup', 'deleteGroup', 'setGroup'])), mapActions('users', ['fetchUsers', 'updateUser', 'deleteUser', 'setUser'])), mapActions('events', ['fetchEvents', 'setClickedDate'])), {}, (_objectSpread2 = {\n    initCalendar: function initCalendar() {\n      this.setCalendar({\n        name: '',\n        visibility: true\n      });\n    },\n    closeDialog: function closeDialog() {\n      this.setCalendar(null);\n    },\n    edit: function edit(calendar) {\n      this.setCalendar(calendar);\n    },\n    del: function del(calendar) {\n      this.deleteCalendar(calendar.id);\n    },\n    toggleVisibility: function toggleVisibility(calendar) {\n      this.updateCalendar(calendar);\n    },\n    updateSelection: function updateSelection(selected) {\n      this.selectedGroups = selected.slice(-1);\n    },\n    openCalendarDialog: function openCalendarDialog(group) {\n      this.selectedCalendar = group.calendar; // 選択したグループに対応するカレンダーを設定\n\n      this.isCalendarDialogOpen = true; // ダイアログを開く\n    }\n  }, _defineProperty(_objectSpread2, \"closeDialog\", function closeDialog() {\n    this.isCalendarDialogOpen = false;\n    this.selectedCalendar = null;\n  }), _defineProperty(_objectSpread2, \"changeColor\", function changeColor() {\n    var _this = this;\n\n    setTimeout(function () {\n      var dayList = Array.from(_this.$refs.calendar.$vnode.elm.getElementsByClassName('v-calendar-weekly__week'));\n      dayList.map(function (el) {\n        el.children[0].classList.add('sunday');\n        el.children[6].classList.add('saturday');\n      });\n    });\n  }), _defineProperty(_objectSpread2, \"setToday\", function setToday() {\n    this.value = format(new Date(), 'yyyy/MM/dd');\n  }), _defineProperty(_objectSpread2, \"showDayEvents\", function showDayEvents(_ref) {\n    var date = _ref.date;\n    date = date.replace(/-/g, '/');\n    this.setClickedDate(date);\n  }), _objectSpread2))\n};","map":{"version":3,"sources":["CalendarList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-list dense>\n    <hr>\n    <!-- 設備以外のカレンダーリストを表示する -->\n    <v-list-item-group :value=\"selectedItem\">\n      <v-list-group v-for=\"calendar in filteredCalendars\" :key=\"calendar.id\" class=\"mb-3\">\n        <template v-slot:activator>\n          <v-list-item-title style=\"overflow: visible;\">\n            <v-icon :color=\"calendar.color\" class=\"mr-2\" small>mdi-square</v-icon>\n              <span style=\"font-size: 16px;\">{{ calendar.name }}</span>\n            <!-- <v-btn icon @click=\"edit(calendar)\">\n              <v-menu transition=\"scale-transition\" offset-y min-width=\"100px\">\n                <template v-slot:activator=\"{ on }\">\n                  <v-btn icon v-on=\"on\">\n                    <v-icon size=\"12px\">mdi-pencil</v-icon>\n                  </v-btn>\n                </template>\n                <v-list>\n                  <v-list-item @click=\"edit(calendar)\">編集</v-list-item>\n                  <v-list-item @click=\"del(calendar)\">削除</v-list-item>\n                </v-list>\n              </v-menu>\n            </v-btn> -->\n          </v-list-item-title>\n        </template>\n\n        <v-list-item-group>\n          <v-list-item v-for=\"group in groups.filter(group => group.calendar.id === calendar.id)\" :key=\"group.id\">\n            <v-list-item-content class=\"py-0\">\n              <div class=\"d-flex align-center justify-space-between\">\n                <span :color=\"calendar.color\" class=\"pb-2\">\n                  {{ group.user.name }}\n                </span>\n                <v-icon \n                  small \n                  @click=\"openCalendarDialog(group)\" \n                >\n                  mdi-calendar\n                </v-icon>\n              </div>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list-item-group>\n\n      </v-list-group>\n    </v-list-item-group>\n\n    <hr>\n    <!-- 設備カレンダーを表示する -->\n    <v-list-item-group :value=\"selectedItem\"></v-list-item-group>\n      <v-list-group :value=\"false\" v-for=\"calendar in facilityCalendar\" :key=\"calendar.id\">\n        <template v-slot:activator>\n          <v-list-item-title style=\"overflow: visible;\">\n            <v-icon :color=\"calendar.color\" class=\"mr-2\" small>mdi-square</v-icon>\n            <span style=\"font-size: 16px;\">{{ calendar.name }}</span>\n            <!-- <v-btn icon @click=\"edit(calendar)\">\n              <v-menu transition=\"scale-transition\" offset-y min-width=\"100px\">\n                <template v-slot:activator=\"{ on }\">\n                  <v-btn icon v-on=\"on\">\n                    <v-icon size=\"12px\">mdi-pencil</v-icon>\n                  </v-btn>\n                </template>\n                <v-list>\n                  <v-list-item @click=\"edit(calendar)\">編集</v-list-item>\n                  <v-list-item @click=\"del(calendar)\">削除</v-list-item>\n                </v-list>\n              </v-menu>\n            </v-btn> -->\n          </v-list-item-title>\n        </template>\n  \n        <v-list-item-group>\n          <v-list-item v-for=\"group in groups.filter(group => group.calendar.id === calendar.id)\" :key=\"group.id\">\n            <v-list-item-content class=\"py-0\">\n              <div class=\"d-flex align-center justify-space-between\">\n                <span :color=\"calendar.color\" class=\"pb-2\">\n                  {{ group.user.name }}\n                </span>\n                <v-icon \n                  small \n                  @click=\"openCalendarDialog(group)\" \n                >\n                  mdi-calendar\n                </v-icon>\n              </div>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list-item-group>\n      </v-list-group>\n  \n      <v-list-item>\n        <v-list-item-content>\n          <v-subheader style=\"font-size: 14px;\">リストを追加</v-subheader>\n        </v-list-item-content>\n        <v-list-item-action>\n          <v-btn icon @click=\"initCalendar\">\n            <v-icon size=\"16px\">mdi-plus</v-icon>\n          </v-btn>\n        </v-list-item-action>\n      </v-list-item>\n        <v-dialog\n          v-model=\"isCalendarDialogOpen\"\n          fullscreen\n          hide-overlay\n          scrollable\n        >\n          <OtherCalendar />\n        </v-dialog>\n\n      <!-- <template>\n        カレンダーの編集ダイアログ\n        <v-dialog\n          :value=\"calendar !== null\"\n          @click:outside=\"closeDialog\"\n          width=\"600\"\n        >\n          <CalendarFormDialog v-if=\"calendar !== null\" />\n        </v-dialog>\n      </template> -->\n\n    <!-- 日付クリック時のイベント一覧ダイアログ -->\n      <v-dialog\n          :value=\"clickedDate !== null\"\n          persistent\n          max-width=\"800\"\n          max-high=\"800\"\n        >\n          <DayEventList />\n      </v-dialog>\n  </v-list>\n</template>\n\n\n<script>\nimport { format } from 'date-fns';\nimport { mapActions, mapGetters } from 'vuex';\nimport CalendarFormDialog from './CalendarFormDialog';\nimport OtherCalendar from './OtherCalendar';\nimport DayEventList from '../events/DayEventList';\n\n\nexport default {\n  name: 'CalendarList',\n  components: { CalendarFormDialog, OtherCalendar },\n  data() {\n    return {\n      selectedItem: [],\n      selectedGroups: [],\n      isCalendarDialogOpen: false,\n      selectedCalendar: null,\n      // events:[],\n      value: format(new Date(), 'yyyy/MM/dd'),\n      DayEventList,\n    }\n  },\n  computed: {\n    ...mapGetters('calendars', ['calendars', 'calendar']),\n    ...mapGetters('groups', ['groups']),\n    ...mapGetters('users', ['users']),\n    ...mapGetters('events', ['events','clickedDate']),\n    filteredCalendars() {\n      return this.calendars.filter(calendar => calendar.name !== '会議室' && calendar.name !== '社用車' && calendar.name !== 'スタジオ');\n    },\n    facilityCalendar() {\n      return this.calendars.filter(calendar => calendar.name === '会議室' || calendar.name === '社用車' || calendar.name === 'スタジオ');\n    },\n    title() {\n      return format(new Date(this.value), 'yyyy年 M月');\n    },\n  },\n  created() {\n    this.fetchCalendars();\n    this.fetchGroups();\n    this.fetchUsers();\n  },\n  methods: {\n    ...mapActions('calendars', [\n      'fetchCalendars',\n      'updateCalendar',\n      'deleteCalendar',\n      'setCalendar'\n    ]),\n    ...mapActions('groups', [\n      'fetchGroups',\n      'updateGroup',\n      'deleteGroup',\n      'setGroup'\n    ]),\n    ...mapActions('users', [\n      'fetchUsers',\n      'updateUser',\n      'deleteUser',\n      'setUser'\n    ]),\n    ...mapActions('events', [\n      'fetchEvents',\n      'setClickedDate'\n    ]),\n    initCalendar() {\n      this.setCalendar({\n        name: '',\n        visibility: true\n      });\n    },\n    closeDialog() {\n      this.setCalendar(null);\n    },\n    edit(calendar) {\n      this.setCalendar(calendar);\n    },\n    del(calendar) {\n      this.deleteCalendar(calendar.id);\n    },\n    toggleVisibility(calendar) {\n      this.updateCalendar(calendar);\n    },\n    updateSelection(selected) {\n      this.selectedGroups = selected.slice(-1);\n    },\n    openCalendarDialog(group) {\n      this.selectedCalendar = group.calendar;  // 選択したグループに対応するカレンダーを設定\n      this.isCalendarDialogOpen = true;  // ダイアログを開く\n    },\n    closeDialog() {\n      this.isCalendarDialogOpen = false;\n      this.selectedCalendar = null;\n    },\n    changeColor: function() {\n      setTimeout(() => {\n        const dayList = Array.from(\n          this.$refs.calendar.$vnode.elm.getElementsByClassName(\n            'v-calendar-weekly__week'\n          )\n        );\n        dayList.map(el => {\n          el.children[0].classList.add('sunday');\n          el.children[6].classList.add('saturday');\n        });\n      },);\n    },\n    setToday() {\n      this.value = format(new Date(), 'yyyy/MM/dd');\n    },\n    showDayEvents({ date }) {\n      date = date.replace(/-/g, '/');\n      this.setClickedDate(date);\n    },\n  }\n};\n</script>\n\n<style>\n.saturday {\n  background: rgba(200, 200, 250, 0.2);\n}\n.sunday {\n  background: rgba(250, 200, 200, 0.2);\n}\n</style>"],"sourceRoot":"app/javascript/components/calendars"},"metadata":{},"sourceType":"module"}