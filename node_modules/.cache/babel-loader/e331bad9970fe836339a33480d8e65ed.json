{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios'; // import { serializeParticipant } from '../../functions/serializers';\n\nvar apiUrl = 'https://localhost:9292/';\nvar state = {\n  participants: [],\n  events: []\n};\nvar getters = {\n  participants: function participants(state) {\n    return state.participants.map(function (participant) {\n      return _objectSpread(_objectSpread({}, participant), {}, {\n        start: new Date(participant.event.start),\n        end: new Date(participant.event.end)\n      });\n    });\n  },\n  events: function events(state) {\n    return state.events.map(function (event) {\n      return _objectSpread(_objectSpread({}, event), {}, {\n        start: new Date(event.start),\n        end: new Date(event.end)\n      });\n    });\n  }\n};\nvar mutations = {\n  setParticipants: function setParticipants(state, participants) {\n    return state.participants = participants;\n  },\n  appendParticipant: function appendParticipant(state, participant) {\n    return state.participants = [].concat(_toConsumableArray(state.participants), [participant]);\n  },\n  removeParticipant: function removeParticipant(state, participant) {\n    return state.participants = state.participants.filter(function (p) {\n      return p.id !== participant.id;\n    });\n  },\n  updateParticipant: function updateParticipant(state, participant) {\n    return state.participants = state.participants.map(function (p) {\n      return p.id === participant.id ? participant : p;\n    });\n  }\n};\nvar actions = {\n  fetchParticipants: function fetchParticipants(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return axios.get(\"\".concat(apiUrl, \"/participants\"));\n\n            case 3:\n              response = _context.sent;\n              commit('setParticipants', response.data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  createParticipant: function createParticipant(_ref2, participant) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              console.log('createParticipant', participant);\n              _context2.next = 4;\n              return axios.post(\"\".concat(apiUrl, \"/participants\"), participant);\n\n            case 4:\n              response = _context2.sent;\n              commit('appendParticipant', response.data);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  deleteParticipant: function deleteParticipant(_ref3, participantId) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              _context3.next = 3;\n              return axios[\"delete\"](\"\".concat(apiUrl, \"/participants/\").concat(participantId));\n\n            case 3:\n              response = _context3.sent;\n              commit('removeParticipant', response.data);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  updateParticipant: function updateParticipant(_ref4, participant) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref4.commit;\n              _context4.next = 3;\n              return axios.put(\"\".concat(apiUrl, \"/participants/\").concat(participant.id), participant);\n\n            case 3:\n              response = _context4.sent;\n              commit('updateParticipant', response.data);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"sources":["/Users/aaattt/projects/CalRailsVueApp/app/javascript/store/modules/participants.js"],"names":["axios","apiUrl","state","participants","events","getters","map","participant","start","Date","event","end","mutations","setParticipants","appendParticipant","removeParticipant","filter","p","id","updateParticipant","actions","fetchParticipants","commit","get","response","data","createParticipant","console","log","post","deleteParticipant","participantId","put","namespaced"],"mappings":"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","sourcesContent":["import axios from 'axios';\n// import { serializeParticipant } from '../../functions/serializers';\n\nconst apiUrl = 'https://localhost:9292/';\n\nconst state = {\n  participants: [],\n  events: []\n};\n\nconst getters = {\n  participants: state => state.participants.map(participant => {\n    return {\n      ...participant,\n      start: new Date(participant.event.start),\n      end: new Date(participant.event.end)\n    };\n  }),\n\n  events: state => state.events.map(event => {\n    return {\n      ...event,\n      start: new Date(event.start),\n      end: new Date(event.end)\n    };\n  })\n};\n\nconst mutations = {\n  setParticipants: (state, participants) => (state.participants = participants),\n  appendParticipant: (state, participant) =>\n    (state.participants = [...state.participants, participant]),\n  removeParticipant: (state, participant) =>\n    (state.participants = state.participants.filter(\n      p => p.id !== participant.id\n    )),\n  updateParticipant: (state, participant) =>\n    (state.participants = state.participants.map(p =>\n      p.id === participant.id ? participant : p\n    ))\n};\n\nconst actions = {\n  async fetchParticipants({ commit }) {\n    const response = await axios.get(`${apiUrl}/participants`);\n    commit('setParticipants', response.data);\n  },\n  async createParticipant({ commit }, participant) {\n    console.log('createParticipant', participant);\n    const response = await axios.post(`${apiUrl}/participants`, participant);\n    commit('appendParticipant', response.data);\n  },\n  async deleteParticipant({ commit }, participantId) {\n    const response = await axios.delete(\n      `${apiUrl}/participants/${participantId}`\n    );\n    commit('removeParticipant', response.data);\n  },\n  async updateParticipant({ commit }, participant) {\n    const response = await axios.put(\n      `${apiUrl}/participants/${participant.id}`,\n      participant\n    );\n    commit('updateParticipant', response.data);\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};\n"]},"metadata":{},"sourceType":"module"}