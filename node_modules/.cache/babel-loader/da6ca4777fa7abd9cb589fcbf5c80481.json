{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions, mapGetters } from 'vuex';\nexport default {\n  name: 'facillitiesForm',\n  props: ['value'],\n  data: function data() {\n    return {\n      selectedUser: null\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters('users', ['users'])), {}, {\n    filteredUsers: function filteredUsers() {\n      var allowedUserNames = ['6F会議室(ソファー)', '7Fテーブル']; // 選択可能なユーザーの名前\n\n      return this.users.filter(function (user) {\n        return allowedUserNames.includes(user.name);\n      });\n    }\n  }),\n  methods: {\n    filterUsers: function filterUsers(item, queryText, itemText) {\n      var allowedUserNames = ['6F会議室(ソファー)', '7Fテーブル'];\n      return itemText.toLowerCase().indexOf(queryText.toLowerCase()) > -1 && allowedUserNames.includes(itemText);\n    },\n    onInput: function onInput(value) {\n      // 単一の選択肢が選ばれると、その選択肢のIDを配列として親コンポーネントに渡す\n      this.$emit('input', [value]);\n    }\n  }\n};","map":{"version":3,"sources":["FacillitiesForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;AAEA,EAAA,KAAA,EAAA,CAAA,OAAA,CAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,YAAA,EAAA;AADA,KAAA;AAGA,GAPA;AAQA,EAAA,QAAA,kCACA,UAAA,CAAA,OAAA,EAAA,CAAA,OAAA,CAAA,CADA;AAEA,IAAA,aAFA,2BAEA;AACA,UAAA,gBAAA,GAAA,CAAA,aAAA,EAAA,QAAA,CAAA,CADA,CACA;;AACA,aAAA,KAAA,KAAA,CAAA,MAAA,CAAA,UAAA,IAAA;AAAA,eAAA,gBAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AAAA,OAAA,CAAA;AACA;AALA,IARA;AAeA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,uBACA,IADA,EACA,SADA,EACA,QADA,EACA;AACA,UAAA,gBAAA,GAAA,CAAA,aAAA,EAAA,QAAA,CAAA;AACA,aAAA,QAAA,CAAA,WAAA,GAAA,OAAA,CAAA,SAAA,CAAA,WAAA,EAAA,IAAA,CAAA,CAAA,IAAA,gBAAA,CAAA,QAAA,CAAA,QAAA,CAAA;AACA,KAJA;AAKA,IAAA,OALA,mBAKA,KALA,EAKA;AACA;AACA,WAAA,KAAA,CAAA,OAAA,EAAA,CAAA,KAAA,CAAA;AACA;AARA;AAfA,CAAA","sourcesContent":["<template>\n  <v-container fluid>\n    <v-row align=\"center\">\n      <v-col cols=\"12\" md=\"6\">\n          <v-autocomplete\n            small-chips\n            clearable\n            color=\"grey\"\n            label=\"設備を選択\"\n            item-text=\"name\"\n            item-value=\"id\"\n            :value=\"value\"\n            :items=\"filteredUsers\"\n            @input=\"onInput\"\n            :filter=\"(item, queryText, itemText) => filterUsers(item, queryText, itemText)\"\n          >\n          <template v-slot:item=\"{ item }\">\n            <div class=\"my-2\" :class=\"{ 'text-lg': $vuetify.breakpoint.smAndDown, 'text-xl': $vuetify.breakpoint.mdAndUp }\">{{ item.name }}</div>\n          </template>\n        </v-autocomplete>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n<script>\nimport { mapActions, mapGetters } from 'vuex';\n\nexport default {\n  name: 'facillitiesForm',\n  props: ['value'],\n  data() {\n    return {\n      selectedUser: null,\n    };\n  },\n  computed: {\n    ...mapGetters('users', ['users']),\n    filteredUsers() {\n      const allowedUserNames = ['6F会議室(ソファー)', '7Fテーブル']; // 選択可能なユーザーの名前\n      return this.users.filter(user => allowedUserNames.includes(user.name));\n    },\n  },\n  methods: {\n    filterUsers(item, queryText, itemText) {\n      const allowedUserNames = ['6F会議室(ソファー)', '7Fテーブル'];\n      return itemText.toLowerCase().indexOf(queryText.toLowerCase()) > -1 && allowedUserNames.includes(itemText);\n    },\n    onInput(value) {\n      // 単一の選択肢が選ばれると、その選択肢のIDを配列として親コンポーネントに渡す\n      this.$emit('input', [value]);\n    },\n  },\n};\n</script>"],"sourceRoot":"app/javascript/components/forms"},"metadata":{},"sourceType":"module"}