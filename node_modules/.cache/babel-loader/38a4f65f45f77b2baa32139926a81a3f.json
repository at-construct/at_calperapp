{"ast":null,"code":"function _slicedToArray2(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { J as isObjectLike_1, K as _baseGetTag, b as isArray_1, L as isSymbol_1, M as isObject_1, N as _baseSet, a as _baseIteratee, O as _baseForOwn, P as _baseAssignValue, c as _arrayMap, Q as _getTag, R as _mapToArray, S as keys_1, j as _createClass, n as _objectSpread2, w as isObject, A as hasAny, T as defaults_1, z as _slicedToArray, h as has, k as _classCallCheck, f as isFunction_1, d as isArrayLikeObject_1, U as mixinOptionalProps, l as arrayHasItems, v as isDate, V as pick_1, W as pad, x as addPages, e as defaultsDeep_1, o as createGuid, X as some, g as get_1 } from './helpers-8d5d752d.js';\nimport { reactive, computed } from 'vue';\n\nfunction toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n\nfunction requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\n\nfunction toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\n\nfunction addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}\n/** `Object#toString` result references. */\n\n\nvar numberTag = '[object Number]';\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\n\nfunction isNumber(value) {\n  return typeof value == 'number' || isObjectLike_1(value) && _baseGetTag(value) == numberTag;\n}\n\nvar isNumber_1 = isNumber;\n/** `Object#toString` result references. */\n\nvar stringTag = '[object String]';\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\n\nfunction isString(value) {\n  return typeof value == 'string' || !isArray_1(value) && isObjectLike_1(value) && _baseGetTag(value) == stringTag;\n}\n\nvar isString_1 = isString;\n/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\n\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nvar isUndefined_1 = isUndefined;\n/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\n\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n\n  return number;\n}\n\nvar _baseClamp = baseClamp;\n/** Used as references for various `Number` constants. */\n\nvar NAN = 0 / 0;\n/** Used to match leading and trailing whitespace. */\n\nvar reTrim = /^\\s+|\\s+$/g;\n/** Used to detect bad signed hexadecimal string values. */\n\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n/** Used to detect binary string values. */\n\nvar reIsBinary = /^0b[01]+$/i;\n/** Used to detect octal string values. */\n\nvar reIsOctal = /^0o[0-7]+$/i;\n/** Built-in method references without a dependency on `root`. */\n\nvar freeParseInt = parseInt;\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\n\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n\n  if (isSymbol_1(value)) {\n    return NAN;\n  }\n\n  if (isObject_1(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject_1(other) ? other + '' : other;\n  }\n\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n}\n\nvar toNumber_1 = toNumber;\n/**\n * Clamps `number` within the inclusive `lower` and `upper` bounds.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Number\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n * @example\n *\n * _.clamp(-10, -5, 5);\n * // => -5\n *\n * _.clamp(10, -5, 5);\n * // => 5\n */\n\nfunction clamp(number, lower, upper) {\n  if (upper === undefined) {\n    upper = lower;\n    lower = undefined;\n  }\n\n  if (upper !== undefined) {\n    upper = toNumber_1(upper);\n    upper = upper === upper ? upper : 0;\n  }\n\n  if (lower !== undefined) {\n    lower = toNumber_1(lower);\n    lower = lower === lower ? lower : 0;\n  }\n\n  return _baseClamp(toNumber_1(number), lower, upper);\n}\n\nvar clamp_1 = clamp;\n/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\n\nfunction set(object, path, value) {\n  return object == null ? object : _baseSet(object, path, value);\n}\n\nvar set_1 = set;\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\n\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = _baseIteratee(iteratee);\n\n  _baseForOwn(object, function (value, key, object) {\n    _baseAssignValue(result, key, iteratee(value, key, object));\n  });\n\n  return result;\n}\n\nvar mapValues_1 = mapValues;\n/**\n * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n * of key-value pairs for `object` corresponding to the property names of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the key-value pairs.\n */\n\nfunction baseToPairs(object, props) {\n  return _arrayMap(props, function (key) {\n    return [key, object[key]];\n  });\n}\n\nvar _baseToPairs = baseToPairs;\n/**\n * Converts `set` to its value-value pairs.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the value-value pairs.\n */\n\nfunction setToPairs(set) {\n  var index = -1,\n      result = Array(set.size);\n  set.forEach(function (value) {\n    result[++index] = [value, value];\n  });\n  return result;\n}\n\nvar _setToPairs = setToPairs;\n/** `Object#toString` result references. */\n\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n/**\n * Creates a `_.toPairs` or `_.toPairsIn` function.\n *\n * @private\n * @param {Function} keysFunc The function to get the keys of a given object.\n * @returns {Function} Returns the new pairs function.\n */\n\nfunction createToPairs(keysFunc) {\n  return function (object) {\n    var tag = _getTag(object);\n\n    if (tag == mapTag) {\n      return _mapToArray(object);\n    }\n\n    if (tag == setTag) {\n      return _setToPairs(object);\n    }\n\n    return _baseToPairs(object, keysFunc(object));\n  };\n}\n\nvar _createToPairs = createToPairs;\n/**\n * Creates an array of own enumerable string keyed-value pairs for `object`\n * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n * entries are returned.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias entries\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the key-value pairs.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.toPairs(new Foo);\n * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n */\n\nvar toPairs = _createToPairs(keys_1);\n\nvar toPairs_1 = toPairs;\nvar childMixin = {\n  inject: ['sharedState'],\n  computed: {\n    masks: function masks() {\n      return this.sharedState.masks;\n    },\n    theme: function theme() {\n      return this.sharedState.theme;\n    },\n    locale: function locale() {\n      return this.sharedState.locale;\n    },\n    dayPopoverId: function dayPopoverId() {\n      return this.sharedState.dayPopoverId;\n    }\n  },\n  methods: {\n    format: function format(date, mask) {\n      return this.locale.format(date, mask);\n    },\n    pageForDate: function pageForDate(date) {\n      return this.locale.getDateParts(this.locale.normalizeDate(date));\n    }\n  }\n};\nvar targetProps = ['base', 'start', 'end', 'startEnd'];\nvar displayProps = ['class', 'contentClass', 'style', 'contentStyle', 'color', 'fillMode'];\nvar defConfig = {\n  color: 'blue',\n  isDark: false,\n  highlight: {\n    base: {\n      fillMode: 'light'\n    },\n    start: {\n      fillMode: 'solid'\n    },\n    end: {\n      fillMode: 'solid'\n    }\n  },\n  dot: {\n    base: {\n      fillMode: 'solid'\n    },\n    start: {\n      fillMode: 'solid'\n    },\n    end: {\n      fillMode: 'solid'\n    }\n  },\n  bar: {\n    base: {\n      fillMode: 'solid'\n    },\n    start: {\n      fillMode: 'solid'\n    },\n    end: {\n      fillMode: 'solid'\n    }\n  },\n  content: {\n    base: {},\n    start: {},\n    end: {}\n  }\n};\n\nvar Theme = /*#__PURE__*/function () {\n  function Theme(config) {\n    _classCallCheck(this, Theme);\n\n    Object.assign(this, defConfig, config);\n  } // Normalizes attribute config to the structure defined by the properties\n\n\n  _createClass(Theme, [{\n    key: \"normalizeAttr\",\n    value: function normalizeAttr(_ref) {\n      var config = _ref.config,\n          type = _ref.type;\n      var rootColor = this.color;\n      var root = {}; // Get the normalized root config\n\n      var normAttr = this[type];\n\n      if (config === true || isString_1(config)) {\n        // Assign default color for booleans or strings\n        rootColor = isString_1(config) ? config : rootColor; // Set the default root\n\n        root = _objectSpread2({}, normAttr);\n      } else if (isObject(config)) {\n        if (hasAny(config, targetProps)) {\n          // Mixin target configs\n          root = _objectSpread2({}, config);\n        } else {\n          // Mixin display configs\n          root = {\n            base: _objectSpread2({}, config),\n            start: _objectSpread2({}, config),\n            end: _objectSpread2({}, config)\n          };\n        }\n      } else {\n        return null;\n      } // Fill in missing targets\n\n\n      defaults_1(root, {\n        start: root.startEnd,\n        end: root.startEnd\n      }, normAttr); // Normalize each target\n\n      toPairs_1(root).forEach(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n            targetType = _ref3[0],\n            targetConfig = _ref3[1];\n\n        var targetColor = rootColor;\n\n        if (targetConfig === true || isString_1(targetConfig)) {\n          targetColor = isString_1(targetConfig) ? targetConfig : targetColor;\n          root[targetType] = {\n            color: targetColor\n          };\n        } else if (isObject(targetConfig)) {\n          if (hasAny(targetConfig, displayProps)) {\n            root[targetType] = _objectSpread2({}, targetConfig);\n          } else {\n            root[targetType] = {};\n          }\n        } // Set the theme color if it is missing\n\n\n        if (!has(root, \"\".concat(targetType, \".color\"))) {\n          set_1(root, \"\".concat(targetType, \".color\"), targetColor);\n        }\n      });\n      return root;\n    }\n  }, {\n    key: \"normalizeHighlight\",\n    value: function normalizeHighlight(config) {\n      var _this = this;\n\n      var highlight = this.normalizeAttr({\n        config: config,\n        type: 'highlight'\n      }); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n      toPairs_1(highlight).forEach(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n            _ = _ref5[0],\n            targetConfig = _ref5[1];\n\n        var c = defaults_1(targetConfig, {\n          isDark: _this.isDark,\n          color: _this.color\n        });\n        targetConfig.style = _objectSpread2(_objectSpread2({}, _this.getHighlightBgStyle(c)), targetConfig.style);\n        targetConfig.contentStyle = _objectSpread2(_objectSpread2({}, _this.getHighlightContentStyle(c)), targetConfig.contentStyle);\n      });\n      return highlight;\n    }\n  }, {\n    key: \"getHighlightBgStyle\",\n    value: function getHighlightBgStyle(_ref6) {\n      var fillMode = _ref6.fillMode,\n          color = _ref6.color,\n          isDark = _ref6.isDark;\n\n      switch (fillMode) {\n        case 'outline':\n        case 'none':\n          return {\n            backgroundColor: isDark ? 'var(--gray-900)' : 'var(--white)',\n            border: '2px solid',\n            borderColor: isDark ? \"var(--\".concat(color, \"-200)\") : \"var(--\".concat(color, \"-700)\"),\n            borderRadius: 'var(--rounded-full)'\n          };\n\n        case 'light':\n          return {\n            backgroundColor: isDark ? \"var(--\".concat(color, \"-800)\") : \"var(--\".concat(color, \"-200)\"),\n            opacity: isDark ? 0.75 : 1,\n            borderRadius: 'var(--rounded-full)'\n          };\n\n        case 'solid':\n          return {\n            backgroundColor: isDark ? \"var(--\".concat(color, \"-500)\") : \"var(--\".concat(color, \"-600)\"),\n            borderRadius: 'var(--rounded-full)'\n          };\n\n        default:\n          return {\n            borderRadius: 'var(--rounded-full)'\n          };\n      }\n    }\n  }, {\n    key: \"getHighlightContentStyle\",\n    value: function getHighlightContentStyle(_ref7) {\n      var fillMode = _ref7.fillMode,\n          color = _ref7.color,\n          isDark = _ref7.isDark;\n\n      switch (fillMode) {\n        case 'outline':\n        case 'none':\n          return {\n            fontWeight: 'var(--font-bold)',\n            color: isDark ? \"var(--\".concat(color, \"-100)\") : \"var(--\".concat(color, \"-900)\")\n          };\n\n        case 'light':\n          return {\n            fontWeight: 'var(--font-bold)',\n            color: isDark ? \"var(--\".concat(color, \"-100)\") : \"var(--\".concat(color, \"-900)\")\n          };\n\n        case 'solid':\n          return {\n            fontWeight: 'var(--font-bold)',\n            color: 'var(--white)'\n          };\n\n        default:\n          return '';\n      }\n    }\n  }, {\n    key: \"bgAccentHigh\",\n    value: function bgAccentHigh(_ref8) {\n      var color = _ref8.color,\n          isDark = _ref8.isDark;\n      return {\n        backgroundColor: isDark ? \"var(--\".concat(color, \"-500)\") : \"var(--\".concat(color, \"-600)\")\n      };\n    }\n  }, {\n    key: \"contentAccent\",\n    value: function contentAccent(_ref9) {\n      var color = _ref9.color,\n          isDark = _ref9.isDark;\n      if (!color) return null;\n      return {\n        fontWeight: 'var(--font-bold)',\n        color: isDark ? \"var(--\".concat(color, \"-100)\") : \"var(--\".concat(color, \"-900)\")\n      };\n    }\n  }, {\n    key: \"normalizeDot\",\n    value: function normalizeDot(config) {\n      return this.normalizeNonHighlight('dot', config, this.bgAccentHigh);\n    }\n  }, {\n    key: \"normalizeBar\",\n    value: function normalizeBar(config) {\n      return this.normalizeNonHighlight('bar', config, this.bgAccentHigh);\n    }\n  }, {\n    key: \"normalizeContent\",\n    value: function normalizeContent(config) {\n      return this.normalizeNonHighlight('content', config, this.contentAccent);\n    }\n  }, {\n    key: \"normalizeNonHighlight\",\n    value: function normalizeNonHighlight(type, config, styleFn) {\n      var _this2 = this;\n\n      var attr = this.normalizeAttr({\n        type: type,\n        config: config\n      }); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n      toPairs_1(attr).forEach(function (_ref10) {\n        var _ref11 = _slicedToArray(_ref10, 2),\n            _ = _ref11[0],\n            targetConfig = _ref11[1];\n\n        defaults_1(targetConfig, {\n          isDark: _this2.isDark,\n          color: _this2.color\n        });\n        targetConfig.style = _objectSpread2(_objectSpread2({}, styleFn(targetConfig)), targetConfig.style);\n      });\n      return attr;\n    }\n  }]);\n\n  return Theme;\n}();\n\nvar MILLISECONDS_IN_MINUTE = 60000;\n\nfunction getDateMillisecondsPart(date) {\n  return date.getTime() % MILLISECONDS_IN_MINUTE;\n}\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\n\nfunction getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var hasNegativeUTCOffset = baseTimezoneOffset > 0;\n  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}\n/**\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\n * `date` as it will be rendered in the `timeZone`.\n */\n\n\nfunction tzTokenizeDate(date, timeZone) {\n  var dtf = getDateTimeFormat(timeZone);\n  return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);\n}\n\nvar typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction partsOffset(dtf, date) {\n  var formatted = dtf.formatToParts(date);\n  var filled = [];\n\n  for (var i = 0; i < formatted.length; i++) {\n    var pos = typeToPos[formatted[i].type];\n\n    if (pos >= 0) {\n      filled[pos] = parseInt(formatted[i].value, 10);\n    }\n  }\n\n  return filled;\n}\n\nfunction hackyOffset(dtf, date) {\n  var formatted = dtf.format(date).replace(/\\u200E/g, '');\n  var parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted); // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n  // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n\n  return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]];\n} // Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\n\n\nvar dtfCache = {};\n\nfunction getDateTimeFormat(timeZone) {\n  if (!dtfCache[timeZone]) {\n    // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\n    var testDateFormatted = new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: 'America/New_York',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }).format(new Date('2014-06-25T04:00:00.123Z'));\n    var hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' || testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';\n    dtfCache[timeZone] = hourCycleSupported ? new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: timeZone,\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }) : new Intl.DateTimeFormat('en-US', {\n      hourCycle: 'h23',\n      timeZone: timeZone,\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  }\n\n  return dtfCache[timeZone];\n}\n\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE$1 = 60000;\nvar patterns = {\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-])(\\d{2})$/,\n  timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/,\n  timezoneIANA: /(UTC|(?:[a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?))$/\n}; // Parse various time zone offset formats to an offset in milliseconds\n\nfunction tzParseTimezone(timezoneString, date) {\n  var token;\n  var absoluteOffset; // Z\n\n  token = patterns.timezoneZ.exec(timezoneString);\n\n  if (token) {\n    return 0;\n  }\n\n  var hours; // ±hh\n\n  token = patterns.timezoneHH.exec(timezoneString);\n\n  if (token) {\n    hours = parseInt(token[2], 10);\n\n    if (!validateTimezone()) {\n      return NaN;\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR;\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  } // ±hh:mm or ±hhmm\n\n\n  token = patterns.timezoneHHMM.exec(timezoneString);\n\n  if (token) {\n    hours = parseInt(token[2], 10);\n    var minutes = parseInt(token[3], 10);\n\n    if (!validateTimezone(hours, minutes)) {\n      return NaN;\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE$1;\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  } // IANA time zone\n\n\n  token = patterns.timezoneIANA.exec(timezoneString);\n\n  if (token) {\n    // var [fYear, fMonth, fDay, fHour, fMinute, fSecond] = tzTokenizeDate(date, timezoneString)\n    var tokens = tzTokenizeDate(date, timezoneString);\n    var asUTC = Date.UTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3], tokens[4], tokens[5]);\n    var timestampWithMsZeroed = date.getTime() - date.getTime() % 1000;\n    return -(asUTC - timestampWithMsZeroed);\n  }\n\n  return 0;\n}\n\nfunction validateTimezone(hours, minutes) {\n  if (minutes != null && (minutes < 0 || minutes > 59)) {\n    return false;\n  }\n\n  return true;\n}\n\nvar MILLISECONDS_IN_HOUR$1 = 3600000;\nvar MILLISECONDS_IN_MINUTE$2 = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns$1 = {\n  dateTimeDelimeter: /[T ]/,\n  plainTime: /:/,\n  timeZoneDelimeter: /[Z ]/i,\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [/^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [/^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n  ],\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  // timezone tokens (to identify the presence of a tz)\n  timezone: /([Z+-].*| UTC|(?:[a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?))$/\n};\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nfunction toDate$1(argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  if (argument === null) {\n    return new Date(NaN);\n  }\n\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  } // Clone the date\n\n\n  if (argument instanceof Date || _typeof(argument) === 'object' && Object.prototype.toString.call(argument) === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || Object.prototype.toString.call(argument) === '[object Number]') {\n    return new Date(argument);\n  } else if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n  var year = parseYearResult.year;\n  var restDateString = parseYearResult.restDateString;\n  var date = parseDate(restDateString, year);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  }\n\n  if (date) {\n    var timestamp = date.getTime();\n    var time = 0;\n    var offset;\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time);\n\n      if (isNaN(time)) {\n        return new Date(NaN);\n      }\n    }\n\n    if (dateStrings.timezone || options.timeZone) {\n      offset = tzParseTimezone(dateStrings.timezone || options.timeZone, new Date(timestamp + time));\n\n      if (isNaN(offset)) {\n        return new Date(NaN);\n      }\n\n      offset = tzParseTimezone(dateStrings.timezone || options.timeZone, new Date(timestamp + time + offset));\n\n      if (isNaN(offset)) {\n        return new Date(NaN);\n      }\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));\n    }\n\n    return new Date(timestamp + time + offset);\n  } else {\n    return new Date(NaN);\n  }\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns$1.dateTimeDelimeter);\n  var timeString;\n\n  if (patterns$1.plainTime.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    dateStrings.timezone = array[2];\n\n    if (patterns$1.timeZoneDelimeter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns$1.timeZoneDelimeter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns$1.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var patternYYY = patterns$1.YYY[additionalDigits];\n  var patternYYYYY = patterns$1.YYYYY[additionalDigits];\n  var token; // YYYY or ±YYYYY\n\n  token = patterns$1.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n\n  if (token) {\n    var yearString = token[1];\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    };\n  } // YY or ±YYY\n\n\n  token = patterns$1.YY.exec(dateString) || patternYYY.exec(dateString);\n\n  if (token) {\n    var centuryString = token[1];\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    };\n  } // Invalid ISO-formatted year\n\n\n  return {\n    year: null\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null;\n  }\n\n  var token;\n  var date;\n  var month;\n  var week; // YYYY\n\n  if (dateString.length === 0) {\n    date = new Date(0);\n    date.setUTCFullYear(year);\n    return date;\n  } // YYYY-MM\n\n\n  token = patterns$1.MM.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n\n    if (!validateDate(year, month)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month);\n    return date;\n  } // YYYY-DDD or YYYYDDD\n\n\n  token = patterns$1.DDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    var dayOfYear = parseInt(token[1], 10);\n\n    if (!validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, 0, dayOfYear);\n    return date;\n  } // yyyy-MM-dd or YYYYMMDD\n\n\n  token = patterns$1.MMDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    var day = parseInt(token[2], 10);\n\n    if (!validateDate(year, month, day)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, day);\n    return date;\n  } // YYYY-Www or YYYYWww\n\n\n  token = patterns$1.Www.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n\n    if (!validateWeekDate(year, week)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week);\n  } // YYYY-Www-D or YYYYWwwD\n\n\n  token = patterns$1.WwwD.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    var dayOfWeek = parseInt(token[2], 10) - 1;\n\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } // Invalid ISO-formatted date\n\n\n  return null;\n}\n\nfunction parseTime(timeString) {\n  var token;\n  var hours;\n  var minutes; // hh\n\n  token = patterns$1.HH.exec(timeString);\n\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'));\n\n    if (!validateTime(hours)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR$1;\n  } // hh:mm or hhmm\n\n\n  token = patterns$1.HHMM.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseFloat(token[2].replace(',', '.'));\n\n    if (!validateTime(hours, minutes)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR$1 + minutes * MILLISECONDS_IN_MINUTE$2;\n  } // hh:mm:ss or hhmmss\n\n\n  token = patterns$1.HHMMSS.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseInt(token[2], 10);\n    var seconds = parseFloat(token[3].replace(',', '.'));\n\n    if (!validateTime(hours, minutes, seconds)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR$1 + minutes * MILLISECONDS_IN_MINUTE$2 + seconds * 1000;\n  } // Invalid ISO-formatted time\n\n\n  return null;\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  week = week || 0;\n  day = day || 0;\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  if (month < 0 || month > 11) {\n    return false;\n  }\n\n  if (date != null) {\n    if (date < 1) {\n      return false;\n    }\n\n    var isLeapYear = isLeapYearIndex(year);\n\n    if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n      return false;\n    }\n\n    if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  if (dayOfYear < 1) {\n    return false;\n  }\n\n  var isLeapYear = isLeapYearIndex(year);\n\n  if (isLeapYear && dayOfYear > 366) {\n    return false;\n  }\n\n  if (!isLeapYear && dayOfYear > 365) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction validateWeekDate(year, week, day) {\n  if (week < 0 || week > 52) {\n    return false;\n  }\n\n  if (day != null && (day < 0 || day > 6)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours != null && (hours < 0 || hours >= 25)) {\n    return false;\n  }\n\n  if (minutes != null && (minutes < 0 || minutes >= 60)) {\n    return false;\n  }\n\n  if (seconds != null && (seconds < 0 || seconds >= 60)) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * var result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\n\nfunction startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * var result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\n\nfunction startOfISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  return startOfWeek(dirtyDate, {\n    weekStartsOn: 1\n  });\n}\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `getISOYear` to `getISOWeekYear`.\n *   \"ISO week year\" is short for [ISO week-numbering year](https://en.wikipedia.org/wiki/ISO_week_date).\n *   This change makes the name consistent with\n *   locale-dependent week-numbering year helpers, e.g., `getWeekYear`.\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * var result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\n\n\nfunction getISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an ISO week-numbering year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * var result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\n\n\nfunction startOfISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  var date = startOfISOWeek(fourthOfJanuary);\n  return date;\n}\n\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the ISO week\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * var result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\n\nfunction getISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Number} the local week-numbering year\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * var result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * var result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * var result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\n\n\nfunction getWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the start of a week-numbering year\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * var result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * var result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\n\n\nfunction startOfWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  var date = startOfWeek(firstWeek, dirtyOptions);\n  return date;\n}\n\nvar MILLISECONDS_IN_WEEK$1 = 604800000;\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Number} the week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * var result = getISOWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * var result = getISOWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nfunction getWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfWeek(date, options).getTime() - startOfWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;\n}\n\nvar MILLISECONDS_IN_WEEK$2 = 604800000;\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the number of calendar weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * var result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * var result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\n\nfunction differenceInCalendarWeeks(dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var startOfWeekLeft = startOfWeek(dirtyDateLeft, dirtyOptions);\n  var startOfWeekRight = startOfWeek(dirtyDateRight, dirtyOptions);\n  var timestampLeft = startOfWeekLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekLeft);\n  var timestampRight = startOfWeekRight.getTime() - getTimezoneOffsetInMilliseconds(startOfWeekRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_WEEK$2);\n}\n/**\n * @name lastDayOfMonth\n * @category Month Helpers\n * @summary Return the last day of a month for the given date.\n *\n * @description\n * Return the last day of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The last day of a month for 2 September 2014 11:55:00:\n * var result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 00:00:00\n */\n\n\nfunction lastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\n\nfunction startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n/**\n * @name getWeeksInMonth\n * @category Week Helpers\n * @summary Get the number of calendar weeks a month spans.\n *\n * @description\n * Get the number of calendar weeks the month in the given date spans.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Number} the number of calendar weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // How many calendar weeks does February 2015 span?\n * var result = getWeeksInMonth(new Date(2015, 1, 8))\n * //=> 4\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks does July 2017 span?\n * var result = getWeeksInMonth(new Date(2017, 6, 5), { weekStartsOn: 1 })\n * //=> 6\n */\n\n\nfunction getWeeksInMonth(date, options) {\n  requiredArgs(1, arguments);\n  return differenceInCalendarWeeks(lastDayOfMonth(date), startOfMonth(date), options) + 1;\n}\n\nvar millisecondsPerDay = 24 * 60 * 60 * 1000;\n\nvar DateInfo = /*#__PURE__*/function () {\n  function DateInfo(config) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$order = _ref.order,\n        order = _ref$order === void 0 ? 0 : _ref$order,\n        locale = _ref.locale,\n        isFullDay = _ref.isFullDay;\n\n    _classCallCheck(this, DateInfo);\n\n    this.isDateInfo = true;\n    this.order = order;\n    this.locale = locale instanceof Locale ? locale : new Locale(locale);\n    this.firstDayOfWeek = this.locale.firstDayOfWeek; // Adjust config for simple dates\n\n    if (!isObject(config)) {\n      var date = this.locale.normalizeDate(config);\n\n      if (isFullDay) {\n        config = {\n          start: date,\n          end: date\n        };\n      } else {\n        config = {\n          startOn: date,\n          endOn: date\n        };\n      }\n    }\n\n    var start = null;\n    var end = null;\n\n    if (config.start) {\n      start = this.locale.normalizeDate(config.start, _objectSpread2(_objectSpread2({}, this.opts), {}, {\n        time: '00:00:00'\n      }));\n    } else if (config.startOn) {\n      start = this.locale.normalizeDate(config.startOn, this.opts);\n    }\n\n    if (config.end) {\n      end = this.locale.normalizeDate(config.end, _objectSpread2(_objectSpread2({}, this.opts), {}, {\n        time: '23:59:59'\n      }));\n    } else if (config.endOn) {\n      end = this.locale.normalizeDate(config.endOn, this.opts);\n    } // Reconfigure start and end dates if needed\n\n\n    if (start && end && start > end) {\n      var temp = start;\n      start = end;\n      end = temp;\n    } else if (start && config.span >= 1) {\n      end = addDays(start, config.span - 1);\n    } // Assign start and end dates\n\n\n    this.start = start;\n    this.startTime = start ? start.getTime() : NaN;\n    this.end = end;\n    this.endTime = end ? end.getTime() : NaN;\n    this.isDate = this.startTime && this.startTime === this.endTime;\n    this.isRange = !this.isDate; // Assign 'and' condition\n\n    var andOpt = mixinOptionalProps(config, {}, DateInfo.patternProps);\n\n    if (andOpt.assigned) {\n      this.on = {\n        and: andOpt.target\n      };\n    } // Assign 'or' conditions\n\n\n    if (config.on) {\n      var or = (isArrayLikeObject_1(config.on) ? config.on : [config.on]).map(function (o) {\n        if (isFunction_1(o)) return o;\n        var opt = mixinOptionalProps(o, {}, DateInfo.patternProps);\n        return opt.assigned ? opt.target : null;\n      }).filter(function (o) {\n        return o;\n      });\n      if (or.length) this.on = _objectSpread2(_objectSpread2({}, this.on), {}, {\n        or: or\n      });\n    } // Assign flag if date is complex\n\n\n    this.isComplex = !!this.on;\n  }\n\n  _createClass(DateInfo, [{\n    key: \"toDateInfo\",\n    value: function toDateInfo(date) {\n      return date.isDateInfo ? date : new DateInfo(date, this.opts);\n    }\n  }, {\n    key: \"startOfWeek\",\n    value: function startOfWeek(date) {\n      var day = date.getDay() + 1;\n      var daysToAdd = day >= this.firstDayOfWeek ? this.firstDayOfWeek - day : -(7 - (this.firstDayOfWeek - day));\n      return addDays(date, daysToAdd);\n    }\n  }, {\n    key: \"diffInDays\",\n    value: function diffInDays(d1, d2) {\n      return Math.round((d2 - d1) / millisecondsPerDay);\n    }\n  }, {\n    key: \"diffInWeeks\",\n    value: function diffInWeeks(d1, d2) {\n      return this.diffInDays(this.startOfWeek(d1), this.startOfWeek(d2));\n    }\n  }, {\n    key: \"diffInYears\",\n    value: function diffInYears(d1, d2) {\n      return d2.getUTCFullYear() - d1.getUTCFullYear();\n    }\n  }, {\n    key: \"diffInMonths\",\n    value: function diffInMonths(d1, d2) {\n      return this.diffInYears(d1, d2) * 12 + (d2.getMonth() - d1.getMonth());\n    }\n  }, {\n    key: \"iterateDatesInRange\",\n    value: function iterateDatesInRange(_ref2, fn) {\n      var start = _ref2.start,\n          end = _ref2.end;\n      if (!start || !end || !isFunction_1(fn)) return null;\n      start = this.locale.normalizeDate(start, _objectSpread2(_objectSpread2({}, this.opts), {}, {\n        time: '00:00:00'\n      }));\n      var state = {\n        i: 0,\n        date: start,\n        day: this.locale.getDateParts(start),\n        finished: false\n      };\n      var result = null;\n\n      for (; !state.finished && state.date <= end; state.i++) {\n        result = fn(state);\n        state.date = addDays(state.date, 1);\n        state.day = this.locale.getDateParts(state.date);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"shallowIntersectingRange\",\n    value: function shallowIntersectingRange(other) {\n      return this.rangeShallowIntersectingRange(this, this.toDateInfo(other));\n    } // Returns a date range that intersects two DateInfo objects\n    // NOTE: This is a shallow calculation (does not take patterns into account),\n    //   so this method should only really be called for special conditions\n    //   where absolute accuracy is not necessarily needed\n\n  }, {\n    key: \"rangeShallowIntersectingRange\",\n    value: function rangeShallowIntersectingRange(date1, date2) {\n      if (!this.dateShallowIntersectsDate(date1, date2)) {\n        return null;\n      }\n\n      var thisRange = date1.toRange();\n      var otherRange = date2.toRange(); // Start with infinite start and end dates\n\n      var start = null;\n      var end = null; // This start date exists\n\n      if (thisRange.start) {\n        // Use this definite start date if other start date is infinite\n        if (!otherRange.start) {\n          start = thisRange.start;\n        } else {\n          // Otherwise, use the latest start date\n          start = thisRange.start > otherRange.start ? thisRange.start : otherRange.start;\n        } // Other start date exists\n\n      } else if (otherRange.start) {\n        // Use other definite start date as this one is infinite\n        start = otherRange.start;\n      } // This end date exists\n\n\n      if (thisRange.end) {\n        // Use this definite end date if other end date is infinite\n        if (!otherRange.end) {\n          end = thisRange.end;\n        } else {\n          // Otherwise, use the earliest end date\n          end = thisRange.end < otherRange.end ? thisRange.end : otherRange.end;\n        } // Other end date exists\n\n      } else if (otherRange.end) {\n        // Use other definite end date as this one is infinite\n        end = otherRange.end;\n      } // Return calculated range\n\n\n      return {\n        start: start,\n        end: end\n      };\n    } // ========================================================\n    // Determines if this date partially intersects another date\n    // NOTE: This is a deep test (patterns tested)\n\n  }, {\n    key: \"intersectsDate\",\n    value: function intersectsDate(other) {\n      var _this = this;\n\n      var date = this.toDateInfo(other);\n      if (!this.shallowIntersectsDate(date)) return null;\n      if (!this.on) return this;\n      var range = this.rangeShallowIntersectingRange(this, date);\n      var result = false;\n      this.iterateDatesInRange(range, function (state) {\n        if (_this.matchesDay(state.day)) {\n          result = result || date.matchesDay(state.day);\n          state.finished = result;\n        }\n      });\n      return result;\n    } // ========================================================\n    // Determines if this date partially intersects another date\n    // NOTE: This is a shallow test (no patterns tested)\n\n  }, {\n    key: \"shallowIntersectsDate\",\n    value: function shallowIntersectsDate(other) {\n      return this.dateShallowIntersectsDate(this, this.toDateInfo(other));\n    } // ========================================================\n    // Determines if first date partially intersects second date\n    // NOTE: This is a shallow test (no patterns tested)\n\n  }, {\n    key: \"dateShallowIntersectsDate\",\n    value: function dateShallowIntersectsDate(date1, date2) {\n      if (date1.isDate) {\n        return date2.isDate ? date1.startTime === date2.startTime : this.dateShallowIncludesDate(date2, date1);\n      }\n\n      if (date2.isDate) {\n        return this.dateShallowIncludesDate(date1, date2);\n      } // Both ranges\n\n\n      if (date1.start && date2.end && date1.start > date2.end) {\n        return false;\n      }\n\n      if (date1.end && date2.start && date1.end < date2.start) {\n        return false;\n      }\n\n      return true;\n    } // ========================================================\n    // Determines if this date completely includes another date\n    // NOTE: This is a deep test (patterns tested)\n\n  }, {\n    key: \"includesDate\",\n    value: function includesDate(other) {\n      var _this2 = this;\n\n      var date = this.toDateInfo(other);\n\n      if (!this.shallowIncludesDate(date)) {\n        return false;\n      }\n\n      if (!this.on) {\n        return true;\n      }\n\n      var range = this.rangeShallowIntersectingRange(this, date);\n      var result = true;\n      this.iterateDatesInRange(range, function (state) {\n        if (_this2.matchesDay(state.day)) {\n          result = result && date.matchesDay(state.day);\n          state.finished = !result;\n        }\n      });\n      return result;\n    } // ========================================================\n    // Determines if this date completely includes another date\n    // NOTE: This is a shallow test (no patterns tested)\n\n  }, {\n    key: \"shallowIncludesDate\",\n    value: function shallowIncludesDate(other) {\n      return this.dateShallowIncludesDate(this, other.isDate ? other : new DateInfo(other, this.opts));\n    } // ========================================================\n    // Determines if first date completely includes second date\n    // NOTE: This is a shallow test (no patterns tested)\n\n  }, {\n    key: \"dateShallowIncludesDate\",\n    value: function dateShallowIncludesDate(date1, date2) {\n      // First date is simple date\n      if (date1.isDate) {\n        if (date2.isDate) {\n          return date1.startTime === date2.startTime;\n        }\n\n        if (!date2.startTime || !date2.endTime) {\n          return false;\n        }\n\n        return date1.startTime === date2.startTime && date1.startTime === date2.endTime;\n      } // Second date is simple date and first is date range\n\n\n      if (date2.isDate) {\n        if (date1.start && date2.start < date1.start) {\n          return false;\n        }\n\n        if (date1.end && date2.start > date1.end) {\n          return false;\n        }\n\n        return true;\n      } // Both dates are date ranges\n\n\n      if (date1.start && (!date2.start || date2.start < date1.start)) {\n        return false;\n      }\n\n      if (date1.end && (!date2.end || date2.end > date1.end)) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"intersectsDay\",\n    value: function intersectsDay(day) {\n      // Date is outside general range - return null\n      if (!this.shallowIntersectsDate(day.range)) return null; // Return this date if patterns match\n\n      return this.matchesDay(day) ? this : null;\n    }\n  }, {\n    key: \"matchesDay\",\n    value: function matchesDay(day) {\n      var _this3 = this; // No patterns to test\n\n\n      if (!this.on) return true; // Fail if 'and' condition fails\n\n      if (this.on.and && !DateInfo.testConfig(this.on.and, day, this)) {\n        return false;\n      } // Fail if every 'or' condition fails\n\n\n      if (this.on.or && !this.on.or.some(function (or) {\n        return DateInfo.testConfig(or, day, _this3);\n      })) {\n        return false;\n      } // Patterns match\n\n\n      return true;\n    }\n  }, {\n    key: \"toRange\",\n    value: function toRange() {\n      return new DateInfo({\n        start: this.start,\n        end: this.end\n      }, this.opts);\n    } // Build the 'compare to other' function\n\n  }, {\n    key: \"compare\",\n    value: function compare(other) {\n      if (this.order !== other.order) return this.order - other.order;\n      if (this.isDate !== other.isDate) return this.isDate ? 1 : -1;\n      if (this.isDate) return 0;\n      var diff = this.start - other.start;\n      return diff !== 0 ? diff : this.end - other.end;\n    }\n  }, {\n    key: \"opts\",\n    get: function get() {\n      return {\n        order: this.order,\n        locale: this.locale\n      };\n    }\n  }], [{\n    key: \"testConfig\",\n    value: function testConfig(config, day, dateInfo) {\n      if (isFunction_1(config)) return config(day);\n\n      if (isObject(config)) {\n        return Object.keys(config).every(function (k) {\n          return DateInfo.patterns[k].test(day, config[k], dateInfo);\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: \"patterns\",\n    get: function get() {\n      return {\n        dailyInterval: {\n          test: function test(day, interval, di) {\n            return di.diffInDays(di.start || new Date(), day.date) % interval === 0;\n          }\n        },\n        weeklyInterval: {\n          test: function test(day, interval, di) {\n            return di.diffInWeeks(di.start || new Date(), day.date) % interval === 0;\n          }\n        },\n        monthlyInterval: {\n          test: function test(day, interval, di) {\n            return di.diffInMonths(di.start || new Date(), day.date) % interval === 0;\n          }\n        },\n        yearlyInterval: {\n          test: function test() {\n            return function (day, interval, di) {\n              return di.diffInYears(di.start || new Date(), day.date) % interval === 0;\n            };\n          }\n        },\n        days: {\n          validate: function validate(days) {\n            return isArrayLikeObject_1(days) ? days : [parseInt(days, 10)];\n          },\n          test: function test(day, days) {\n            return days.includes(day.day) || days.includes(-day.dayFromEnd);\n          }\n        },\n        weekdays: {\n          validate: function validate(weekdays) {\n            return isArrayLikeObject_1(weekdays) ? weekdays : [parseInt(weekdays, 10)];\n          },\n          test: function test(day, weekdays) {\n            return weekdays.includes(day.weekday);\n          }\n        },\n        ordinalWeekdays: {\n          validate: function validate(ordinalWeekdays) {\n            return Object.keys(ordinalWeekdays).reduce(function (obj, ck) {\n              var weekdays = ordinalWeekdays[ck];\n              if (!weekdays) return obj;\n              obj[ck] = isArrayLikeObject_1(weekdays) ? weekdays : [parseInt(weekdays, 10)];\n              return obj;\n            }, {});\n          },\n          test: function test(day, ordinalWeekdays) {\n            return Object.keys(ordinalWeekdays).map(function (k) {\n              return parseInt(k, 10);\n            }).find(function (k) {\n              return ordinalWeekdays[k].includes(day.weekday) && (k === day.weekdayOrdinal || k === -day.weekdayOrdinalFromEnd);\n            });\n          }\n        },\n        weekends: {\n          validate: function validate(config) {\n            return config;\n          },\n          test: function test(day) {\n            return day.weekday === 1 || day.weekday === 7;\n          }\n        },\n        workweek: {\n          validate: function validate(config) {\n            return config;\n          },\n          test: function test(day) {\n            return day.weekday >= 2 && day.weekday <= 6;\n          }\n        },\n        weeks: {\n          validate: function validate(weeks) {\n            return isArrayLikeObject_1(weeks) ? weeks : [parseInt(weeks, 10)];\n          },\n          test: function test(day, weeks) {\n            return weeks.includes(day.week) || weeks.includes(-day.weekFromEnd);\n          }\n        },\n        months: {\n          validate: function validate(months) {\n            return isArrayLikeObject_1(months) ? months : [parseInt(months, 10)];\n          },\n          test: function test(day, months) {\n            return months.includes(day.month);\n          }\n        },\n        years: {\n          validate: function validate(years) {\n            return isArrayLikeObject_1(years) ? years : [parseInt(years, 10)];\n          },\n          test: function test(day, years) {\n            return years.includes(day.year);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"patternProps\",\n    get: function get() {\n      return Object.keys(DateInfo.patterns).map(function (k) {\n        return {\n          name: k,\n          validate: DateInfo.patterns[k].validate\n        };\n      });\n    }\n  }]);\n\n  return DateInfo;\n}();\n\nvar locales = {\n  // Arabic\n  ar: {\n    dow: 7,\n    L: \"D/\\u200FM/\\u200FYYYY\"\n  },\n  // Bulgarian\n  bg: {\n    dow: 2,\n    L: 'D.MM.YYYY'\n  },\n  // Catalan\n  ca: {\n    dow: 2,\n    L: 'DD/MM/YYYY'\n  },\n  // Chinese (China)\n  'zh-CN': {\n    dow: 2,\n    L: 'YYYY/MM/DD'\n  },\n  // Chinese (Taiwan)\n  'zh-TW': {\n    dow: 1,\n    L: 'YYYY/MM/DD'\n  },\n  // Croatian\n  hr: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // Czech\n  cs: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // Danish\n  da: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // Dutch\n  nl: {\n    dow: 2,\n    L: 'DD-MM-YYYY'\n  },\n  // English (US)\n  'en-US': {\n    dow: 1,\n    L: 'MM/DD/YYYY'\n  },\n  // English (Australia)\n  'en-AU': {\n    dow: 2,\n    L: 'DD/MM/YYYY'\n  },\n  // English (Canada)\n  'en-CA': {\n    dow: 1,\n    L: 'YYYY-MM-DD'\n  },\n  // English (Great Britain)\n  'en-GB': {\n    dow: 2,\n    L: 'DD/MM/YYYY'\n  },\n  // English (Ireland)\n  'en-IE': {\n    dow: 2,\n    L: 'DD-MM-YYYY'\n  },\n  // English (New Zealand)\n  'en-NZ': {\n    dow: 2,\n    L: 'DD/MM/YYYY'\n  },\n  // English (South Africa)\n  'en-ZA': {\n    dow: 1,\n    L: 'YYYY/MM/DD'\n  },\n  // Esperanto\n  eo: {\n    dow: 2,\n    L: 'YYYY-MM-DD'\n  },\n  // Estonian\n  et: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // Finnish\n  fi: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // French\n  fr: {\n    dow: 2,\n    L: 'DD/MM/YYYY'\n  },\n  // French (Canada)\n  'fr-CA': {\n    dow: 1,\n    L: 'YYYY-MM-DD'\n  },\n  // French (Switzerland)\n  'fr-CH': {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // German\n  de: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // Hebrew\n  he: {\n    dow: 1,\n    L: 'DD.MM.YYYY'\n  },\n  // Indonesian\n  id: {\n    dow: 2,\n    L: 'DD/MM/YYYY'\n  },\n  // Italian\n  it: {\n    dow: 2,\n    L: 'DD/MM/YYYY'\n  },\n  // Japanese\n  ja: {\n    dow: 1,\n    L: 'YYYY年M月D日'\n  },\n  // Korean\n  ko: {\n    dow: 1,\n    L: 'YYYY.MM.DD'\n  },\n  // Latvian\n  lv: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // Lithuanian\n  lt: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // Macedonian\n  mk: {\n    dow: 2,\n    L: 'D.MM.YYYY'\n  },\n  // Norwegian\n  nb: {\n    dow: 2,\n    L: 'D. MMMM YYYY'\n  },\n  nn: {\n    dow: 2,\n    L: 'D. MMMM YYYY'\n  },\n  // Polish\n  pl: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // Portuguese\n  pt: {\n    dow: 2,\n    L: 'DD/MM/YYYY'\n  },\n  // Romanian\n  ro: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // Russian\n  ru: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // Slovak\n  sk: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // Spanish (Spain)\n  'es-ES': {\n    dow: 2,\n    L: 'DD/MM/YYYY'\n  },\n  // Spanish (Mexico)\n  'es-MX': {\n    dow: 2,\n    L: 'DD/MM/YYYY'\n  },\n  // Swedish\n  sv: {\n    dow: 2,\n    L: 'YYYY-MM-DD'\n  },\n  // Thai\n  th: {\n    dow: 1,\n    L: 'DD/MM/YYYY'\n  },\n  // Turkish\n  tr: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // Ukrainian\n  uk: {\n    dow: 2,\n    L: 'DD.MM.YYYY'\n  },\n  // Vietnam\n  vi: {\n    dow: 2,\n    L: 'DD/MM/YYYY'\n  }\n};\nlocales.en = locales['en-US'];\nlocales.es = locales['es-ES'];\nlocales.no = locales.nb;\nlocales.zh = locales['zh-CN']; // Remap from abbr. to intuitive property names\n\ntoPairs_1(locales).forEach(function (_ref12) {\n  var _ref13 = _slicedToArray2(_ref12, 2),\n      id = _ref13[0],\n      _ref13$ = _ref13[1],\n      dow = _ref13$.dow,\n      L = _ref13$.L;\n\n  locales[id] = {\n    id: id,\n    firstDayOfWeek: dow,\n    masks: {\n      L: L\n    }\n  };\n});\nvar PATCH = {\n  DATE_TIME: 1,\n  DATE: 2,\n  TIME: 3\n};\nvar PATCH_KEYS = {\n  1: ['year', 'month', 'day', 'hours', 'minutes', 'seconds', 'milliseconds'],\n  2: ['year', 'month', 'day'],\n  3: ['hours', 'minutes', 'seconds', 'milliseconds']\n};\nvar token = /d{1,2}|W{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|Z{1,4}|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nvar twoDigits = /\\d\\d?/;\nvar threeDigits = /\\d{3}/;\nvar fourDigits = /\\d{4}/;\nvar word = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\nvar literal = /\\[([^]*?)\\]/gm; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\nvar noop = function noop() {};\n\nvar monthUpdate = function monthUpdate(arrName) {\n  return function (d, v, l) {\n    var index = l[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());\n\n    if (~index) {\n      d.month = index;\n    }\n  };\n};\n\nvar maskMacros = ['L', 'iso'];\nvar daysInWeek = 7;\nvar daysInMonths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar formatFlags = {\n  D: function D(d) {\n    return d.day;\n  },\n  DD: function DD(d) {\n    return pad(d.day);\n  },\n  Do: function Do(d, l) {\n    return l.DoFn(d.day);\n  },\n  d: function d(_d) {\n    return _d.weekday - 1;\n  },\n  dd: function dd(d) {\n    return pad(d.weekday - 1);\n  },\n  W: function W(d, l) {\n    return l.dayNamesNarrow[d.weekday - 1];\n  },\n  WW: function WW(d, l) {\n    return l.dayNamesShorter[d.weekday - 1];\n  },\n  WWW: function WWW(d, l) {\n    return l.dayNamesShort[d.weekday - 1];\n  },\n  WWWW: function WWWW(d, l) {\n    return l.dayNames[d.weekday - 1];\n  },\n  M: function M(d) {\n    return d.month;\n  },\n  MM: function MM(d) {\n    return pad(d.month);\n  },\n  MMM: function MMM(d, l) {\n    return l.monthNamesShort[d.month - 1];\n  },\n  MMMM: function MMMM(d, l) {\n    return l.monthNames[d.month - 1];\n  },\n  YY: function YY(d) {\n    return String(d.year).substr(2);\n  },\n  YYYY: function YYYY(d) {\n    return pad(d.year, 4);\n  },\n  h: function h(d) {\n    return d.hours % 12 || 12;\n  },\n  hh: function hh(d) {\n    return pad(d.hours % 12 || 12);\n  },\n  H: function H(d) {\n    return d.hours;\n  },\n  HH: function HH(d) {\n    return pad(d.hours);\n  },\n  m: function m(d) {\n    return d.minutes;\n  },\n  mm: function mm(d) {\n    return pad(d.minutes);\n  },\n  s: function s(d) {\n    return d.seconds;\n  },\n  ss: function ss(d) {\n    return pad(d.seconds);\n  },\n  S: function S(d) {\n    return Math.round(d.milliseconds / 100);\n  },\n  SS: function SS(d) {\n    return pad(Math.round(d.milliseconds / 10), 2);\n  },\n  SSS: function SSS(d) {\n    return pad(d.milliseconds, 3);\n  },\n  a: function a(d, l) {\n    return d.hours < 12 ? l.amPm[0] : l.amPm[1];\n  },\n  A: function A(d, l) {\n    return d.hours < 12 ? l.amPm[0].toUpperCase() : l.amPm[1].toUpperCase();\n  },\n  Z: function Z() {\n    return 'Z';\n  },\n  ZZ: function ZZ(d) {\n    var o = d.timezoneOffset;\n    return \"\".concat(o > 0 ? '-' : '+').concat(pad(Math.floor(Math.abs(o) / 60), 2));\n  },\n  ZZZ: function ZZZ(d) {\n    var o = d.timezoneOffset;\n    return \"\".concat(o > 0 ? '-' : '+').concat(pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4));\n  },\n  ZZZZ: function ZZZZ(d) {\n    var o = d.timezoneOffset;\n    return \"\".concat(o > 0 ? '-' : '+').concat(pad(Math.floor(Math.abs(o) / 60), 2), \":\").concat(pad(Math.abs(o) % 60, 2));\n  }\n};\nvar parseFlags = {\n  D: [twoDigits, function (d, v) {\n    d.day = v;\n  }],\n  Do: [new RegExp(twoDigits.source + word.source), function (d, v) {\n    d.day = parseInt(v, 10);\n  }],\n  d: [twoDigits, noop],\n  W: [word, noop],\n  M: [twoDigits, function (d, v) {\n    d.month = v - 1;\n  }],\n  MMM: [word, monthUpdate('monthNamesShort')],\n  MMMM: [word, monthUpdate('monthNames')],\n  YY: [twoDigits, function (d, v) {\n    var da = new Date();\n    var cent = +da.getFullYear().toString().substr(0, 2);\n    d.year = \"\".concat(v > 68 ? cent - 1 : cent).concat(v);\n  }],\n  YYYY: [fourDigits, function (d, v) {\n    d.year = v;\n  }],\n  S: [/\\d/, function (d, v) {\n    d.millisecond = v * 100;\n  }],\n  SS: [/\\d{2}/, function (d, v) {\n    d.millisecond = v * 10;\n  }],\n  SSS: [threeDigits, function (d, v) {\n    d.millisecond = v;\n  }],\n  h: [twoDigits, function (d, v) {\n    d.hour = v;\n  }],\n  m: [twoDigits, function (d, v) {\n    d.minute = v;\n  }],\n  s: [twoDigits, function (d, v) {\n    d.second = v;\n  }],\n  a: [word, function (d, v, l) {\n    var val = v.toLowerCase();\n\n    if (val === l.amPm[0]) {\n      d.isPm = false;\n    } else if (val === l.amPm[1]) {\n      d.isPm = true;\n    }\n  }],\n  Z: [/[^\\s]*?[+-]\\d\\d:?\\d\\d|[^\\s]*?Z?/, function (d, v) {\n    if (v === 'Z') v = '+00:00';\n    var parts = \"\".concat(v).match(/([+-]|\\d\\d)/gi);\n\n    if (parts) {\n      var minutes = +(parts[1] * 60) + parseInt(parts[2], 10);\n      d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;\n    }\n  }]\n};\nparseFlags.DD = parseFlags.D;\nparseFlags.dd = parseFlags.d;\nparseFlags.WWWW = parseFlags.WWW = parseFlags.WW = parseFlags.W;\nparseFlags.MM = parseFlags.M;\nparseFlags.mm = parseFlags.m;\nparseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;\nparseFlags.ss = parseFlags.s;\nparseFlags.A = parseFlags.a;\nparseFlags.ZZZZ = parseFlags.ZZZ = parseFlags.ZZ = parseFlags.Z;\n\nfunction resolveConfig(config, locales) {\n  // Get the detected locale string\n  var detLocale = new Intl.DateTimeFormat().resolvedOptions().locale; // Resolve the locale id\n\n  var id;\n\n  if (isString_1(config)) {\n    id = config;\n  } else if (has(config, 'id')) {\n    id = config.id;\n  }\n\n  id = (id || detLocale).toLowerCase();\n  var localeKeys = Object.keys(locales);\n\n  var validKey = function validKey(k) {\n    return localeKeys.find(function (lk) {\n      return lk.toLowerCase() === k;\n    });\n  };\n\n  id = validKey(id) || validKey(id.substring(0, 2)) || detLocale; // Add fallback and spread default locale to prevent repetitive update loops\n\n  var defLocale = _objectSpread2(_objectSpread2(_objectSpread2({}, locales['en-IE']), locales[id]), {}, {\n    id: id\n  }); // Assign or merge defaults with provided config\n\n\n  config = isObject(config) ? defaultsDeep_1(config, defLocale) : defLocale; // Return resolved config\n\n  return config;\n}\n\nvar Locale = /*#__PURE__*/function () {\n  function Locale(config) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$locales = _ref.locales,\n        locales$1 = _ref$locales === void 0 ? locales : _ref$locales,\n        timezone = _ref.timezone;\n\n    _classCallCheck(this, Locale);\n\n    var _resolveConfig = resolveConfig(config, locales$1),\n        id = _resolveConfig.id,\n        firstDayOfWeek = _resolveConfig.firstDayOfWeek,\n        masks = _resolveConfig.masks;\n\n    this.id = id;\n    this.daysInWeek = daysInWeek;\n    this.firstDayOfWeek = clamp_1(firstDayOfWeek, 1, daysInWeek);\n    this.masks = masks;\n    this.timezone = timezone || undefined;\n    this.dayNames = this.getDayNames('long');\n    this.dayNamesShort = this.getDayNames('short');\n    this.dayNamesShorter = this.dayNamesShort.map(function (s) {\n      return s.substring(0, 2);\n    });\n    this.dayNamesNarrow = this.getDayNames('narrow');\n    this.monthNames = this.getMonthNames('long');\n    this.monthNamesShort = this.getMonthNames('short');\n    this.amPm = ['am', 'pm'];\n    this.monthData = {}; // Bind methods\n\n    this.getMonthComps = this.getMonthComps.bind(this);\n    this.parse = this.parse.bind(this);\n    this.format = this.format.bind(this);\n    this.toPage = this.toPage.bind(this);\n  }\n\n  _createClass(Locale, [{\n    key: \"format\",\n    value: function format(date, mask) {\n      var _this = this;\n\n      date = this.normalizeDate(date);\n      if (!date) return '';\n      mask = this.normalizeMasks(mask)[0];\n      var literals = []; // Make literals inactive by replacing them with ??\n\n      mask = mask.replace(literal, function ($0, $1) {\n        literals.push($1);\n        return '??';\n      });\n      var timezone = /Z$/.test(mask) ? 'utc' : this.timezone;\n      var dateParts = this.getDateParts(date, timezone); // Apply formatting rules\n\n      mask = mask.replace(token, function ($0) {\n        return $0 in formatFlags ? formatFlags[$0](dateParts, _this) : $0.slice(1, $0.length - 1);\n      }); // Inline literal values back into the formatted value\n\n      return mask.replace(/\\?\\?/g, function () {\n        return literals.shift();\n      });\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(dateString, mask) {\n      var _this2 = this;\n\n      var masks = this.normalizeMasks(mask);\n      return masks.map(function (m) {\n        if (typeof m !== 'string') {\n          throw new Error('Invalid mask in fecha.parse');\n        } // Reset string value\n\n\n        var str = dateString; // Avoid regular expression denial of service, fail early for really long strings\n        // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n\n        if (str.length > 1000) {\n          return false;\n        }\n\n        var isValid = true;\n        var dateInfo = {};\n        m.replace(token, function ($0) {\n          if (parseFlags[$0]) {\n            var info = parseFlags[$0];\n            var index = str.search(info[0]);\n\n            if (!~index) {\n              isValid = false;\n            } else {\n              str.replace(info[0], function (result) {\n                info[1](dateInfo, result, _this2);\n                str = str.substr(index + result.length);\n                return result;\n              });\n            }\n          }\n\n          return parseFlags[$0] ? '' : $0.slice(1, $0.length - 1);\n        });\n\n        if (!isValid) {\n          return false;\n        }\n\n        var today = new Date();\n\n        if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {\n          dateInfo.hour = +dateInfo.hour + 12;\n        } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {\n          dateInfo.hour = 0;\n        }\n\n        var date;\n\n        if (dateInfo.timezoneOffset != null) {\n          dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;\n          date = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));\n        } else {\n          date = _this2.getDateFromParts({\n            year: dateInfo.year || today.getFullYear(),\n            month: (dateInfo.month || 0) + 1,\n            day: dateInfo.day || 1,\n            hours: dateInfo.hour || 0,\n            minutes: dateInfo.minute || 0,\n            seconds: dateInfo.second || 0,\n            milliseconds: dateInfo.millisecond || 0\n          });\n        }\n\n        return date;\n      }).find(function (d) {\n        return d;\n      }) || new Date(dateString);\n    } // Normalizes mask(s) as an array with replaced mask macros\n\n  }, {\n    key: \"normalizeMasks\",\n    value: function normalizeMasks(masks) {\n      var _this3 = this;\n\n      return (arrayHasItems(masks) && masks || [isString_1(masks) && masks || 'YYYY-MM-DD']).map(function (m) {\n        return maskMacros.reduce(function (prev, curr) {\n          return prev.replace(curr, _this3.masks[curr] || '');\n        }, m);\n      });\n    }\n  }, {\n    key: \"normalizeDate\",\n    value: function normalizeDate(d) {\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var result = null;\n      var type = config.type,\n          fillDate = config.fillDate;\n      var mask = config.mask,\n          patch = config.patch,\n          time = config.time;\n      var auto = type === 'auto' || !type;\n\n      if (isNumber_1(d)) {\n        type = 'number';\n        result = new Date(+d);\n      } else if (isString_1(d)) {\n        type = 'string';\n        result = d ? this.parse(d, mask || 'iso') : null;\n      } else if (isObject(d)) {\n        type = 'object';\n        result = this.getDateFromParts(d);\n      } else {\n        type = 'date';\n        result = isDate(d) ? new Date(d.getTime()) : null;\n      }\n\n      if (result && patch) {\n        fillDate = fillDate == null ? new Date() : this.normalizeDate(fillDate);\n\n        var parts = _objectSpread2(_objectSpread2({}, this.getDateParts(fillDate)), pick_1(this.getDateParts(result), PATCH_KEYS[patch]));\n\n        result = this.getDateFromParts(parts);\n      }\n\n      if (auto) config.type = type;\n\n      if (result && !isNaN(result.getTime())) {\n        if (time) {\n          result = this.adjustTimeForDate(result, {\n            timeAdjust: time\n          });\n        }\n\n        return result;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"denormalizeDate\",\n    value: function denormalizeDate(date) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          type = _ref2.type,\n          mask = _ref2.mask;\n\n      switch (type) {\n        case 'number':\n          return date ? date.getTime() : NaN;\n\n        case 'string':\n          return date ? this.format(date, mask || 'iso') : '';\n\n        default:\n          return date ? new Date(date) : null;\n      }\n    }\n  }, {\n    key: \"adjustTimeForDate\",\n    value: function adjustTimeForDate(date, _ref3) {\n      var timeAdjust = _ref3.timeAdjust;\n\n      if (timeAdjust) {\n        var dateParts = this.getDateParts(date);\n\n        if (timeAdjust === 'now') {\n          var timeParts = this.getDateParts(new Date());\n          dateParts.hours = timeParts.hours;\n          dateParts.minutes = timeParts.minutes;\n          dateParts.seconds = timeParts.seconds;\n          dateParts.milliseconds = timeParts.milliseconds;\n        } else {\n          var d = new Date(\"2000-01-01T\".concat(timeAdjust, \"Z\"));\n          dateParts.hours = d.getUTCHours();\n          dateParts.minutes = d.getUTCMinutes();\n          dateParts.seconds = d.getUTCSeconds();\n          dateParts.milliseconds = d.getUTCMilliseconds();\n        }\n\n        date = this.getDateFromParts(dateParts);\n      }\n\n      return date;\n    }\n  }, {\n    key: \"normalizeDates\",\n    value: function normalizeDates(dates, opts) {\n      opts = opts || {};\n      opts.locale = this; // Assign dates\n\n      return (isArrayLikeObject_1(dates) ? dates : [dates]).map(function (d) {\n        return d && (d instanceof DateInfo ? d : new DateInfo(d, opts));\n      }).filter(function (d) {\n        return d;\n      });\n    }\n  }, {\n    key: \"getDateParts\",\n    value: function getDateParts(date) {\n      var timezone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.timezone;\n      if (!date) return null;\n      var tzDate = date;\n\n      if (timezone) {\n        var normDate = new Date(date.toLocaleString('en-US', {\n          timeZone: timezone\n        }));\n        normDate.setMilliseconds(date.getMilliseconds());\n        var diff = normDate.getTime() - date.getTime();\n        tzDate = new Date(date.getTime() + diff);\n      }\n\n      var milliseconds = tzDate.getMilliseconds();\n      var seconds = tzDate.getSeconds();\n      var minutes = tzDate.getMinutes();\n      var hours = tzDate.getHours();\n      var month = tzDate.getMonth() + 1;\n      var year = tzDate.getFullYear();\n      var comps = this.getMonthComps(month, year);\n      var day = tzDate.getDate();\n      var dayFromEnd = comps.days - day + 1;\n      var weekday = tzDate.getDay() + 1;\n      var weekdayOrdinal = Math.floor((day - 1) / 7 + 1);\n      var weekdayOrdinalFromEnd = Math.floor((comps.days - day) / 7 + 1);\n      var week = Math.ceil((day + Math.abs(comps.firstWeekday - comps.firstDayOfWeek)) / 7);\n      var weekFromEnd = comps.weeks - week + 1;\n      var parts = {\n        milliseconds: milliseconds,\n        seconds: seconds,\n        minutes: minutes,\n        hours: hours,\n        day: day,\n        dayFromEnd: dayFromEnd,\n        weekday: weekday,\n        weekdayOrdinal: weekdayOrdinal,\n        weekdayOrdinalFromEnd: weekdayOrdinalFromEnd,\n        week: week,\n        weekFromEnd: weekFromEnd,\n        month: month,\n        year: year,\n        date: date,\n        isValid: true\n      };\n      parts.timezoneOffset = this.getTimezoneOffset(parts);\n      return parts;\n    }\n  }, {\n    key: \"getDateFromParts\",\n    value: function getDateFromParts(parts) {\n      if (!parts) return null;\n      var d = new Date();\n      var _parts$year = parts.year,\n          year = _parts$year === void 0 ? d.getFullYear() : _parts$year,\n          _parts$month = parts.month,\n          month = _parts$month === void 0 ? d.getMonth() + 1 : _parts$month,\n          _parts$day = parts.day,\n          day = _parts$day === void 0 ? d.getDate() : _parts$day,\n          _parts$hours = parts.hours,\n          hrs = _parts$hours === void 0 ? 0 : _parts$hours,\n          _parts$minutes = parts.minutes,\n          min = _parts$minutes === void 0 ? 0 : _parts$minutes,\n          _parts$seconds = parts.seconds,\n          sec = _parts$seconds === void 0 ? 0 : _parts$seconds,\n          _parts$milliseconds = parts.milliseconds,\n          ms = _parts$milliseconds === void 0 ? 0 : _parts$milliseconds;\n\n      if (this.timezone) {\n        var dateString = \"\".concat(pad(year, 4), \"-\").concat(pad(month, 2), \"-\").concat(pad(day, 2), \"T\").concat(pad(hrs, 2), \":\").concat(pad(min, 2), \":\").concat(pad(sec, 2), \".\").concat(pad(ms, 3));\n        return toDate$1(dateString, {\n          timeZone: this.timezone\n        });\n      }\n\n      return new Date(year, month - 1, day, hrs, min, sec, ms);\n    }\n  }, {\n    key: \"getTimezoneOffset\",\n    value: function getTimezoneOffset(parts) {\n      var y = parts.year,\n          m = parts.month,\n          d = parts.day,\n          _parts$hours2 = parts.hours,\n          hrs = _parts$hours2 === void 0 ? 0 : _parts$hours2,\n          _parts$minutes2 = parts.minutes,\n          min = _parts$minutes2 === void 0 ? 0 : _parts$minutes2,\n          _parts$seconds2 = parts.seconds,\n          sec = _parts$seconds2 === void 0 ? 0 : _parts$seconds2,\n          _parts$milliseconds2 = parts.milliseconds,\n          ms = _parts$milliseconds2 === void 0 ? 0 : _parts$milliseconds2;\n      var date;\n      var utcDate = new Date(Date.UTC(y, m - 1, d, hrs, min, sec, ms));\n\n      if (this.timezone) {\n        var dateString = \"\".concat(pad(y, 4), \"-\").concat(pad(m, 2), \"-\").concat(pad(d, 2), \"T\").concat(pad(hrs, 2), \":\").concat(pad(min, 2), \":\").concat(pad(sec, 2), \".\").concat(pad(ms, 3));\n        date = toDate$1(dateString, {\n          timeZone: this.timezone\n        });\n      } else {\n        date = new Date(y, m - 1, d, hrs, min, sec, ms);\n      }\n\n      return (date - utcDate) / 60000;\n    }\n  }, {\n    key: \"toPage\",\n    value: function toPage(arg, fromPage) {\n      if (isNumber_1(arg)) {\n        return addPages(fromPage, arg);\n      }\n\n      if (isString_1(arg)) {\n        return this.getDateParts(this.normalizeDate(arg));\n      }\n\n      if (isDate(arg)) {\n        return this.getDateParts(arg);\n      }\n\n      if (isObject(arg)) {\n        return arg;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getMonthDates\",\n    value: function getMonthDates() {\n      var year = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2000;\n      var dates = [];\n\n      for (var i = 0; i < 12; i++) {\n        dates.push(new Date(year, i, 15));\n      }\n\n      return dates;\n    }\n  }, {\n    key: \"getMonthNames\",\n    value: function getMonthNames(length) {\n      var dtf = new Intl.DateTimeFormat(this.id, {\n        month: length,\n        timezome: 'UTC'\n      });\n      return this.getMonthDates().map(function (d) {\n        return dtf.format(d);\n      });\n    }\n  }, {\n    key: \"getWeekdayDates\",\n    value: function getWeekdayDates() {\n      var firstDayOfWeek = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.firstDayOfWeek;\n      var dates = [];\n      var year = 2020;\n      var month = 1;\n      var day = 5 + firstDayOfWeek - 1;\n\n      for (var i = 0; i < daysInWeek; i++) {\n        dates.push(this.getDateFromParts({\n          year: year,\n          month: month,\n          day: day + i,\n          hours: 12\n        }));\n      }\n\n      return dates;\n    }\n  }, {\n    key: \"getDayNames\",\n    value: function getDayNames(length) {\n      var dtf = new Intl.DateTimeFormat(this.id, {\n        weekday: length,\n        timeZone: this.timezone\n      });\n      return this.getWeekdayDates(1).map(function (d) {\n        return dtf.format(d);\n      });\n    } // Days/month/year components for a given month and year\n\n  }, {\n    key: \"getMonthComps\",\n    value: function getMonthComps(month, year) {\n      var key = \"\".concat(month, \"-\").concat(year);\n      var comps = this.monthData[key];\n\n      if (!comps) {\n        var inLeapYear = year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n        var firstDayOfMonth = new Date(year, month - 1, 1);\n        var firstWeekday = firstDayOfMonth.getDay() + 1;\n        var days = month === 2 && inLeapYear ? 29 : daysInMonths[month - 1];\n        var weekStartsOn = this.firstDayOfWeek - 1;\n        var weeks = getWeeksInMonth(firstDayOfMonth, {\n          weekStartsOn: weekStartsOn\n        });\n        var weeknumbers = [];\n        var isoWeeknumbers = [];\n\n        for (var i = 0; i < weeks; i++) {\n          var date = addDays(firstDayOfMonth, i * 7);\n          weeknumbers.push(getWeek(date, {\n            weekStartsOn: weekStartsOn\n          }));\n          isoWeeknumbers.push(getISOWeek(date));\n        }\n\n        comps = {\n          firstDayOfWeek: this.firstDayOfWeek,\n          inLeapYear: inLeapYear,\n          firstWeekday: firstWeekday,\n          days: days,\n          weeks: weeks,\n          month: month,\n          year: year,\n          weeknumbers: weeknumbers,\n          isoWeeknumbers: isoWeeknumbers\n        };\n        this.monthData[key] = comps;\n      }\n\n      return comps;\n    } // Days/month/year components for today's month\n\n  }, {\n    key: \"getThisMonthComps\",\n    value: function getThisMonthComps() {\n      var _this$getDateParts = this.getDateParts(new Date()),\n          month = _this$getDateParts.month,\n          year = _this$getDateParts.year;\n\n      return this.getMonthComps(month, year);\n    } // Day/month/year components for previous month\n\n  }, {\n    key: \"getPrevMonthComps\",\n    value: function getPrevMonthComps(month, year) {\n      if (month === 1) return this.getMonthComps(12, year - 1);\n      return this.getMonthComps(month - 1, year);\n    } // Day/month/year components for next month\n\n  }, {\n    key: \"getNextMonthComps\",\n    value: function getNextMonthComps(month, year) {\n      if (month === 12) return this.getMonthComps(1, year + 1);\n      return this.getMonthComps(month + 1, year);\n    }\n  }, {\n    key: \"getDayId\",\n    value: function getDayId(date) {\n      return this.format(date, 'YYYY-MM-DD');\n    } // Builds day components for a given page\n\n  }, {\n    key: \"getCalendarDays\",\n    value: function getCalendarDays(_ref4) {\n      var _this4 = this;\n\n      var weeks = _ref4.weeks,\n          monthComps = _ref4.monthComps,\n          prevMonthComps = _ref4.prevMonthComps,\n          nextMonthComps = _ref4.nextMonthComps;\n      var days = [];\n      var firstDayOfWeek = monthComps.firstDayOfWeek,\n          firstWeekday = monthComps.firstWeekday,\n          isoWeeknumbers = monthComps.isoWeeknumbers,\n          weeknumbers = monthComps.weeknumbers;\n      var prevMonthDaysToShow = firstWeekday + (firstWeekday < firstDayOfWeek ? daysInWeek : 0) - firstDayOfWeek;\n      var prevMonth = true;\n      var thisMonth = false;\n      var nextMonth = false; // Formatter for aria labels\n\n      var formatter = new Intl.DateTimeFormat(this.id, {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      }); // Init counters with previous month's data\n\n      var day = prevMonthComps.days - prevMonthDaysToShow + 1;\n      var dayFromEnd = prevMonthComps.days - day + 1;\n      var weekdayOrdinal = Math.floor((day - 1) / daysInWeek + 1);\n      var weekdayOrdinalFromEnd = 1;\n      var week = prevMonthComps.weeks;\n      var weekFromEnd = 1;\n      var month = prevMonthComps.month;\n      var year = prevMonthComps.year; // Store todays comps\n\n      var today = new Date();\n      var todayDay = today.getDate();\n      var todayMonth = today.getMonth() + 1;\n      var todayYear = today.getFullYear();\n\n      var dft = function dft(y, m, d) {\n        return function (hours, minutes, seconds, milliseconds) {\n          return _this4.normalizeDate({\n            year: y,\n            month: m,\n            day: d,\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds,\n            milliseconds: milliseconds\n          });\n        };\n      }; // Cycle through 6 weeks (max in month)\n\n\n      for (var w = 1; w <= weeks; w++) {\n        // Cycle through days in week\n        for (var i = 1, weekday = firstDayOfWeek; i <= daysInWeek; i++, weekday += weekday === daysInWeek ? 1 - daysInWeek : 1) {\n          // We need to know when to start counting actual month days\n          if (prevMonth && weekday === firstWeekday) {\n            // Reset counters for current month\n            day = 1;\n            dayFromEnd = monthComps.days;\n            weekdayOrdinal = Math.floor((day - 1) / daysInWeek + 1);\n            weekdayOrdinalFromEnd = Math.floor((monthComps.days - day) / daysInWeek + 1);\n            week = 1;\n            weekFromEnd = monthComps.weeks;\n            month = monthComps.month;\n            year = monthComps.year; // ...and flag we're tracking actual month days\n\n            prevMonth = false;\n            thisMonth = true;\n          } // Append day info for the current week\n          // Note: this might or might not be an actual month day\n          //  We don't know how the UI wants to display various days,\n          //  so we'll supply all the data we can\n\n\n          var dateFromTime = dft(year, month, day);\n          var range = {\n            start: dateFromTime(0, 0, 0),\n            end: dateFromTime(23, 59, 59, 999)\n          };\n          var date = range.start;\n          var id = \"\".concat(pad(year, 4), \"-\").concat(pad(month, 2), \"-\").concat(pad(day, 2));\n          var weekdayPosition = i;\n          var weekdayPositionFromEnd = daysInWeek - i;\n          var weeknumber = weeknumbers[w - 1];\n          var isoWeeknumber = isoWeeknumbers[w - 1];\n          var isToday = day === todayDay && month === todayMonth && year === todayYear;\n          var isFirstDay = thisMonth && day === 1;\n          var isLastDay = thisMonth && day === monthComps.days;\n          var onTop = w === 1;\n          var onBottom = w === weeks;\n          var onLeft = i === 1;\n          var onRight = i === daysInWeek;\n          days.push({\n            id: id,\n            label: day.toString(),\n            ariaLabel: formatter.format(new Date(year, month - 1, day)),\n            day: day,\n            dayFromEnd: dayFromEnd,\n            weekday: weekday,\n            weekdayPosition: weekdayPosition,\n            weekdayPositionFromEnd: weekdayPositionFromEnd,\n            weekdayOrdinal: weekdayOrdinal,\n            weekdayOrdinalFromEnd: weekdayOrdinalFromEnd,\n            week: week,\n            weekFromEnd: weekFromEnd,\n            weeknumber: weeknumber,\n            isoWeeknumber: isoWeeknumber,\n            month: month,\n            year: year,\n            dateFromTime: dateFromTime,\n            date: date,\n            range: range,\n            isToday: isToday,\n            isFirstDay: isFirstDay,\n            isLastDay: isLastDay,\n            inMonth: thisMonth,\n            inPrevMonth: prevMonth,\n            inNextMonth: nextMonth,\n            onTop: onTop,\n            onBottom: onBottom,\n            onLeft: onLeft,\n            onRight: onRight,\n            classes: [\"id-\".concat(id), \"day-\".concat(day), \"day-from-end-\".concat(dayFromEnd), \"weekday-\".concat(weekday), \"weekday-position-\".concat(weekdayPosition), \"weekday-ordinal-\".concat(weekdayOrdinal), \"weekday-ordinal-from-end-\".concat(weekdayOrdinalFromEnd), \"week-\".concat(week), \"week-from-end-\".concat(weekFromEnd), {\n              'is-today': isToday,\n              'is-first-day': isFirstDay,\n              'is-last-day': isLastDay,\n              'in-month': thisMonth,\n              'in-prev-month': prevMonth,\n              'in-next-month': nextMonth,\n              'on-top': onTop,\n              'on-bottom': onBottom,\n              'on-left': onLeft,\n              'on-right': onRight\n            }]\n          }); // See if we've hit the last day of the month\n\n          if (thisMonth && isLastDay) {\n            thisMonth = false;\n            nextMonth = true; // Reset counters to next month's data\n\n            day = 1;\n            dayFromEnd = nextMonthComps.days;\n            weekdayOrdinal = 1;\n            weekdayOrdinalFromEnd = Math.floor((nextMonthComps.days - day) / daysInWeek + 1);\n            week = 1;\n            weekFromEnd = nextMonthComps.weeks;\n            month = nextMonthComps.month;\n            year = nextMonthComps.year; // Still in the middle of the month (hasn't ended yet)\n          } else {\n            day++;\n            dayFromEnd--;\n            weekdayOrdinal = Math.floor((day - 1) / daysInWeek + 1);\n            weekdayOrdinalFromEnd = Math.floor((monthComps.days - day) / daysInWeek + 1);\n          }\n        } // Append week days\n\n\n        week++;\n        weekFromEnd--;\n      }\n\n      return days;\n    }\n  }]);\n\n  return Locale;\n}();\n\nvar Attribute = /*#__PURE__*/function () {\n  function Attribute(_ref, theme, locale) {\n    var key = _ref.key,\n        hashcode = _ref.hashcode,\n        highlight = _ref.highlight,\n        content = _ref.content,\n        dot = _ref.dot,\n        bar = _ref.bar,\n        popover = _ref.popover,\n        dates = _ref.dates,\n        excludeDates = _ref.excludeDates,\n        excludeMode = _ref.excludeMode,\n        customData = _ref.customData,\n        order = _ref.order,\n        pinPage = _ref.pinPage;\n\n    _classCallCheck(this, Attribute);\n\n    this.key = isUndefined_1(key) ? createGuid() : key;\n    this.hashcode = hashcode;\n    this.customData = customData;\n    this.order = order || 0;\n    this.dateOpts = {\n      order: order,\n      locale: locale\n    };\n    this.pinPage = pinPage; // Normalize attribute types\n\n    if (highlight) {\n      this.highlight = theme.normalizeHighlight(highlight);\n    }\n\n    if (content) {\n      this.content = theme.normalizeContent(content);\n    }\n\n    if (dot) {\n      this.dot = theme.normalizeDot(dot);\n    }\n\n    if (bar) {\n      this.bar = theme.normalizeBar(bar);\n    }\n\n    if (popover) {\n      this.popover = popover;\n    } // Assign dates\n\n\n    this.dates = locale.normalizeDates(dates, this.dateOpts);\n    this.hasDates = !!arrayHasItems(this.dates); // Assign exclude dates\n\n    this.excludeDates = locale.normalizeDates(excludeDates, this.dateOpts);\n    this.hasExcludeDates = !!arrayHasItems(this.excludeDates);\n    this.excludeMode = excludeMode || 'intersects'; // Add infinite date range if excluded dates exist\n\n    if (this.hasExcludeDates && !this.hasDates) {\n      this.dates.push(new DateInfo({}, this.dateOpts));\n      this.hasDates = true;\n    }\n\n    this.isComplex = some(this.dates, function (d) {\n      return d.isComplex;\n    });\n  } // Accepts: Date or date range object\n  // Returns: First date that partially intersects the given date\n\n\n  _createClass(Attribute, [{\n    key: \"intersectsDate\",\n    value: function intersectsDate(date) {\n      date = date instanceof DateInfo ? date : new DateInfo(date, this.dateOpts);\n      return !this.excludesDate(date) && (this.dates.find(function (d) {\n        return d.intersectsDate(date);\n      }) || false);\n    } // Accepts: Date or date range object\n    // Returns: First date that completely includes the given date\n\n  }, {\n    key: \"includesDate\",\n    value: function includesDate(date) {\n      date = date instanceof DateInfo ? date : new DateInfo(date, this.dateOpts);\n      return !this.excludesDate(date) && (this.dates.find(function (d) {\n        return d.includesDate(date);\n      }) || false);\n    }\n  }, {\n    key: \"excludesDate\",\n    value: function excludesDate(date) {\n      var _this = this;\n\n      date = date instanceof DateInfo ? date : new DateInfo(date, this.dateOpts);\n      return this.hasExcludeDates && this.excludeDates.find(function (ed) {\n        return _this.excludeMode === 'intersects' && ed.intersectsDate(date) || _this.excludeMode === 'includes' && ed.includesDate(date);\n      });\n    } // Accepts: Day object\n    // Returns: First attribute date info that occurs on given day.\n\n  }, {\n    key: \"intersectsDay\",\n    value: function intersectsDay(day) {\n      return !this.excludesDay(day) && (this.dates.find(function (d) {\n        return d.intersectsDay(day);\n      }) || false);\n    }\n  }, {\n    key: \"excludesDay\",\n    value: function excludesDay(day) {\n      return this.hasExcludeDates && this.excludeDates.find(function (ed) {\n        return ed.intersectsDay(day);\n      });\n    }\n  }]);\n\n  return Attribute;\n}();\n\nvar maxSwipeTime = 300;\nvar minHorizontalSwipeDistance = 60;\nvar maxVerticalSwipeDistance = 80;\nvar touch = {\n  maxSwipeTime: maxSwipeTime,\n  minHorizontalSwipeDistance: minHorizontalSwipeDistance,\n  maxVerticalSwipeDistance: maxVerticalSwipeDistance\n};\nvar title = \"MMMM YYYY\";\nvar weekdays = \"W\";\nvar navMonths = \"MMM\";\nvar input = [\"L\", \"YYYY-MM-DD\", \"YYYY/MM/DD\"];\nvar inputDateTime = [\"L h:mm A\", \"YYYY-MM-DD h:mm A\", \"YYYY/MM/DD h:mm A\"];\nvar inputDateTime24hr = [\"L HH:mm\", \"YYYY-MM-DD HH:mm\", \"YYYY/MM/DD HH:mm\"];\nvar inputTime = [\"h:mm A\"];\nvar inputTime24hr = [\"HH:mm\"];\nvar dayPopover = \"WWW, MMM D, YYYY\";\nvar data = [\"L\", \"YYYY-MM-DD\", \"YYYY/MM/DD\"];\nvar model = \"iso\";\nvar iso = \"YYYY-MM-DDTHH:mm:ssXXX\";\nvar masks = {\n  title: title,\n  weekdays: weekdays,\n  navMonths: navMonths,\n  input: input,\n  inputDateTime: inputDateTime,\n  inputDateTime24hr: inputDateTime24hr,\n  inputTime: inputTime,\n  inputTime24hr: inputTime24hr,\n  dayPopover: dayPopover,\n  data: data,\n  model: model,\n  iso: iso\n};\nvar sm = \"640px\";\nvar md = \"768px\";\nvar lg = \"1024px\";\nvar xl = \"1280px\";\nvar defaultScreens = {\n  sm: sm,\n  md: md,\n  lg: lg,\n  xl: xl\n};\nvar defaultConfig = {\n  componentPrefix: 'v',\n  color: 'blue',\n  isDark: false,\n  navVisibility: 'click',\n  titlePosition: 'center',\n  transition: 'slide-h',\n  touch: touch,\n  masks: masks,\n  screens: defaultScreens,\n  locales: locales,\n  datePicker: {\n    updateOnInput: true,\n    inputDebounce: 1000,\n    popover: {\n      visibility: 'hover-focus',\n      placement: 'bottom-start',\n      keepVisibleOnInput: false,\n      isInteractive: true\n    }\n  }\n};\nvar state = reactive(defaultConfig);\nvar computedLocales = computed(function () {\n  return mapValues_1(state.locales, function (v) {\n    v.masks = defaultsDeep_1(v.masks, state.masks);\n    return v;\n  });\n});\n\nvar getDefault = function getDefault(path) {\n  if (window && has(window.__vcalendar__, path)) {\n    return get_1(window.__vcalendar__, path);\n  }\n\n  return get_1(state, path);\n};\n\nvar setup = function setup(userDefaults) {\n  return defaultsDeep_1(state, userDefaults);\n};\n\nvar rootMixin = {\n  props: {\n    color: {\n      type: String,\n      default: getDefault('color')\n    },\n    isDark: {\n      type: Boolean,\n      default: getDefault('isDark')\n    },\n    firstDayOfWeek: Number,\n    masks: Object,\n    locale: [String, Object],\n    timezone: String,\n    minDate: null,\n    maxDate: null,\n    minDateExact: null,\n    maxDateExact: null,\n    disabledDates: null,\n    availableDates: null,\n    theme: null\n  },\n  computed: {\n    $theme: function $theme() {\n      // Return the theme prop if it is an instance of the Theme class\n      if (this.theme instanceof Theme) return this.theme; // Create the theme\n\n      return new Theme({\n        color: this.color,\n        isDark: this.isDark\n      });\n    },\n    $locale: function $locale() {\n      // Return the locale prop if it is an instance of the Locale class\n      if (this.locale instanceof Locale) return this.locale; // Build up a base config from component props\n\n      var config = isObject(this.locale) ? this.locale : {\n        id: this.locale,\n        firstDayOfWeek: this.firstDayOfWeek,\n        masks: this.masks\n      }; // Return new locale\n\n      return new Locale(config, {\n        locales: computedLocales.value,\n        timezone: this.timezone\n      });\n    },\n    disabledDates_: function disabledDates_() {\n      var dates = this.normalizeDates(this.disabledDates);\n      var minDate = this.minDate,\n          minDateExact = this.minDateExact,\n          maxDate = this.maxDate,\n          maxDateExact = this.maxDateExact; // Add disabled range for min date\n\n      if (minDateExact || minDate) {\n        var end = minDateExact ? this.normalizeDate(minDateExact) : this.normalizeDate(minDate, {\n          time: '00:00:00'\n        });\n        dates.push({\n          start: null,\n          end: new Date(end.getTime() - 1000)\n        });\n      } // Add disabled range for min date\n\n\n      if (maxDateExact || maxDate) {\n        var start = maxDateExact ? this.normalizeDate(maxDateExact) : this.normalizeDate(maxDate, {\n          time: '23:59:59'\n        });\n        dates.push({\n          start: new Date(start.getTime() + 1000),\n          end: null\n        });\n      }\n\n      return dates;\n    },\n    availableDates_: function availableDates_() {\n      return this.normalizeDates(this.availableDates);\n    },\n    disabledAttribute: function disabledAttribute() {\n      return new Attribute({\n        key: 'disabled',\n        dates: this.disabledDates_,\n        excludeDates: this.availableDates_,\n        excludeMode: 'includes',\n        order: 100\n      }, this.$theme, this.$locale);\n    }\n  },\n  // created() {\n  //   setupScreens(this.$defaults.screens);\n  // },\n  methods: {\n    formatDate: function formatDate(date, mask) {\n      return this.$locale ? this.$locale.format(date, mask) : '';\n    },\n    parseDate: function parseDate(text, mask) {\n      if (!this.$locale) return null;\n      var value = this.$locale.parse(text, mask);\n      return isDate(value) ? value : null;\n    },\n    normalizeDate: function normalizeDate(date, config) {\n      return this.$locale ? this.$locale.normalizeDate(date, config) : date;\n    },\n    normalizeDates: function normalizeDates(dates) {\n      return this.$locale.normalizeDates(dates, {\n        isFullDay: true\n      });\n    },\n    pageForDate: function pageForDate(date) {\n      return this.$locale.getDateParts(this.normalizeDate(date));\n    },\n    pageForThisMonth: function pageForThisMonth() {\n      return this.pageForDate(new Date());\n    }\n  }\n};\nvar slotMixin = {\n  methods: {\n    safeSlot: function safeSlot(name, args) {\n      var def = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return isFunction_1(this.$slots[name]) ? this.$slots[name](args) : def;\n    }\n  }\n};\nvar childMixin$1 = childMixin;\nvar rootMixin$1 = rootMixin;\nvar slotMixin$1 = slotMixin;\nexport { Attribute as A, PATCH as P, isUndefined_1 as a, toDate as b, toInteger as c, defaultScreens as d, rootMixin$1 as e, slotMixin$1 as f, getDefault as g, isNumber_1 as h, isString_1 as i, addDays as j, childMixin$1 as k, mapValues_1 as m, requiredArgs as r, setup as s, toPairs_1 as t };","map":null,"metadata":{},"sourceType":"module"}