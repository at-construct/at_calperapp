{"ast":null,"code":"import { i as isArrayLike_1, _ as _baseEach, a as _baseIteratee, b as isArray_1, c as _arrayMap, d as isArrayLikeObject_1, h as has, g as get_1, e as defaultsDeep_1, f as isFunction_1 } from './helpers-8d5d752d.js';\nimport { reactive } from 'vue';\nimport { i as isString_1, d as defaultScreens, a as isUndefined_1, m as mapValues_1, t as toPairs_1, s as setup$1 } from './index-fcd0222c.js';\nimport { s as script } from './Calendar.vue_vue&type=style&index=0&id=d5c6e324&lang-dc13083a.js';\nexport { s as Calendar } from './Calendar.vue_vue&type=style&index=0&id=d5c6e324&lang-dc13083a.js';\nimport '@popperjs/core';\nimport './CalendarPane.vue_vue&type=style&index=0&id=bf16a152&lang-d223e4a0.js';\nimport './CalendarNav-c0eed85e.js';\nimport { s as script$2 } from './Popover.vue_vue&type=style&index=0&id=0652eeb9&lang-c768a42a.js';\nexport { s as Popover } from './Popover.vue_vue&type=style&index=0&id=0652eeb9&lang-c768a42a.js';\nimport './CustomTransition.js';\nimport './style-inject.es-1f59c1d0.js';\nimport script$3 from './PopoverRow.js';\nexport { default as PopoverRow } from './PopoverRow.js';\nimport './SvgIcon.js';\nimport './CalendarDay.vue_vue&type=style&index=0&id=07b52efe&lang-c93ef64c.js';\nimport './TimeSelect.js';\nimport './TimePicker.js';\nimport { s as script$1 } from './DatePicker.vue_vue&type=script&lang-86d93c4e.js';\nexport { s as DatePicker } from './DatePicker.vue_vue&type=script&lang-86d93c4e.js';\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\n\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike_1(collection) ? Array(collection.length) : [];\n\n  _baseEach(collection, function (value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n\n  return result;\n}\n\nvar _baseMap = baseMap;\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\n\nfunction map(collection, iteratee) {\n  var func = isArray_1(collection) ? _arrayMap : _baseMap;\n  return func(collection, _baseIteratee(iteratee));\n}\n\nvar map_1 = map;\nvar components = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Calendar: script,\n  DatePicker: script$1,\n  Popover: script$2,\n  PopoverRow: script$3\n}); // This function gratuitously borrowed from TailwindCSS\n// https://github.com/tailwindcss/tailwindcss/blob/master/src/util/buildMediaQuery.js\n\nfunction buildMediaQuery(screens) {\n  // Default min width\n  if (isString_1(screens)) {\n    screens = {\n      min: screens\n    };\n  } // Wrap in array\n\n\n  if (!isArrayLikeObject_1(screens)) {\n    screens = [screens];\n  }\n\n  return screens.map(function (screen) {\n    if (has(screen, 'raw')) {\n      return screen.raw;\n    }\n\n    return map_1(screen, function (value, feature) {\n      feature = get_1({\n        min: 'min-width',\n        max: 'max-width'\n      }, feature, feature);\n      return \"(\".concat(feature, \": \").concat(value, \")\");\n    }).join(' and ');\n  }).join(', ');\n}\n\nvar screensPlugin = {\n  install: function install(app, screens) {\n    screens = defaultsDeep_1(screens, window && window.__screens__, defaultScreens);\n    var shouldRefreshQueries = true;\n    var state = reactive({\n      matches: [],\n      queries: []\n    });\n\n    var refreshMatches = function refreshMatches() {\n      state.matches = toPairs_1(state.queries).filter(function (p) {\n        return p[1].matches;\n      }).map(function (p) {\n        return p[0];\n      });\n    };\n\n    var refreshQueries = function refreshQueries() {\n      if (!shouldRefreshQueries || !window || !window.matchMedia) return;\n      state.queries = mapValues_1(screens, function (v) {\n        var query = window.matchMedia(buildMediaQuery(v));\n\n        if (isFunction_1(query.addEventListener)) {\n          query.addEventListener('change', refreshMatches);\n        } else {\n          // Deprecated 'MediaQueryList' API, < Safari 14, < Edge 16\n          query.addListener(refreshMatches);\n        }\n\n        return query;\n      });\n      shouldRefreshQueries = false;\n      refreshMatches();\n    }; // Global mixin that\n    // 1) Refreshes queries on first component mount\n    // 2) Provides '$screens' utility method that refreshes any time the screen matches update\n\n\n    app.mixin({\n      mounted: function mounted() {\n        refreshQueries();\n      },\n      computed: {\n        $screens: function $screens() {\n          return function (config, def) {\n            return state.matches.reduce(function (prev, curr) {\n              return has(config, curr) ? config[curr] : prev;\n            }, isUndefined_1(def) ? config.default : def);\n          };\n        }\n      }\n    });\n  }\n};\n\nvar setup = function setup(app, defaults) {\n  // Setup defaults\n  defaults = setup$1(defaults); // Use screens plugin\n\n  app.use(screensPlugin, defaults.screens);\n  return defaults;\n};\n\nvar install = function install(app, defaults) {\n  defaults = setup(app, defaults);\n\n  for (var componentKey in components) {\n    var component = components[componentKey];\n    app.component(\"\".concat(defaults.componentPrefix).concat(component.name), component);\n  }\n};\n\nexport default install;\nexport { screensPlugin as Screens, setup as SetupCalendar };","map":null,"metadata":{},"sourceType":"module"}