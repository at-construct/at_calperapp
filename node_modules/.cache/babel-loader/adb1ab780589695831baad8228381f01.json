{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// Styles\nimport \"../../../src/components/VColorPicker/VColorPickerEdit.sass\"; // Components\n\nimport VBtn from '../VBtn';\nimport VIcon from '../VIcon'; // Helpers\n\nimport { parseHex } from '../../util/colorUtils'; // Types\n\nimport Vue from 'vue';\nimport { fromRGBA, fromHexa, fromHSLA } from './util';\nexport var modes = {\n  rgba: {\n    inputs: [['r', 255, 'int'], ['g', 255, 'int'], ['b', 255, 'int'], ['a', 1, 'float']],\n    from: fromRGBA\n  },\n  hsla: {\n    inputs: [['h', 360, 'int'], ['s', 1, 'float'], ['l', 1, 'float'], ['a', 1, 'float']],\n    from: fromHSLA\n  },\n  hexa: {\n    from: fromHexa\n  }\n};\nexport default Vue.extend({\n  name: 'v-color-picker-edit',\n  props: {\n    color: Object,\n    disabled: Boolean,\n    hideAlpha: Boolean,\n    hideModeSwitch: Boolean,\n    mode: {\n      type: String,\n      default: 'rgba',\n      validator: function validator(v) {\n        return Object.keys(modes).includes(v);\n      }\n    }\n  },\n  data: function data() {\n    return {\n      modes: modes,\n      internalMode: this.mode\n    };\n  },\n  computed: {\n    currentMode: function currentMode() {\n      return this.modes[this.internalMode];\n    }\n  },\n  watch: {\n    mode: function mode(_mode) {\n      this.internalMode = _mode;\n    }\n  },\n  created: function created() {\n    this.internalMode = this.mode;\n  },\n  methods: {\n    getValue: function getValue(v, type) {\n      if (type === 'float') return Math.round(v * 100) / 100;else if (type === 'int') return Math.round(v);else return 0;\n    },\n    parseValue: function parseValue(v, type) {\n      if (type === 'float') return parseFloat(v);else if (type === 'int') return parseInt(v, 10) || 0;else return 0;\n    },\n    changeMode: function changeMode() {\n      var modes = Object.keys(this.modes);\n      var index = modes.indexOf(this.internalMode);\n      var newMode = modes[(index + 1) % modes.length];\n      this.internalMode = newMode;\n      this.$emit('update:mode', newMode);\n    },\n    genInput: function genInput(target, attrs, value, on) {\n      return this.$createElement('div', {\n        staticClass: 'v-color-picker__input'\n      }, [this.$createElement('input', {\n        key: target,\n        attrs: attrs,\n        domProps: {\n          value: value\n        },\n        on: on\n      }), this.$createElement('span', target.toUpperCase())]);\n    },\n    genInputs: function genInputs() {\n      var _this = this;\n\n      if (this.internalMode === 'hexa') {\n        var hex = this.color.hexa;\n        var value = this.hideAlpha && hex.endsWith('FF') ? hex.substr(0, 7) : hex;\n        return this.genInput('hex', {\n          maxlength: this.hideAlpha ? 7 : 9,\n          disabled: this.disabled\n        }, value, {\n          change: function change(e) {\n            var el = e.target;\n\n            _this.$emit('update:color', _this.currentMode.from(parseHex(el.value)));\n          }\n        });\n      } else {\n        var inputs = this.hideAlpha ? this.currentMode.inputs.slice(0, -1) : this.currentMode.inputs;\n        return inputs.map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 3),\n              target = _ref2[0],\n              max = _ref2[1],\n              type = _ref2[2];\n\n          var value = _this.color[_this.internalMode];\n          return _this.genInput(target, {\n            type: 'number',\n            min: 0,\n            max: max,\n            step: type === 'float' ? '0.01' : type === 'int' ? '1' : undefined,\n            disabled: _this.disabled\n          }, _this.getValue(value[target], type), {\n            input: function input(e) {\n              var el = e.target;\n\n              var newVal = _this.parseValue(el.value || '0', type);\n\n              _this.$emit('update:color', _this.currentMode.from(Object.assign({}, value, _defineProperty({}, target, newVal)), _this.color.alpha));\n            }\n          });\n        });\n      }\n    },\n    genSwitch: function genSwitch() {\n      return this.$createElement(VBtn, {\n        props: {\n          small: true,\n          icon: true,\n          disabled: this.disabled\n        },\n        on: {\n          click: this.changeMode\n        }\n      }, [this.$createElement(VIcon, '$unfold')]);\n    }\n  },\n  render: function render(h) {\n    return h('div', {\n      staticClass: 'v-color-picker__edit'\n    }, [this.genInputs(), !this.hideModeSwitch && this.genSwitch()]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}