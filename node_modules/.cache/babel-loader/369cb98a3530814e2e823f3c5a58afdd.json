{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport axios from 'axios';\nimport { serializeCalendar } from '../../functions/serializers';\nvar apiUrl = 'http://localhost:5000';\nvar state = {\n  calendars: [],\n  calendar: null\n};\nvar getters = {\n  calendars: function calendars(state) {\n    return state.calendars.map(function (calendar) {\n      return serializeCalendar(calendar);\n    });\n  },\n  calendar: function calendar(state) {\n    return serializeCalendar(state.calendar);\n  }\n};\nvar mutations = {\n  setCalendars: function setCalendars(state, calendars) {\n    return state.calendars = calendars;\n  },\n  appendCalendar: function appendCalendar(state, calendar) {\n    return state.calendars = [].concat(_toConsumableArray(state.calendars), [calendar]);\n  },\n  setCalendar: function setCalendar(state, calendar) {\n    return state.calendar = calendar;\n  }\n};\nvar actions = {\n  fetchCalendars: function fetchCalendars(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return axios.get(\"\".concat(apiUrl, \"/calendars\"));\n\n            case 3:\n              response = _context.sent;\n              commit('setCalendars', response.data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  createCalendar: function createCalendar(_ref2, calendar) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return axios.post(\"\".concat(apiUrl, \"/calendars\"), calendar);\n\n            case 3:\n              response = _context2.sent;\n              commit('appendCalendar', response.data);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  setCalendar: function setCalendar(_ref3, calendar) {\n    var commit = _ref3.commit;\n    commit('setCalendar', calendar);\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"sources":["/Users/at19830906/projects/CalRailsVueApp/app/javascript/store/modules/calendars.js"],"names":["axios","serializeCalendar","apiUrl","state","calendars","calendar","getters","map","mutations","setCalendars","appendCalendar","setCalendar","actions","fetchCalendars","commit","get","response","data","createCalendar","post","namespaced"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AAEA,IAAMC,MAAM,GAAG,uBAAf;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,SAAS,EAAE,EADC;AAEZC,EAAAA,QAAQ,EAAE;AAFE,CAAd;AAKA,IAAMC,OAAO,GAAG;AACdF,EAAAA,SAAS,EAAE,mBAAAD,KAAK;AAAA,WAAIA,KAAK,CAACC,SAAN,CAAgBG,GAAhB,CAAoB,UAAAF,QAAQ;AAAA,aAAIJ,iBAAiB,CAACI,QAAD,CAArB;AAAA,KAA5B,CAAJ;AAAA,GADF;AAEdA,EAAAA,QAAQ,EAAE,kBAAAF,KAAK;AAAA,WAAIF,iBAAiB,CAACE,KAAK,CAACE,QAAP,CAArB;AAAA;AAFD,CAAhB;AAKA,IAAMG,SAAS,GAAG;AAChBC,EAAAA,YAAY,EAAE,sBAACN,KAAD,EAAQC,SAAR;AAAA,WAAuBD,KAAK,CAACC,SAAN,GAAkBA,SAAzC;AAAA,GADE;AAEhBM,EAAAA,cAAc,EAAE,wBAACP,KAAD,EAAQE,QAAR;AAAA,WAAsBF,KAAK,CAACC,SAAN,gCAAsBD,KAAK,CAACC,SAA5B,IAAuCC,QAAvC,EAAtB;AAAA,GAFA;AAGhBM,EAAAA,WAAW,EAAE,qBAACR,KAAD,EAAQE,QAAR;AAAA,WAAsBF,KAAK,CAACE,QAAN,GAAiBA,QAAvC;AAAA;AAHG,CAAlB;AAMA,IAAMO,OAAO,GAAG;AACRC,EAAAA,cADQ,gCACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAVC,cAAAA,MAAU,QAAVA,MAAU;AAAA;AAAA,qBACRd,KAAK,CAACe,GAAN,WAAab,MAAb,gBADQ;;AAAA;AACzBc,cAAAA,QADyB;AAE/BF,cAAAA,MAAM,CAAC,cAAD,EAAiBE,QAAQ,CAACC,IAA1B,CAAN;;AAF+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGhC,GAJa;AAKRC,EAAAA,cALQ,iCAKmBb,QALnB,EAK6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAApBS,cAAAA,MAAoB,SAApBA,MAAoB;AAAA;AAAA,qBAClBd,KAAK,CAACmB,IAAN,WAAcjB,MAAd,iBAAkCG,QAAlC,CADkB;;AAAA;AACnCW,cAAAA,QADmC;AAEzCF,cAAAA,MAAM,CAAC,gBAAD,EAAmBE,QAAQ,CAACC,IAA5B,CAAN;;AAFyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG1C,GARa;AASdN,EAAAA,WATc,8BASUN,QATV,EASoB;AAAA,QAApBS,MAAoB,SAApBA,MAAoB;AAChCA,IAAAA,MAAM,CAAC,aAAD,EAAgBT,QAAhB,CAAN;AACD;AAXa,CAAhB;AAcA,eAAe;AACbe,EAAAA,UAAU,EAAE,IADC;AAEbjB,EAAAA,KAAK,EAALA,KAFa;AAGbG,EAAAA,OAAO,EAAPA,OAHa;AAIbE,EAAAA,SAAS,EAATA,SAJa;AAKbI,EAAAA,OAAO,EAAPA;AALa,CAAf","sourcesContent":["import axios from 'axios';\nimport { serializeCalendar } from '../../functions/serializers';\n\nconst apiUrl = 'http://localhost:5000';\n\nconst state = {\n  calendars: [],\n  calendar: null,\n};\n\nconst getters = {\n  calendars: state => state.calendars.map(calendar => serializeCalendar(calendar)),\n  calendar: state => serializeCalendar(state.calendar),\n};\n\nconst mutations = {\n  setCalendars: (state, calendars) => (state.calendars = calendars),\n  appendCalendar: (state, calendar) => (state.calendars = [...state.calendars, calendar]),\n  setCalendar: (state, calendar) => (state.calendar = calendar),\n};\n\nconst actions = {\n  async fetchCalendars({ commit }) {\n    const response = await axios.get(`${apiUrl}/calendars`);\n    commit('setCalendars', response.data);\n  },\n  async createCalendar({ commit }, calendar) {\n    const response = await axios.post(`${apiUrl}/calendars`, calendar);\n    commit('appendCalendar', response.data);\n  },\n  setCalendar({ commit }, calendar) {\n    commit('setCalendar', calendar);\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions,\n};"]},"metadata":{},"sourceType":"module"}