{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapActions } from 'vuex';\nimport { validationMixin } from 'vuelidate';\nimport { required } from 'vuelidate/lib/validators';\nimport DialogSection from '../layouts/DialogSection';\nimport DateForm from '../forms/DateForm';\nimport TimeForm from '../forms/TimeForm';\nimport TextForm from '../forms/TextForm';\nimport ColorForm from '../forms/ColorForm';\nimport AlldayCheck from '../forms/AlldayCheck'; // import CalendarSelectForm from '../forms/CalendarSelectForm';\n\nimport GuestSelectForm from '../forms/GuestSelectForm';\nimport FacillitiesForm from '../forms/FacillitiesForm';\nimport { isGreaterEndThanStart } from '../../functions/datetime';\nexport default {\n  name: 'EventFormDialog',\n  mixins: [validationMixin],\n  components: {\n    DialogSection: DialogSection,\n    DateForm: DateForm,\n    TimeForm: TimeForm,\n    TextForm: TextForm,\n    ColorForm: ColorForm,\n    AlldayCheck: AlldayCheck,\n    // CalendarSelectForm,\n    GuestSelectForm: GuestSelectForm,\n    FacillitiesForm: FacillitiesForm\n  },\n  data: function data() {\n    return {\n      name: '',\n      startDate: new Date(),\n      // set default value to current date\n      startTime: null,\n      endDate: new Date(),\n      // set default value to current date\n      endTime: null,\n      description: '',\n      color: '',\n      allDay: false,\n      // calendar: null,\n      user: [],\n      // 空の配列として初期化する\n      facillities: [] // 空の配列として初期化する\n\n    };\n  },\n  validations: {\n    name: {\n      required: required\n    },\n    startDate: {\n      required: required\n    },\n    endDate: {\n      required: required\n    } // calendar: { required },\n\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapGetters('events', ['event'])), mapGetters('participants', ['participantUsers'])), {}, {\n    isInvalidDatetime: function isInvalidDatetime() {\n      return !isGreaterEndThanStart(this.startDate, this.startTime, this.endDate, this.endTime, this.allDay);\n    },\n    isInvalid: function isInvalid() {\n      return this.$v.$invalid || this.isInvaledDatetime;\n    }\n  }),\n  created: function created() {\n    var _this = this;\n\n    this.name = this.event.name;\n    this.startDate = this.event.startDate;\n    this.startTime = this.event.startTime;\n    this.endDate = this.event.endDate;\n    this.endTime = this.event.endTime;\n    this.description = this.event.description;\n    this.color = this.event.color;\n    this.allDay = !this.event.timed; // this.calendar = this.event.calendar;\n\n    if (this.event.id && this.event.user) {\n      // userが定義されている場合のみ\n      var userIds = this.event.user.map(function (user) {\n        return user.id;\n      });\n      this.fetchParticipantUsers().then(function () {\n        _this.user = _this.participantUsers.filter(function (user) {\n          return userIds.includes(user.id);\n        });\n      });\n    } else {\n      this.fetchParticipantUsers();\n    }\n  },\n  methods: _objectSpread(_objectSpread(_objectSpread({}, mapActions('events', ['setEvent', 'setEditMode', 'createEvent', 'updateEvent', 'checkOverlap' // 予定の重複チェックAPIを呼び出すためのアクションを追加\n  ])), mapActions('participants', ['setParticipantUsers', 'setEditModeParticipantUser', 'createParticipantUser', 'fetchParticipantUsers'])), {}, {\n    closeDialog: function closeDialog() {\n      this.setEvent(null);\n      this.setEditMode(false);\n    },\n    submit: function submit() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var overlap, eventParams, participantParams, _overlap;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!_this2.isInvalid) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _context.next = 4;\n                return _this2.checkOverlap({\n                  start_time: \"\".concat(_this2.startDate, \" \").concat(_this2.startTime),\n                  end_time: \"\".concat(_this2.endDate, \" \").concat(_this2.endTime),\n                  id: _this2.event.id\n                });\n\n              case 4:\n                overlap = _context.sent;\n\n                if (!overlap) {\n                  _context.next = 9;\n                  break;\n                }\n\n                // 重複がある場合はエラーメッセージを表示する\n                _this2.$refs.snackbar.showSnackbar('この時間帯はすでに予定があります');\n\n                _context.next = 19;\n                break;\n\n              case 9:\n                // 重複がない場合は、予定を保存する\n                eventParams = _objectSpread(_objectSpread({}, _this2.event), {}, {\n                  name: _this2.name,\n                  start: \"\".concat(_this2.startDate || '', \" \").concat(_this2.startTime || ''),\n                  end: \"\".concat(_this2.endDate || '', \" \").concat(_this2.endTime || ''),\n                  description: _this2.description,\n                  color: _this2.color,\n                  timed: !_this2.allDay,\n                  user: _this2.user\n                });\n                participantParams = _objectSpread(_objectSpread({}, _this2.participantUser), {}, {\n                  name: _this2.name,\n                  start: \"\".concat(_this2.startDate, \" \").concat(_this2.startTime || ''),\n                  end: \"\".concat(_this2.endDate, \" \").concat(_this2.endTime || ''),\n                  description: _this2.description,\n                  color: _this2.color,\n                  timed: !_this2.allDay,\n                  user: _this2.user\n                });\n\n                if (!_this2.event.id) {\n                  _context.next = 15;\n                  break;\n                }\n\n                // 既存の予定の場合、予定の重複チェックを行わずに予定を更新する\n                _this2.updateEvent(eventParams);\n\n                _context.next = 19;\n                break;\n\n              case 15:\n                _context.next = 17;\n                return _this2.checkOverlap({\n                  start_time: \"\".concat(_this2.startDate, \" \").concat(_this2.startTime),\n                  end_time: \"\".concat(_this2.endDate, \" \").concat(_this2.endTime),\n                  id: _this2.event.id\n                });\n\n              case 17:\n                _overlap = _context.sent;\n\n                if (_overlap) {\n                  _this2.$refs.snackbar.showSnackbar('この時間帯はすでに予定があります');\n                } else {\n                  _this2.createEvent(eventParams);\n\n                  _this2.createParticipantUser(participantParams).then(function () {\n                    _this2.closeDialog();\n                  })[\"catch\"](function (error) {\n                    console.error(error);\n                  });\n                }\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    cancel: function cancel() {\n      this.setEditMode(false);\n\n      if (!this.event.id) {\n        this.setEvent(null);\n      }\n    }\n  })\n};","map":{"version":3,"sources":["EventFormDialog.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-card class=\"pb-8\">\n    <v-card-actions class=\"d-flex justify-end pa-2\">\n      <v-btn icon @click=\"closeDialog\">\n        <v-icon size=\"20px\">mdi-close</v-icon>\n      </v-btn>\n    </v-card-actions>\n\n    <v-card-text>\n      <DialogSection icon=\"mdi-square\" :color=\"color\" style=\"margin-bottom: -20px;\">\n        <v-container fluid>\n          <v-row align=\"center\">\n            <v-col cols=\"12\" md=\"6\">\n              <v-text-field v-model=\"name\" label=\"タイトル\"></v-text-field>\n            </v-col>\n          </v-row>\n        </v-container>\n      </DialogSection>\n\n      <DialogSection icon=\"mdi-palette\" style=\"margin-top: -20px;\">\n        <ColorForm v-model=\"color\" />\n      </DialogSection>\n\n      <DialogSection icon=\"mdi-clock-outline\">\n        <AlldayCheck v-model=\"allDay\" label=\"終日\" />\n      </DialogSection>\n\n      <div style=\"margin-top: -30px; margin-bottom: -30px;\">\n        <!-- 余白を追加する -->\n      </div>\n\n      <DialogSection>\n        <DateForm v-model=\"startDate\" />\n        <div v-show=\"!allDay\">\n          <TimeForm v-model=\"startTime\" />\n        </div>\n      </DialogSection>\n\n      <DialogSection>\n        <DateForm v-model=\"endDate\" :isError=\"isInvalidDatetime\" />\n        <div v-show=\"!allDay\">\n          <TimeForm v-model=\"endTime\" :isError=\"isInvalidDatetime\" />\n        </div>\n      </DialogSection>\n\n      <DialogSection icon=\"mdi-card-text-outline\">\n        <TextForm v-model=\"description\" />\n      </DialogSection>\n\n      <!-- カレンダーセレクトフォーム -->\n      <!-- <DialogSection icon=\"mdi-calendar\">\n        <CalendarSelectForm :value=\"calendar\" @input=\"changeCalendar($event)\" />\n      </DialogSection> -->\n\n      <DialogSection icon=\"mdi-account-group\">\n          <GuestSelectForm v-model=\"user\" />\n      </DialogSection>\n\n      <!-- 設備の選択機能 -->\n      <DialogSection icon=\"mdi-office-building-outline\">\n        <FacillitiesForm v-model=\"facillities\" />\n      </DialogSection>\n\n    </v-card-text>\n\n    <v-card-actions class=\"d-flex justify-end\">\n      <v-btn @click=\"cancel\">キャンセル</v-btn>\n      <v-btn :disabled=\"isInvalid\" @click=\"submit\">保存</v-btn>\n    </v-card-actions>\n  </v-card>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex';\nimport { validationMixin } from 'vuelidate';\nimport { required } from 'vuelidate/lib/validators';\n\nimport DialogSection from '../layouts/DialogSection';\nimport DateForm from '../forms/DateForm';\nimport TimeForm from '../forms/TimeForm';\nimport TextForm from '../forms/TextForm';\nimport ColorForm from '../forms/ColorForm';\nimport AlldayCheck from '../forms/AlldayCheck';\n// import CalendarSelectForm from '../forms/CalendarSelectForm';\nimport GuestSelectForm from '../forms/GuestSelectForm';\nimport FacillitiesForm from '../forms/FacillitiesForm';\nimport { isGreaterEndThanStart } from '../../functions/datetime';\n\n\nexport default {\n  name: 'EventFormDialog',\n  mixins: [validationMixin],\n  components: {\n    DialogSection,\n    DateForm,\n    TimeForm,\n    TextForm,\n    ColorForm,\n    AlldayCheck,\n    // CalendarSelectForm,\n    GuestSelectForm,\n    FacillitiesForm,\n  },\n  data: () => ({\n    name: '',\n    startDate: new Date(), // set default value to current date\n    startTime: null,\n    endDate: new Date(), // set default value to current date\n    endTime: null,\n    description: '',\n    color: '',\n    allDay: false,\n    // calendar: null,\n    user: [], // 空の配列として初期化する\n    facillities: [], // 空の配列として初期化する\n  }),\n  validations: {\n    name: { required },\n    startDate: { required },\n    endDate: { required }\n    // calendar: { required },\n  },\n  computed: {\n    ...mapGetters('events', ['event']),\n    ...mapGetters('participants', ['participantUsers']),\n    isInvalidDatetime() {\n      return !isGreaterEndThanStart(\n        this.startDate,\n        this.startTime,\n        this.endDate,\n        this.endTime,\n        this.allDay\n      );\n    },\n    isInvalid() {\n      return this.$v.$invalid || this.isInvaledDatetime;\n    }\n  },\n\ncreated() {\n  this.name = this.event.name;\n  this.startDate = this.event.startDate;\n  this.startTime = this.event.startTime;\n  this.endDate = this.event.endDate;\n  this.endTime = this.event.endTime;\n  this.description = this.event.description;\n  this.color = this.event.color;\n  this.allDay = !this.event.timed;\n  // this.calendar = this.event.calendar;\n  if (this.event.id && this.event.user) { // userが定義されている場合のみ\n    const userIds = this.event.user.map((user) => user.id);\n    this.fetchParticipantUsers().then(() => {\n      this.user = this.participantUsers.filter((user) =>\n        userIds.includes(user.id)\n      );\n    });\n  } else {\n    this.fetchParticipantUsers();\n  }\n},\n\nmethods: {\n  ...mapActions('events', [\n    'setEvent',\n    'setEditMode',\n    'createEvent',\n    'updateEvent',\n    'checkOverlap', // 予定の重複チェックAPIを呼び出すためのアクションを追加\n  ]),\n  ...mapActions('participants', [\n    'setParticipantUsers',\n    'setEditModeParticipantUser',\n    'createParticipantUser',\n    'fetchParticipantUsers',\n  ]),\n  closeDialog() {\n    this.setEvent(null);\n    this.setEditMode(false);\n  },\n\n  async submit() {\n    if (this.isInvalid) {\n      return;\n    }\n\n    // 予定の重複チェックを行うためのAPIを呼び出す\n    const overlap = await this.checkOverlap({\n      start_time: `${this.startDate} ${this.startTime}`,\n      end_time: `${this.endDate} ${this.endTime}`,\n      id: this.event.id\n    });\n\n    if (overlap) {\n      // 重複がある場合はエラーメッセージを表示する\n      this.$refs.snackbar.showSnackbar('この時間帯はすでに予定があります');\n    } else {\n      // 重複がない場合は、予定を保存する\n      const eventParams = {\n        ...this.event,\n        name: this.name,\n        start: `${this.startDate || ''} ${this.startTime || ''}`,\n        end: `${this.endDate || ''} ${this.endTime || ''}`,\n        description: this.description,\n        color: this.color,\n        timed: !this.allDay,\n        user: this.user\n      };\n      const participantParams = {\n        ...this.participantUser,\n        name: this.name,\n        start: `${this.startDate} ${this.startTime || ''}`,\n        end: `${this.endDate} ${this.endTime || ''}`,\n        description: this.description,\n        color: this.color,\n        timed: !this.allDay,\n        user: this.user\n      };\n      if (this.event.id) { \n        // 既存の予定の場合、予定の重複チェックを行わずに予定を更新する\n        this.updateEvent(eventParams);\n      } else {\n        // 新しい予定の場合、予定の重複チェックを行ってから予定を保存する\n        const overlap = await this.checkOverlap({\n          start_time: `${this.startDate} ${this.startTime}`,\n          end_time: `${this.endDate} ${this.endTime}`,\n          id: this.event.id\n        });\n        if (overlap) {\n          this.$refs.snackbar.showSnackbar('この時間帯はすでに予定があります');\n        } else {\n          this.createEvent(eventParams);\n          this.createParticipantUser(participantParams)\n            .then(() => {\n              this.closeDialog();\n            })\n            .catch((error) => {\n              console.error(error);\n            });\n        }\n      }\n    }\n  },\n\n  cancel() {\n    this.setEditMode(false);\n    if (!this.event.id) {\n      this.setEvent(null);\n    }\n  },\n},\n};\n</script>\n"],"sourceRoot":"app/javascript/components/events"},"metadata":{},"sourceType":"module"}