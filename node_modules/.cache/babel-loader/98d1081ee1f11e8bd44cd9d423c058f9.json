{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapActions, mapGetters } from 'vuex';\nimport CalendarFormDialog from './CalendarFormDialog';\nexport default {\n  name: 'CalendarList',\n  components: {\n    CalendarFormDialog: CalendarFormDialog\n  },\n  data: function data() {\n    return {\n      selectedItem: [],\n      selectedGroups: []\n    };\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapGetters('calendars', ['calendars', 'calendar'])), mapGetters('groups', ['groups'])), mapGetters('users', ['users'])),\n  created: function created() {\n    this.fetchCalendars();\n    this.fetchGroups();\n    this.fetchUsers();\n  },\n  methods: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, mapActions('calendars', ['fetchCalendars', 'updateCalendar', 'deleteCalendar', 'setCalendar'])), mapActions('groups', ['fetchGroups', 'updateGroup', 'deleteGroup', 'setGroup'])), mapActions('users', ['fetchUsers', 'updateUser', 'deleteUser', 'setUser'])), {}, {\n    initCalendar: function initCalendar() {\n      this.setCalendar({\n        name: '',\n        visibility: true\n      });\n    },\n    closeDialog: function closeDialog() {\n      this.setCalendar(null);\n    },\n    edit: function edit(calendar) {\n      this.setCalendar(calendar);\n    },\n    del: function del(calendar) {\n      this.deleteCalendar(calendar.id);\n    },\n    toggleVisibility: function toggleVisibility(calendar) {\n      this.updateCalendar(calendar);\n    },\n    // updateSelection(selected) {\n    //   this.selectedGroups = selected.slice(-1);\n    // },\n    updateVisibility: function updateVisibility(selectedGroup) {\n      var _this = this;\n\n      this.groups.forEach(function (group) {\n        if (group.id !== selectedGroup.id) {\n          group.visibility = false;\n\n          _this.updateGroup(group);\n\n          _this.$store.dispatch('visibility/updateVisibility', {\n            user_id: _this.$store.state.users.currentUser.id,\n            target_user_id: group.user.id,\n            visibility: group.visibility\n          });\n        }\n      });\n      selectedGroup.visibility = !selectedGroup.visibility;\n      this.updateGroup(selectedGroup);\n      this.$store.dispatch('visibility/updateVisibility', {\n        user_id: this.$store.state.users.currentUser.id,\n        target_user_id: selectedGroup.user.id,\n        visibility: selectedGroup.visibility\n      });\n    }\n  })\n};","map":{"version":3,"sources":["CalendarList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AACA,OAAA,kBAAA,MAAA,sBAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,cADA;AAEA,EAAA,UAAA,EAAA;AAAA,IAAA,kBAAA,EAAA;AAAA,GAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,EADA;AAEA,MAAA,cAAA,EAAA;AAFA,KAAA;AAIA,GARA;AASA,EAAA,QAAA,gDACA,UAAA,CAAA,WAAA,EAAA,CAAA,WAAA,EAAA,UAAA,CAAA,CADA,GAEA,UAAA,CAAA,QAAA,EAAA,CAAA,QAAA,CAAA,CAFA,GAGA,UAAA,CAAA,OAAA,EAAA,CAAA,OAAA,CAAA,CAHA,CATA;AAcA,EAAA,OAdA,qBAcA;AACA,SAAA,cAAA;AACA,SAAA,WAAA;AACA,SAAA,UAAA;AACA,GAlBA;AAmBA,EAAA,OAAA,8DACA,UAAA,CAAA,WAAA,EAAA,CACA,gBADA,EAEA,gBAFA,EAGA,gBAHA,EAIA,aAJA,CAAA,CADA,GAOA,UAAA,CAAA,QAAA,EAAA,CACA,aADA,EAEA,aAFA,EAGA,aAHA,EAIA,UAJA,CAAA,CAPA,GAaA,UAAA,CAAA,OAAA,EAAA,CACA,YADA,EAEA,YAFA,EAGA,YAHA,EAIA,SAJA,CAAA,CAbA;AAmBA,IAAA,YAnBA,0BAmBA;AACA,WAAA,WAAA,CAAA;AACA,QAAA,IAAA,EAAA,EADA;AAEA,QAAA,UAAA,EAAA;AAFA,OAAA;AAIA,KAxBA;AAyBA,IAAA,WAzBA,yBAyBA;AACA,WAAA,WAAA,CAAA,IAAA;AACA,KA3BA;AA4BA,IAAA,IA5BA,gBA4BA,QA5BA,EA4BA;AACA,WAAA,WAAA,CAAA,QAAA;AACA,KA9BA;AA+BA,IAAA,GA/BA,eA+BA,QA/BA,EA+BA;AACA,WAAA,cAAA,CAAA,QAAA,CAAA,EAAA;AACA,KAjCA;AAkCA,IAAA,gBAlCA,4BAkCA,QAlCA,EAkCA;AACA,WAAA,cAAA,CAAA,QAAA;AACA,KApCA;AAqCA;AACA;AACA;AACA,IAAA,gBAxCA,4BAwCA,aAxCA,EAwCA;AAAA;;AACA,WAAA,MAAA,CAAA,OAAA,CAAA,UAAA,KAAA,EAAA;AACA,YAAA,KAAA,CAAA,EAAA,KAAA,aAAA,CAAA,EAAA,EAAA;AACA,UAAA,KAAA,CAAA,UAAA,GAAA,KAAA;;AACA,UAAA,KAAA,CAAA,WAAA,CAAA,KAAA;;AACA,UAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,6BAAA,EAAA;AACA,YAAA,OAAA,EAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,WAAA,CAAA,EADA;AAEA,YAAA,cAAA,EAAA,KAAA,CAAA,IAAA,CAAA,EAFA;AAGA,YAAA,UAAA,EAAA,KAAA,CAAA;AAHA,WAAA;AAKA;AACA,OAVA;AAYA,MAAA,aAAA,CAAA,UAAA,GAAA,CAAA,aAAA,CAAA,UAAA;AACA,WAAA,WAAA,CAAA,aAAA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,6BAAA,EAAA;AACA,QAAA,OAAA,EAAA,KAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,WAAA,CAAA,EADA;AAEA,QAAA,cAAA,EAAA,aAAA,CAAA,IAAA,CAAA,EAFA;AAGA,QAAA,UAAA,EAAA,aAAA,CAAA;AAHA,OAAA;AAKA;AA5DA;AAnBA,CAAA","sourcesContent":["<template>\n  <v-list dense>\n    <!-- <v-list-item>\n      <v-list-item-content>\n        <v-subheader>カレンダー追加</v-subheader>\n      </v-list-item-content>\n      <v-list-item-action>\n        <v-btn icon @click=\"initCalendar\">\n          <v-icon size=\"16px\">mdi-plus</v-icon>\n        </v-btn>\n      </v-list-item-action>\n    </v-list-item> -->\n\n    <!-- <v-list-item-group :value=\"selectedItem\">\n      <v-list-item v-for=\"calendar in calendars\" :key=\"calendar.id\">\n        <v-list-item-content class=\"pa-1\">\n          <v-checkbox\n            dense\n            v-model=\"calendar.visibility\"\n            :color=\"calendar.color\"\n            :label=\"calendar.name\"\n            @click=\"toggleVisibility(calendar)\"\n            class=\"pb-2\"\n            hide-details=\"true\"\n          ></v-checkbox>\n        </v-list-item-content>\n        <v-list-item-action class=\"ma-0\">\n          <v-menu transition=\"scale-transition\" offset-y min-width=\"100px\">\n            <template v-slot:activator=\"{ on }\">\n              <v-btn icon v-on=\"on\">\n                <v-icon size=\"12px\">mdi-dots-vertical</v-icon>\n              </v-btn>\n            </template>\n            <v-list>\n              <v-list-item @click=\"edit(calendar)\">編集</v-list-item>\n              <v-list-item @click=\"del(calendar)\">削除</v-list-item>\n            </v-list>\n          </v-menu>\n        </v-list-item-action>\n      </v-list-item>\n    </v-list-item-group> -->\n\n    <v-list-item-group :value=\"selectedItem\">\n      <v-list-group v-for=\"calendar in calendars\" :key=\"calendar.id\">\n        <template v-slot:activator>\n          <!-- グループ名を表示する -->\n          <v-list-item-title>{{ calendar.name }}</v-list-item-title>\n        </template>\n        <v-list-item-group>\n          <v-list-item v-for=\"group in groups.filter(group => group.calendar.id === calendar.id)\" :key=\"group.id\">\n            <v-checkbox\n              dense\n              :value=\"group.id\"\n              v-model=\"group.visibility\"\n              @change=\"updateVisibility(group)\"\n              :label=\"group.user.name\"\n              class=\"pb-2\"\n              hide-details=\"true\"\n            ></v-checkbox>\n          </v-list-item>\n        </v-list-item-group>\n      </v-list-group>\n    </v-list-item-group>\n\n    <v-dialog\n      :value=\"calendar !== null\"\n      @click:outside=\"closeDialog\"\n      width=\"600\"\n    >\n      <CalendarFormDialog v-if=\"calendar !== null\" />\n    </v-dialog>\n  </v-list>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\nimport CalendarFormDialog from './CalendarFormDialog';\n\nexport default {\n  name: 'CalendarList',\n  components: { CalendarFormDialog },\n  data() {\n    return {\n      selectedItem: [],\n      selectedGroups: []\n    }\n  },\n  computed: {\n    ...mapGetters('calendars', ['calendars', 'calendar']),\n    ...mapGetters('groups', ['groups']),\n    ...mapGetters('users', ['users']),\n  },\n  created() {\n    this.fetchCalendars();\n    this.fetchGroups();\n    this.fetchUsers();\n  },\n  methods: {\n    ...mapActions('calendars', [\n      'fetchCalendars',\n      'updateCalendar',\n      'deleteCalendar',\n      'setCalendar'\n    ]),\n    ...mapActions('groups', [\n      'fetchGroups',\n      'updateGroup',\n      'deleteGroup',\n      'setGroup'\n    ]),\n    ...mapActions('users', [\n      'fetchUsers',\n      'updateUser',\n      'deleteUser',\n      'setUser'\n    ]),\n    initCalendar() {\n      this.setCalendar({\n        name: '',\n        visibility: true\n      });\n    },\n    closeDialog() {\n      this.setCalendar(null);\n    },\n    edit(calendar) {\n      this.setCalendar(calendar);\n    },\n    del(calendar) {\n      this.deleteCalendar(calendar.id);\n    },\n    toggleVisibility(calendar) {\n      this.updateCalendar(calendar);\n    },\n    // updateSelection(selected) {\n    //   this.selectedGroups = selected.slice(-1);\n    // },\n    updateVisibility(selectedGroup) {\n      this.groups.forEach(group => {\n        if (group.id !== selectedGroup.id) {\n          group.visibility = false;\n          this.updateGroup(group);\n          this.$store.dispatch('visibility/updateVisibility', {\n            user_id: this.$store.state.users.currentUser.id,\n            target_user_id: group.user.id,\n            visibility: group.visibility\n          });\n        }\n      });\n  \n      selectedGroup.visibility = !selectedGroup.visibility;\n      this.updateGroup(selectedGroup);\n      this.$store.dispatch('visibility/updateVisibility', {\n        user_id: this.$store.state.users.currentUser.id,\n        target_user_id: selectedGroup.user.id,\n        visibility: selectedGroup.visibility\n      });\n    }\n  }\n};\n</script>\n"],"sourceRoot":"app/javascript/components/calendars"},"metadata":{},"sourceType":"module"}