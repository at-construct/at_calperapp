{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport axios from 'axios';\nimport { serializeUser } from '../../functions/serializers';\nvar apiUrl = 'https://localhost:9292/';\nvar state = {\n  users: [],\n  user: null\n};\nvar getters = {\n  users: function users(state) {\n    return state.users.map(function (user) {\n      return serializeUser(user);\n    });\n  },\n  user: function user(state) {\n    return serializeUser(state.user);\n  }\n};\nvar mutations = {\n  setUsers: function setUsers(state, users) {\n    return state.users = users;\n  },\n  appendUser: function appendUser(state, user) {\n    return state.users = [].concat(_toConsumableArray(state.users), [user]);\n  },\n  updateUser: function updateUser(state, user) {\n    return state.users = state.users.map(function (c) {\n      return c.id === user.id ? user : c;\n    });\n  },\n  removeUser: function removeUser(state, user) {\n    return state.users = state.users.filter(function (c) {\n      return c.id !== user.id;\n    });\n  },\n  setUser: function setUser(state, user) {\n    return state.user = user;\n  }\n};\nvar actions = {\n  fetchUsers: function fetchUsers(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return axios.get(\"\".concat(apiUrl, \"/users\"));\n\n            case 3:\n              response = _context.sent;\n              commit('setUsers', response.data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  addUser: function addUser(_ref2, user) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              console.log('addUser', user);\n              _context2.next = 4;\n              return axios.post(\"\".concat(apiUrl, \"/users\"), user);\n\n            case 4:\n              response = _context2.sent;\n              commit('appendUser', response.data);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  updateUser: function updateUser(_ref3, user) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var dispatch, commit, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch = _ref3.dispatch, commit = _ref3.commit;\n              _context3.next = 3;\n              return axios.put(\"\".concat(apiUrl, \"/users/\").concat(user.id), user);\n\n            case 3:\n              response = _context3.sent;\n              commit('updateUser', response.data);\n              dispatch('users/fetchUsers', null, {\n                root: true\n              });\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  deleteUser: function deleteUser(_ref4, id) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var dispatch, commit, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              dispatch = _ref4.dispatch, commit = _ref4.commit;\n              _context4.next = 3;\n              return axios[\"delete\"](\"\".concat(apiUrl, \"/users/\").concat(id));\n\n            case 3:\n              response = _context4.sent;\n              commit('removeUser', response.data);\n              dispatch('users/fetchUsers', null, {\n                root: true\n              });\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  },\n  setUser: function setUser(_ref5, user) {\n    var commit = _ref5.commit;\n    commit('setUser', user);\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"sources":["/Users/aaattt/projects/CalRailsVueApp/app/javascript/store/modules/users.js"],"names":["axios","serializeUser","apiUrl","state","users","user","getters","map","mutations","setUsers","appendUser","updateUser","c","id","removeUser","filter","setUser","actions","fetchUsers","commit","get","response","data","addUser","console","log","post","dispatch","put","root","deleteUser","namespaced"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { serializeUser } from '../../functions/serializers';\n\nconst apiUrl = 'https://localhost:9292/';\n\nconst state = {\n  users: [],\n  user: null\n};\n\nconst getters = {\n  users: state => state.users.map(user => serializeUser(user)),\n  user: state => serializeUser(state.user)\n};\n\nconst mutations = {\n  setUsers: (state, users) => (state.users = users),\n  appendUser: (state, user) => (state.users = [...state.users, user]),\n  updateUser: (state, user) =>\n    (state.users = state.users.map(c => (c.id === user.id ? user : c))),\n  removeUser: (state, user) =>\n    (state.users = state.users.filter(c => c.id !== user.id)),\n  setUser: (state, user) => (state.user = user)\n};\n\nconst actions = {\n  async fetchUsers({ commit }) {\n    const response = await axios.get(`${apiUrl}/users`);\n    commit('setUsers', response.data);\n  },\n  async addUser({ commit }, user) {\n    console.log('addUser', user);\n    const response = await axios.post(`${apiUrl}/users`, user);\n    commit('appendUser', response.data);\n  },\n  async updateUser({ dispatch, commit }, user) {\n    const response = await axios.put(`${apiUrl}/users/${user.id}`, user);\n    commit('updateUser', response.data);\n    dispatch('users/fetchUsers', null, { root: true });\n  },\n  async deleteUser({ dispatch, commit }, id) {\n    const response = await axios.delete(`${apiUrl}/users/${id}`);\n    commit('removeUser', response.data);\n    dispatch('users/fetchUsers', null, { root: true });\n  },\n  setUser({ commit }, user) {\n    commit('setUser', user);\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};\n"]},"metadata":{},"sourceType":"module"}