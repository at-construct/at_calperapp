{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapActions } from 'vuex';\nimport DialogSection from '../layouts/DialogSection';\nimport EventFormDialog from '../events/EventFormDialog';\nexport default {\n  name: 'EventDetailDialog',\n  components: {\n    DialogSection: DialogSection,\n    EventFormDialog: EventFormDialog\n  },\n  computed: _objectSpread({}, mapGetters('events', ['event', 'isEditMode'])),\n  methods: _objectSpread(_objectSpread({}, mapActions('events', ['setEvent', 'deleteEvent', 'setEditMode'])), {}, {\n    closeDialog: function closeDialog() {\n      this.setEvent(null);\n    },\n    del: function del() {\n      this.deleteEvent(this.event.id);\n    },\n    edit: function edit() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this.$store.dispatch('fetchUser');\n\n              case 2:\n                if (!(_this.$store.state.user && _this.$store.state.user.name !== _this.event.user)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                alert('作成者ではないので編集できません');\n                return _context.abrupt(\"return\");\n\n              case 5:\n                _this.setEditMode(true);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  })\n};","map":{"version":3,"sources":["EventDetailDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AACA,OAAA,aAAA,MAAA,0BAAA;AACA,OAAA,eAAA,MAAA,2BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,mBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,aAAA,EAAA,aADA;AAEA,IAAA,eAAA,EAAA;AAFA,GAFA;AAMA,EAAA,QAAA,oBACA,UAAA,CAAA,QAAA,EAAA,CAAA,OAAA,EAAA,YAAA,CAAA,CADA,CANA;AASA,EAAA,OAAA,kCACA,UAAA,CAAA,QAAA,EAAA,CAAA,UAAA,EAAA,aAAA,EAAA,aAAA,CAAA,CADA;AAEA,IAAA,WAFA,yBAEA;AACA,WAAA,QAAA,CAAA,IAAA;AACA,KAJA;AAKA,IAAA,GALA,iBAKA;AACA,WAAA,WAAA,CAAA,KAAA,KAAA,CAAA,EAAA;AACA,KAPA;AAQA,IAAA,IARA,kBAQA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,WAAA,CADA;;AAAA;AAAA,sBAEA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAAA,IAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,KAAA,KAAA,CAAA,KAAA,CAAA,IAFA;AAAA;AAAA;AAAA;;AAGA,gBAAA,KAAA,CAAA,kBAAA,CAAA;AAHA;;AAAA;AAMA,gBAAA,KAAA,CAAA,WAAA,CAAA,IAAA;;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAfA;AATA,CAAA","sourcesContent":["<template>\n  <v-card class=\"pb-12\">\n    <v-card-actions class=\"d-flex justify-end pa-2\">\n      <v-btn icon @click=\"edit\">\n        <v-icon size=\"20px\">mdi-pencil-outline</v-icon>\n        <EventFormDialog v-if=\"event !== null && isEditMode\" />\n      </v-btn>\n      <v-btn icon @click=\"del\">\n        <v-icon size=\"20px\">mdi-trash-can-outline</v-icon>\n      </v-btn>\n      <v-btn icon @click=\"closeDialog\">\n        <v-icon size=\"20px\">mdi-close</v-icon>\n      </v-btn>\n    </v-card-actions>\n\n    <v-card-title>\n      <DialogSection icon=\"mdi-square\" :color=\"event.color\">\n        {{ event.name }}\n      </DialogSection>\n    </v-card-title>\n    <v-card-text>\n      <DialogSection icon=\"mdi-clock-time-three-outline\">\n        {{ event.startDate }} {{ event.timed ? event.startTime : '' }} ~\n        {{ event.endDate }} {{ event.timed ? event.endTime : '' }}\n      </DialogSection>\n    </v-card-text>\n    <v-card-text>\n      <DialogSection icon=\"mdi-card-text-outline\">\n        {{ event.description || '予定の説明なし' }}\n      </DialogSection>\n    </v-card-text>\n    <v-card-text>\n      <DialogSection icon=\"mdi-account-group\">\n        {{ event.user || '?参加予定ユーザーの表示?' }}\n      </DialogSection>\n    </v-card-text>\n    <v-card-text>\n      <DialogSection icon=\"mdi-account-group\">\n        {{ event.user || 'イベント作成者の表示?' }}\n      </DialogSection>\n    </v-card-text>\n  </v-card>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex';\nimport DialogSection from '../layouts/DialogSection';\nimport EventFormDialog from '../events/EventFormDialog';\n\nexport default {\n  name: 'EventDetailDialog',\n  components: {\n    DialogSection,\n    EventFormDialog\n  },\n  computed: {\n    ...mapGetters('events', ['event', 'isEditMode'])\n  },\n  methods: {\n    ...mapActions('events', ['setEvent', 'deleteEvent', 'setEditMode']),\n    closeDialog() {\n      this.setEvent(null);\n    },\n    del() {\n      this.deleteEvent(this.event.id);\n    },\n    async edit() {\n      await this.$store.dispatch('fetchUser');\n      if (this.$store.state.user && this.$store.state.user.name !== this.event.user) {\n        alert('作成者ではないので編集できません');\n        return;\n      }\n      this.setEditMode(true);\n    },\n  }\n};\n</script>\n"],"sourceRoot":"app/javascript/components/events"},"metadata":{},"sourceType":"module"}