{"ast":null,"code":"import { n as _objectSpread2, o as createGuid, e as defaultsDeep_1, d as isArrayLikeObject_1, D as _toConsumableArray, E as on, F as off, G as _objectWithoutProperties, w as isObject, H as datesAreEqual, u as pageIsBetweenPages, I as elementContains } from './helpers-8d5d752d.js';\nimport { h } from 'vue';\nimport { e as rootMixin, g as getDefault, P as PATCH } from './index-fcd0222c.js';\nimport { s as script$2 } from './Calendar.vue_vue&type=style&index=0&id=d5c6e324&lang-dc13083a.js';\nimport { s as script$1, b as addTapOrClickHandler } from './Popover.vue_vue&type=style&index=0&id=0652eeb9&lang-c768a42a.js';\nimport { g as getPopoverTriggerEvents, s as showPopover, h as hidePopover, t as togglePopover } from './CalendarDay.vue_vue&type=style&index=0&id=07b52efe&lang-c93ef64c.js';\nimport script$3 from './TimePicker.js';\nvar _dateConfig = {\n  type: 'auto',\n  mask: 'iso',\n  // String mask when `type === 'string'`\n  timeAdjust: '' // 'HH:MM:SS', 'now'\n\n};\nvar _rangeConfig = {\n  start: _objectSpread2({}, _dateConfig),\n  end: _objectSpread2({}, _dateConfig)\n};\nvar MODE = {\n  DATE: 'date',\n  DATE_TIME: 'datetime',\n  TIME: 'time'\n};\nvar RANGE_PRIORITY = {\n  NONE: 0,\n  START: 1,\n  END: 2,\n  BOTH: 3\n};\nvar script = {\n  name: 'DatePicker',\n  emits: ['update:modelValue', 'drag', 'dayclick', 'daykeydown', 'popover-will-show', 'popover-did-show', 'popover-will-hide', 'popover-did-hide'],\n  render: function render() {\n    var _this = this; // Timepicker renderer\n\n\n    var timePicker = function timePicker() {\n      if (!_this.dateParts) return null;\n      var parts = _this.isRange ? _this.dateParts : [_this.dateParts[0]];\n      return h('div', {}, _objectSpread2(_objectSpread2({}, _this.$slots), {}, {\n        default: function _default() {\n          return parts.map(function (dp, idx) {\n            return h(script$3, {\n              modelValue: dp,\n              locale: _this.$locale,\n              theme: _this.$theme,\n              is24hr: _this.is24hr,\n              minuteIncrement: _this.minuteIncrement,\n              showBorder: !_this.isTime,\n              isDisabled: _this.isDateTime && !dp.isValid || _this.isDragging,\n              'onUpdate:modelValue': function onUpdateModelValue(p) {\n                return _this.onTimeInput(p, idx === 0);\n              }\n            });\n          });\n        }\n      }));\n    }; // Calendar renderer\n\n\n    var calendar = function calendar() {\n      return h(script$2, _objectSpread2(_objectSpread2({}, _this.$attrs), {}, {\n        attributes: _this.attributes_,\n        theme: _this.$theme,\n        locale: _this.$locale,\n        minDate: _this.minDateExact || _this.minDate,\n        maxDate: _this.maxDateExact || _this.maxDate,\n        disabledDates: _this.disabledDates,\n        availableDates: _this.availableDates,\n        onDayclick: _this.onDayClick,\n        onDaykeydown: _this.onDayKeydown,\n        onDaymouseenter: _this.onDayMouseEnter,\n        ref: 'calendar'\n      }), _objectSpread2(_objectSpread2({}, _this.$slots), {}, {\n        footer: function footer() {\n          return _this.isDateTime ? timePicker() : _this.$slots.footer;\n        }\n      }));\n    }; // Content renderer\n\n\n    var content = function content() {\n      if (_this.isTime) {\n        return h('div', {\n          class: ['vc-container', \"vc-\".concat(_this.$theme.color), {\n            'vc-is-dark': _this.$theme.isDark\n          }]\n        }, [timePicker()]);\n      }\n\n      return calendar();\n    };\n\n    return this.$slots.default ? h('div', [// Slot content\n    this.$slots.default(this.slotArgs), // Popover content\n    h(script$1, {\n      id: this.datePickerPopoverId,\n      placement: 'bottom-start',\n      contentClass: \"vc-container\".concat(this.isDark ? ' vc-is-dark' : ''),\n      'on-before-show': function onBeforeShow(e) {\n        return _this.$emit('popover-will-show', e);\n      },\n      'on-after-show': function onAfterShow(e) {\n        return _this.$emit('popover-did-show', e);\n      },\n      'on-before-hide': function onBeforeHide(e) {\n        return _this.$emit('popover-will-hide', e);\n      },\n      'on-after-hide': function onAfterHide(e) {\n        return _this.$emit('popover-did-hide', e);\n      },\n      ref: 'popover'\n    }, {\n      default: content\n    })]) : content();\n  },\n  mixins: [rootMixin],\n  props: {\n    mode: {\n      type: String,\n      default: MODE.DATE\n    },\n    modelValue: {\n      type: null,\n      required: true\n    },\n    modelConfig: {\n      type: Object,\n      default: function _default() {\n        return _objectSpread2({}, _dateConfig);\n      }\n    },\n    is24hr: Boolean,\n    minuteIncrement: Number,\n    isRequired: Boolean,\n    isRange: Boolean,\n    updateOnInput: {\n      type: Boolean,\n      default: getDefault('datePicker.updateOnInput')\n    },\n    inputDebounce: {\n      type: Number,\n      default: getDefault('datePicker.inputDebounce')\n    },\n    popover: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    dragAttribute: Object,\n    selectAttribute: Object,\n    attributes: Array\n  },\n  data: function data() {\n    return {\n      value_: null,\n      dateParts: null,\n      activeDate: '',\n      dragValue: null,\n      inputValues: ['', ''],\n      updateTimeout: null,\n      watchValue: true,\n      datePickerPopoverId: createGuid()\n    };\n  },\n  computed: {\n    isDate: function isDate() {\n      return this.mode.toLowerCase() === MODE.DATE;\n    },\n    isDateTime: function isDateTime() {\n      return this.mode.toLowerCase() === MODE.DATE_TIME;\n    },\n    isTime: function isTime() {\n      return this.mode.toLowerCase() === MODE.TIME;\n    },\n    isDragging: function isDragging() {\n      return !!this.dragValue;\n    },\n    modelConfig_: function modelConfig_() {\n      if (this.isRange) {\n        return {\n          start: _objectSpread2(_objectSpread2({}, _rangeConfig.start), this.modelConfig.start || this.modelConfig),\n          end: _objectSpread2(_objectSpread2({}, _rangeConfig.end), this.modelConfig.end || this.modelConfig)\n        };\n      }\n\n      return _objectSpread2(_objectSpread2({}, _dateConfig), this.modelConfig);\n    },\n    inputMask: function inputMask() {\n      var masks = this.$locale.masks;\n\n      if (this.isTime) {\n        return this.is24hr ? masks.inputTime24hr : masks.inputTime;\n      }\n\n      if (this.isDateTime) {\n        return this.is24hr ? masks.inputDateTime24hr : masks.inputDateTime;\n      }\n\n      return this.$locale.masks.input;\n    },\n    inputMaskHasTime: function inputMaskHasTime() {\n      return /[Hh]/g.test(this.inputMask);\n    },\n    inputMaskHasDate: function inputMaskHasDate() {\n      return /[dD]{1,2}|Do|W{1,4}|M{1,4}|YY(?:YY)?/g.test(this.inputMask);\n    },\n    inputMaskPatch: function inputMaskPatch() {\n      if (this.inputMaskHasTime && this.inputMaskHasDate) {\n        return PATCH.DATE_TIME;\n      }\n\n      if (this.inputMaskHasDate) return PATCH.DATE;\n      if (this.inputMaskHasTime) return PATCH.TIME;\n      return undefined;\n    },\n    slotArgs: function slotArgs() {\n      var _this2 = this;\n\n      var isRange = this.isRange,\n          isDragging = this.isDragging,\n          updateValue = this.updateValue,\n          showPopover = this.showPopover,\n          hidePopover = this.hidePopover,\n          togglePopover = this.togglePopover;\n      var inputValue = isRange ? {\n        start: this.inputValues[0],\n        end: this.inputValues[1]\n      } : this.inputValues[0];\n      var events = [true, false].map(function (isStart) {\n        return _objectSpread2({\n          input: _this2.onInputInput(isStart),\n          change: _this2.onInputChange(isStart),\n          keyup: _this2.onInputKeyup\n        }, getPopoverTriggerEvents(_objectSpread2(_objectSpread2({}, _this2.popover_), {}, {\n          id: _this2.datePickerPopoverId,\n          callback: function callback(e) {\n            if (e.action === 'show' && e.completed) {\n              _this2.onInputShow(isStart);\n            }\n          }\n        })));\n      });\n      var inputEvents = isRange ? {\n        start: events[0],\n        end: events[1]\n      } : events[0];\n      return {\n        inputValue: inputValue,\n        inputEvents: inputEvents,\n        isDragging: isDragging,\n        updateValue: updateValue,\n        showPopover: showPopover,\n        hidePopover: hidePopover,\n        togglePopover: togglePopover,\n        getPopoverTriggerEvents: getPopoverTriggerEvents\n      };\n    },\n    popover_: function popover_() {\n      return defaultsDeep_1(this.popover, getDefault('datePicker.popover'));\n    },\n    selectAttribute_: function selectAttribute_() {\n      if (!this.hasValue(this.value_)) return null;\n\n      var attribute = _objectSpread2(_objectSpread2({\n        key: 'select-drag'\n      }, this.selectAttribute), {}, {\n        dates: this.value_,\n        pinPage: true\n      });\n\n      var dot = attribute.dot,\n          bar = attribute.bar,\n          highlight = attribute.highlight,\n          content = attribute.content;\n\n      if (!dot && !bar && !highlight && !content) {\n        attribute.highlight = true;\n      }\n\n      return attribute;\n    },\n    dragAttribute_: function dragAttribute_() {\n      if (!this.isRange || !this.hasValue(this.dragValue)) {\n        return null;\n      }\n\n      var attribute = _objectSpread2(_objectSpread2({\n        key: 'select-drag'\n      }, this.dragAttribute), {}, {\n        dates: this.dragValue\n      });\n\n      var dot = attribute.dot,\n          bar = attribute.bar,\n          highlight = attribute.highlight,\n          content = attribute.content;\n\n      if (!dot && !bar && !highlight && !content) {\n        attribute.highlight = {\n          startEnd: {\n            fillMode: 'outline'\n          }\n        };\n      }\n\n      return attribute;\n    },\n    attributes_: function attributes_() {\n      var attrs = isArrayLikeObject_1(this.attributes) ? _toConsumableArray(this.attributes) : [];\n\n      if (this.dragAttribute_) {\n        attrs.push(this.dragAttribute_);\n      } else if (this.selectAttribute_) {\n        attrs.push(this.selectAttribute_);\n      }\n\n      return attrs;\n    }\n  },\n  watch: {\n    inputMask: function inputMask() {\n      this.formatInput();\n    },\n    modelValue: function modelValue(val) {\n      if (!this.watchValue) return;\n      this.forceUpdateValue(val, {\n        config: this.modelConfig,\n        notify: false,\n        formatInput: true,\n        hidePopover: false\n      });\n    },\n    value_: function value_() {\n      this.refreshDateParts();\n    },\n    dragValue: function dragValue() {\n      this.refreshDateParts();\n    },\n    timezone: function timezone() {\n      this.refreshDateParts();\n      this.forceUpdateValue(this.value_, {\n        notify: true,\n        formatInput: true\n      });\n    }\n  },\n  created: function created() {\n    this.forceUpdateValue(this.modelValue, {\n      config: this.modelConfig_,\n      notify: false,\n      formatInput: true,\n      hidePopover: false\n    });\n    this.refreshDateParts();\n  },\n  mounted: function mounted() {\n    var _this3 = this; // Handle escape key presses\n\n\n    on(document, 'keydown', this.onDocumentKeyDown); // Clear drag on background click\n\n    this.offTapOrClickHandler = addTapOrClickHandler(document, function (e) {\n      if (document.body.contains(e.target) && !elementContains(_this3.$el, e.target)) {\n        _this3.dragValue = null;\n\n        _this3.formatInput();\n      }\n    });\n  },\n  beforeUnmount: function beforeUnmount() {\n    // Clean up handlers\n    off(document, 'keydown', this.onDocumentKeyDown);\n    this.offTapOrClickHandler();\n  },\n  methods: {\n    getDateParts: function getDateParts(date) {\n      return this.$locale.getDateParts(date);\n    },\n    getDateFromParts: function getDateFromParts(parts) {\n      return this.$locale.getDateFromParts(parts);\n    },\n    refreshDateParts: function refreshDateParts() {\n      var _this4 = this;\n\n      var value = this.dragValue || this.value_;\n      var dateParts = [];\n\n      if (this.isRange) {\n        if (value && value.start) {\n          dateParts.push(this.getDateParts(value.start));\n        } else {\n          dateParts.push({});\n        }\n\n        if (value && value.end) {\n          dateParts.push(this.getDateParts(value.end));\n        } else {\n          dateParts.push({});\n        }\n      } else if (value) {\n        dateParts.push(this.getDateParts(value));\n      } else {\n        dateParts.push({});\n      }\n\n      this.$nextTick(function () {\n        return _this4.dateParts = dateParts;\n      });\n    },\n    onDocumentKeyDown: function onDocumentKeyDown(e) {\n      // Clear drag on escape keydown\n      if (this.dragValue && e.key === 'Escape') {\n        this.dragValue = null;\n      }\n    },\n    onDayClick: function onDayClick(day) {\n      this.handleDayClick(day); // Re-emit event\n\n      this.$emit('dayclick', day);\n    },\n    onDayKeydown: function onDayKeydown(day) {\n      switch (day.event.key) {\n        case ' ':\n        case 'Enter':\n          {\n            this.handleDayClick(day);\n            day.event.preventDefault();\n            break;\n          }\n\n        case 'Escape':\n          {\n            this.hidePopover();\n          }\n      } // Re-emit event\n\n\n      this.$emit('daykeydown', day);\n    },\n    handleDayClick: function handleDayClick(day) {\n      var _this$popover_ = this.popover_,\n          keepVisibleOnInput = _this$popover_.keepVisibleOnInput,\n          visibility = _this$popover_.visibility;\n      var opts = {\n        patch: PATCH.DATE,\n        adjustTime: true,\n        formatInput: true,\n        hidePopover: this.isDate && !keepVisibleOnInput && visibility !== 'visible'\n      };\n\n      if (this.isRange) {\n        if (!this.isDragging) {\n          this.dragTrackingValue = _objectSpread2({}, day.range);\n        } else {\n          this.dragTrackingValue.end = day.date;\n        }\n\n        opts.isDragging = !this.isDragging;\n        opts.rangePriority = opts.isDragging ? RANGE_PRIORITY.NONE : RANGE_PRIORITY.BOTH;\n        opts.hidePopover = opts.hidePopover && !opts.isDragging;\n        this.updateValue(this.dragTrackingValue, opts);\n      } else {\n        opts.clearIfEqual = !this.isRequired;\n        this.updateValue(day.date, opts);\n      }\n    },\n    onDayMouseEnter: function onDayMouseEnter(day) {\n      if (!this.isDragging) return;\n      this.dragTrackingValue.end = day.date;\n      this.updateValue(this.dragTrackingValue, {\n        patch: PATCH.DATE,\n        adjustTime: true,\n        formatInput: true,\n        hidePriority: false,\n        rangePriority: RANGE_PRIORITY.NONE\n      });\n    },\n    onTimeInput: function onTimeInput(parts, isStart) {\n      var _this5 = this;\n\n      var value = null;\n\n      if (this.isRange) {\n        var start = isStart ? parts : this.dateParts[0];\n        var end = isStart ? this.dateParts[1] : parts;\n        value = {\n          start: start,\n          end: end\n        };\n      } else {\n        value = parts;\n      }\n\n      this.updateValue(value, {\n        patch: PATCH.TIME,\n        rangePriority: isStart ? RANGE_PRIORITY.START : RANGE_PRIORITY.END\n      }).then(function () {\n        return _this5.adjustPageRange(isStart);\n      });\n    },\n    onInputInput: function onInputInput(isStart) {\n      var _this6 = this;\n\n      return function (e) {\n        if (!_this6.updateOnInput) return;\n\n        _this6.onInputUpdate(e.target.value, isStart, {\n          formatInput: true,\n          hidePopover: false\n        });\n      };\n    },\n    onInputChange: function onInputChange(isStart) {\n      var _this7 = this;\n\n      return function (e) {\n        _this7.onInputUpdate(e.target.value, isStart, {\n          formatInput: true,\n          hidePopover: false\n        });\n      };\n    },\n    onInputUpdate: function onInputUpdate(inputValue, isStart, opts) {\n      var _this8 = this;\n\n      this.inputValues.splice(isStart ? 0 : 1, 1, inputValue);\n      var value = this.isRange ? {\n        start: this.inputValues[0],\n        end: this.inputValues[1] || this.inputValues[0]\n      } : inputValue;\n      var config = {\n        type: 'string',\n        mask: this.inputMask\n      };\n      this.updateValue(value, _objectSpread2(_objectSpread2({}, opts), {}, {\n        config: config,\n        patch: this.inputMaskPatch,\n        rangePriority: isStart ? RANGE_PRIORITY.START : RANGE_PRIORITY.END\n      })).then(function () {\n        return _this8.adjustPageRange(isStart);\n      });\n    },\n    onInputShow: function onInputShow(isStart) {\n      this.adjustPageRange(isStart);\n    },\n    onInputKeyup: function onInputKeyup(e) {\n      // Escape key only\n      if (e.key !== 'Escape') return;\n      this.updateValue(this.value_, {\n        formatInput: true,\n        hidePopover: true\n      });\n    },\n    updateValue: function updateValue(value) {\n      var _this9 = this;\n\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      clearTimeout(this.updateTimeout);\n      return new Promise(function (resolve) {\n        var debounce = opts.debounce,\n            args = _objectWithoutProperties(opts, [\"debounce\"]);\n\n        if (debounce > 0) {\n          _this9.updateTimeout = setTimeout(function () {\n            _this9.forceUpdateValue(value, args);\n\n            resolve(_this9.value_);\n          }, debounce);\n        } else {\n          _this9.forceUpdateValue(value, args);\n\n          resolve(_this9.value_);\n        }\n      });\n    },\n    forceUpdateValue: function forceUpdateValue(value) {\n      var _this10 = this;\n\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$config = _ref.config,\n          config = _ref$config === void 0 ? this.modelConfig_ : _ref$config,\n          _ref$patch = _ref.patch,\n          patch = _ref$patch === void 0 ? PATCH.DATE_TIME : _ref$patch,\n          _ref$notify = _ref.notify,\n          notify = _ref$notify === void 0 ? true : _ref$notify,\n          _ref$clearIfEqual = _ref.clearIfEqual,\n          clearIfEqual = _ref$clearIfEqual === void 0 ? false : _ref$clearIfEqual,\n          _ref$formatInput = _ref.formatInput,\n          formatInput = _ref$formatInput === void 0 ? true : _ref$formatInput,\n          _ref$hidePopover = _ref.hidePopover,\n          hidePopover = _ref$hidePopover === void 0 ? false : _ref$hidePopover,\n          _ref$adjustTime = _ref.adjustTime,\n          adjustTime = _ref$adjustTime === void 0 ? false : _ref$adjustTime,\n          _ref$isDragging = _ref.isDragging,\n          isDragging = _ref$isDragging === void 0 ? this.isDragging : _ref$isDragging,\n          _ref$rangePriority = _ref.rangePriority,\n          rangePriority = _ref$rangePriority === void 0 ? RANGE_PRIORITY.BOTH : _ref$rangePriority; // 1. Normalization\n\n\n      var normalizedValue = this.normalizeValue(value, config, patch, rangePriority); // Reset to previous value if it was cleared but is required\n\n      if (!normalizedValue && this.isRequired) {\n        normalizedValue = this.value_;\n      } // Time Adjustment\n\n\n      if (adjustTime) {\n        normalizedValue = this.adjustTimeForValue(normalizedValue, config);\n      } // 2. Validation (date or range)\n\n\n      var isDisabled = this.valueIsDisabled(normalizedValue);\n\n      if (isDisabled) {\n        if (isDragging) return;\n        normalizedValue = this.value_; // Don't allow hiding popover\n\n        hidePopover = false;\n      } // 3. Assignment\n\n\n      var valueKey = isDragging ? 'dragValue' : 'value_';\n      var valueChanged = !this.valuesAreEqual(this[valueKey], normalizedValue); // Clear value if same value selected and clearIfEqual is set\n\n      if (!isDisabled && !valueChanged && clearIfEqual) {\n        normalizedValue = null;\n        valueChanged = true;\n      } // Assign value\n\n\n      if (valueChanged) {\n        this[valueKey] = normalizedValue; // Clear drag value if needed\n\n        if (!isDragging) this.dragValue = null;\n      } // 4. Denormalization/Notification\n\n\n      if (notify && valueChanged) {\n        // 4A. Denormalization\n        var denormalizedValue = this.denormalizeValue(normalizedValue, this.dateConfig); // 4B. Notification\n\n        var event = this.isDragging ? 'drag' : 'update:modelValue';\n        this.watchValue = false;\n        this.$emit(event, denormalizedValue);\n        this.$nextTick(function () {\n          return _this10.watchValue = true;\n        });\n      } // 5. Hide popover if needed\n\n\n      if (hidePopover) this.hidePopover(); // 6. Format inputs if needed\n\n      if (formatInput) this.formatInput();\n    },\n    hasValue: function hasValue(value) {\n      if (this.isRange) {\n        return isObject(value) && value.start && value.end;\n      }\n\n      return !!value;\n    },\n    normalizeValue: function normalizeValue(value, config, patch, rangePriority) {\n      if (!this.hasValue(value)) return null;\n\n      if (this.isRange) {\n        var result = {};\n        var start = value.start > value.end ? value.end : value.start;\n        var startFillDate = this.value_ && this.value_.start || this.modelConfig_.start.fillDate;\n        var startConfig = config.start || config;\n        result.start = this.normalizeDate(start, _objectSpread2(_objectSpread2({}, startConfig), {}, {\n          fillDate: startFillDate,\n          patch: patch\n        }));\n        var end = value.start > value.end ? value.start : value.end;\n        var endFillDate = this.value_ && this.value_.end || this.modelConfig_.end.fillDate;\n        var endConfig = config.end || config;\n        result.end = this.normalizeDate(end, _objectSpread2(_objectSpread2({}, endConfig), {}, {\n          fillDate: endFillDate,\n          patch: patch\n        }));\n        return this.sortRange(result, rangePriority);\n      }\n\n      return this.normalizeDate(value, _objectSpread2(_objectSpread2({}, config), {}, {\n        fillDate: this.value_ || this.modelConfig_.fillDate,\n        patch: patch\n      }));\n    },\n    adjustTimeForValue: function adjustTimeForValue(value, config) {\n      if (!this.hasValue(value)) return null;\n\n      if (this.isRange) {\n        return {\n          start: this.$locale.adjustTimeForDate(value.start, config.start || config),\n          end: this.$locale.adjustTimeForDate(value.end, config.end || config)\n        };\n      }\n\n      return this.$locale.adjustTimeForDate(value, config);\n    },\n    sortRange: function sortRange(range) {\n      var priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : RANGE_PRIORITY.NONE;\n      var start = range.start,\n          end = range.end;\n\n      if (start > end) {\n        switch (priority) {\n          case RANGE_PRIORITY.START:\n            return {\n              start: start,\n              end: start\n            };\n\n          case RANGE_PRIORITY.END:\n            return {\n              start: end,\n              end: end\n            };\n\n          case RANGE_PRIORITY.BOTH:\n            return {\n              start: end,\n              end: start\n            };\n        }\n      }\n\n      return {\n        start: start,\n        end: end\n      };\n    },\n    denormalizeValue: function denormalizeValue(value) {\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.modelConfig_;\n\n      if (this.isRange) {\n        if (!this.hasValue(value)) return null;\n        return {\n          start: this.$locale.denormalizeDate(value.start, config.start || config),\n          end: this.$locale.denormalizeDate(value.end, config.end || config)\n        };\n      }\n\n      return this.$locale.denormalizeDate(value, config);\n    },\n    valuesAreEqual: function valuesAreEqual(a, b) {\n      if (this.isRange) {\n        var aHasValue = this.hasValue(a);\n        var bHasValue = this.hasValue(b);\n        if (!aHasValue && !bHasValue) return true;\n        if (aHasValue !== bHasValue) return false;\n        return datesAreEqual(a.start, b.start) && datesAreEqual(a.end, b.end);\n      }\n\n      return datesAreEqual(a, b);\n    },\n    valueIsDisabled: function valueIsDisabled(value) {\n      return this.hasValue(value) && this.disabledAttribute && this.disabledAttribute.intersectsDate(value);\n    },\n    formatInput: function formatInput() {\n      var _this11 = this;\n\n      this.$nextTick(function () {\n        var opts = {\n          type: 'string',\n          mask: _this11.inputMask\n        };\n\n        var value = _this11.denormalizeValue(_this11.dragValue || _this11.value_, opts);\n\n        if (_this11.isRange) {\n          _this11.inputValues = [value && value.start, value && value.end];\n        } else {\n          _this11.inputValues = [value, ''];\n        }\n      });\n    },\n    showPopover: function showPopover$1() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      showPopover(_objectSpread2(_objectSpread2(_objectSpread2({\n        ref: this.$el\n      }, this.popover_), opts), {}, {\n        isInteractive: true,\n        id: this.datePickerPopoverId\n      }));\n    },\n    hidePopover: function hidePopover$1() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      hidePopover(_objectSpread2(_objectSpread2(_objectSpread2({\n        hideDelay: 10\n      }, this.showPopover_), opts), {}, {\n        id: this.datePickerPopoverId\n      }));\n    },\n    togglePopover: function togglePopover$1(opts) {\n      togglePopover(_objectSpread2(_objectSpread2(_objectSpread2({\n        ref: this.$el\n      }, this.popover_), opts), {}, {\n        isInteractive: true,\n        id: this.datePickerPopoverId\n      }));\n    },\n    adjustPageRange: function adjustPageRange(isStart) {\n      var _this12 = this;\n\n      this.$nextTick(function () {\n        var calendar = _this12.$refs.calendar;\n\n        var page = _this12.getPageForValue(isStart);\n\n        var position = isStart ? 1 : -1;\n\n        if (page && calendar && !pageIsBetweenPages(page, calendar.firstPage, calendar.lastPage)) {\n          calendar.move(page, {\n            position: position,\n            transition: 'fade'\n          });\n        }\n      });\n    },\n    getPageForValue: function getPageForValue(isStart) {\n      if (this.hasValue(this.value_)) {\n        return this.pageForDate(this.isRange ? this.value_[isStart ? 'start' : 'end'] : this.value_);\n      }\n\n      return null;\n    },\n    move: function move(args, opts) {\n      if (this.$refs.calendar) {\n        return this.$refs.calendar.move(args, opts);\n      }\n\n      return Promise.reject(new Error('Navigation disabled while calendar is not yet displayed'));\n    },\n    focusDate: function focusDate(date, opts) {\n      if (this.$refs.calendar) {\n        return this.$refs.calendar.focusDate(date, opts);\n      }\n\n      return Promise.reject(new Error('Navigation disabled while calendar is not yet displayed'));\n    }\n  }\n};\nexport { script as s };","map":null,"metadata":{},"sourceType":"module"}