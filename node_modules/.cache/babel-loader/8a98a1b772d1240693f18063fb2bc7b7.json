{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// Utilities\nimport { consoleWarn } from './console';\nimport { chunk, padEnd } from './helpers';\nimport { toXYZ } from './color/transformSRGB';\nexport function isCssColor(color) {\n  return !!color && !!color.match(/^(#|var\\(--|(rgb|hsl)a?\\()/);\n}\nexport function colorToInt(color) {\n  var rgb;\n\n  if (typeof color === 'number') {\n    rgb = color;\n  } else if (typeof color === 'string') {\n    var c = color[0] === '#' ? color.substring(1) : color;\n\n    if (c.length === 3) {\n      c = c.split('').map(function (char) {\n        return char + char;\n      }).join('');\n    }\n\n    if (c.length !== 6) {\n      consoleWarn(\"'\".concat(color, \"' is not a valid rgb color\"));\n    }\n\n    rgb = parseInt(c, 16);\n  } else {\n    throw new TypeError(\"Colors can only be numbers or strings, recieved \".concat(color == null ? color : color.constructor.name, \" instead\"));\n  }\n\n  if (rgb < 0) {\n    consoleWarn(\"Colors cannot be negative: '\".concat(color, \"'\"));\n    rgb = 0;\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\n    consoleWarn(\"'\".concat(color, \"' is not a valid rgb color\"));\n    rgb = 0xffffff;\n  }\n\n  return rgb;\n}\nexport function classToHex(color, colors, currentTheme) {\n  var _color$toString$trim$ = color.toString().trim().replace('-', '').split(' ', 2),\n      _color$toString$trim$2 = _slicedToArray(_color$toString$trim$, 2),\n      colorName = _color$toString$trim$2[0],\n      colorModifier = _color$toString$trim$2[1];\n\n  var hexColor = '';\n\n  if (colorName && colorName in colors) {\n    if (colorModifier && colorModifier in colors[colorName]) {\n      hexColor = colors[colorName][colorModifier];\n    } else if ('base' in colors[colorName]) {\n      hexColor = colors[colorName].base;\n    }\n  } else if (colorName && colorName in currentTheme) {\n    hexColor = currentTheme[colorName];\n  }\n\n  return hexColor;\n}\nexport function intToHex(color) {\n  var hexColor = color.toString(16);\n  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor;\n  return '#' + hexColor;\n}\nexport function colorToHex(color) {\n  return intToHex(colorToInt(color));\n}\n/**\n * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]\n */\n\nexport function HSVAtoRGBA(hsva) {\n  var h = hsva.h,\n      s = hsva.s,\n      v = hsva.v,\n      a = hsva.a;\n\n  var f = function f(n) {\n    var k = (n + h / 60) % 6;\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  };\n\n  var rgb = [f(5), f(3), f(1)].map(function (v) {\n    return Math.round(v * 255);\n  });\n  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n    a: a\n  };\n}\n/**\n * Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color RGBA color as an array [0-255, 0-255, 0-255, 0-1]\n */\n\nexport function RGBAtoHSVA(rgba) {\n  if (!rgba) return {\n    h: 0,\n    s: 1,\n    v: 1,\n    a: 1\n  };\n  var r = rgba.r / 255;\n  var g = rgba.g / 255;\n  var b = rgba.b / 255;\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var h = 0;\n\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + (g - b) / (max - min));\n    } else if (max === g) {\n      h = 60 * (2 + (b - r) / (max - min));\n    } else if (max === b) {\n      h = 60 * (4 + (r - g) / (max - min));\n    }\n  }\n\n  if (h < 0) h = h + 360;\n  var s = max === 0 ? 0 : (max - min) / max;\n  var hsv = [h, s, max];\n  return {\n    h: hsv[0],\n    s: hsv[1],\n    v: hsv[2],\n    a: rgba.a\n  };\n}\nexport function HSVAtoHSLA(hsva) {\n  var h = hsva.h,\n      s = hsva.s,\n      v = hsva.v,\n      a = hsva.a;\n  var l = v - v * s / 2;\n  var sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l);\n  return {\n    h: h,\n    s: sprime,\n    l: l,\n    a: a\n  };\n}\nexport function HSLAtoHSVA(hsl) {\n  var h = hsl.h,\n      s = hsl.s,\n      l = hsl.l,\n      a = hsl.a;\n  var v = l + s * Math.min(l, 1 - l);\n  var sprime = v === 0 ? 0 : 2 - 2 * l / v;\n  return {\n    h: h,\n    s: sprime,\n    v: v,\n    a: a\n  };\n}\nexport function RGBAtoCSS(rgba) {\n  return \"rgba(\".concat(rgba.r, \", \").concat(rgba.g, \", \").concat(rgba.b, \", \").concat(rgba.a, \")\");\n}\nexport function RGBtoCSS(rgba) {\n  return RGBAtoCSS(_objectSpread(_objectSpread({}, rgba), {}, {\n    a: 1\n  }));\n}\nexport function RGBAtoHex(rgba) {\n  var toHex = function toHex(v) {\n    var h = Math.round(v).toString(16);\n    return ('00'.substr(0, 2 - h.length) + h).toUpperCase();\n  };\n\n  return \"#\".concat([toHex(rgba.r), toHex(rgba.g), toHex(rgba.b), toHex(Math.round(rgba.a * 255))].join(''));\n}\nexport function HexToRGBA(hex) {\n  var rgba = chunk(hex.slice(1), 2).map(function (c) {\n    return parseInt(c, 16);\n  });\n  return {\n    r: rgba[0],\n    g: rgba[1],\n    b: rgba[2],\n    a: Math.round(rgba[3] / 255 * 100) / 100\n  };\n}\nexport function HexToHSVA(hex) {\n  var rgb = HexToRGBA(hex);\n  return RGBAtoHSVA(rgb);\n}\nexport function HSVAtoHex(hsva) {\n  return RGBAtoHex(HSVAtoRGBA(hsva));\n}\nexport function parseHex(hex) {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1);\n  }\n\n  hex = hex.replace(/([^0-9a-f])/gi, 'F');\n\n  if (hex.length === 3 || hex.length === 4) {\n    hex = hex.split('').map(function (x) {\n      return x + x;\n    }).join('');\n  }\n\n  if (hex.length === 6) {\n    hex = padEnd(hex, 8, 'F');\n  } else {\n    hex = padEnd(padEnd(hex, 6), 8, 'F');\n  }\n\n  return \"#\".concat(hex).toUpperCase().substr(0, 9);\n}\nexport function parseGradient(gradient, colors, currentTheme) {\n  return gradient.replace(/([a-z]+(\\s[a-z]+-[1-5])?)(?=$|,)/gi, function (x) {\n    return classToHex(x, colors, currentTheme) || x;\n  }).replace(/(rgba\\()#[0-9a-f]+(?=,)/gi, function (x) {\n    return 'rgba(' + Object.values(HexToRGBA(parseHex(x.replace(/rgba\\(/, '')))).slice(0, 3).join(',');\n  });\n}\nexport function RGBtoInt(rgba) {\n  return (rgba.r << 16) + (rgba.g << 8) + rgba.b;\n}\n/**\n * Returns the contrast ratio (1-21) between two colors.\n *\n * @param c1 First color\n * @param c2 Second color\n */\n\nexport function contrastRatio(c1, c2) {\n  var _toXYZ = toXYZ(RGBtoInt(c1)),\n      _toXYZ2 = _slicedToArray(_toXYZ, 2),\n      y1 = _toXYZ2[1];\n\n  var _toXYZ3 = toXYZ(RGBtoInt(c2)),\n      _toXYZ4 = _slicedToArray(_toXYZ3, 2),\n      y2 = _toXYZ4[1];\n\n  return (Math.max(y1, y2) + 0.05) / (Math.min(y1, y2) + 0.05);\n}","map":null,"metadata":{},"sourceType":"module"}