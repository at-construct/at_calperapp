{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Vue from 'vue';\nexport default Vue.extend({\n  name: 'row-group',\n  functional: true,\n  props: {\n    value: {\n      type: Boolean,\n      default: true\n    },\n    headerClass: {\n      type: String,\n      default: 'v-row-group__header'\n    },\n    contentClass: String,\n    summaryClass: {\n      type: String,\n      default: 'v-row-group__summary'\n    }\n  },\n  render: function render(h, _ref) {\n    var slots = _ref.slots,\n        props = _ref.props;\n    var computedSlots = slots();\n    var children = [];\n\n    if (computedSlots['column.header']) {\n      children.push(h('tr', {\n        staticClass: props.headerClass\n      }, computedSlots['column.header']));\n    } else if (computedSlots['row.header']) {\n      children.push.apply(children, _toConsumableArray(computedSlots['row.header']));\n    }\n\n    if (computedSlots['row.content'] && props.value) children.push.apply(children, _toConsumableArray(computedSlots['row.content']));\n\n    if (computedSlots['column.summary']) {\n      children.push(h('tr', {\n        staticClass: props.summaryClass\n      }, computedSlots['column.summary']));\n    } else if (computedSlots['row.summary']) {\n      children.push.apply(children, _toConsumableArray(computedSlots['row.summary']));\n    }\n\n    return children;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}