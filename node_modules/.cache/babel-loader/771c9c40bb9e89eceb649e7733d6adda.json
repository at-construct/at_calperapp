{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapActions } from 'vuex';\nimport { validationMixin } from 'vuelidate';\nimport { required } from 'vuelidate/lib/validators';\nimport DialogSection from './DialogSection';\nimport DateForm from './DateForm';\nimport TimeForm from './TimeForm';\nimport TextForm from './TextForm';\nimport ColorForm from './ColorForm';\nimport CheckBox from './CheckBox';\nimport { isGreaterEndThanStart } from '../functions/datetime';\nexport default {\n  name: 'EventFormDialog',\n  mixins: [validationMixin],\n  components: {\n    DialogSection: DialogSection,\n    DateForm: DateForm,\n    TimeForm: TimeForm,\n    TextForm: TextForm,\n    ColorForm: ColorForm,\n    CheckBox: CheckBox\n  },\n  data: function data() {\n    return {\n      name: '',\n      startDate: null,\n      startTime: null,\n      endDate: null,\n      endTime: null,\n      description: '',\n      color: '',\n      allDay: false\n    };\n  },\n  validations: {\n    name: {\n      required: required\n    },\n    startDate: {\n      required: required\n    },\n    endDate: {\n      required: required\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters('events', ['event'])), {}, {\n    isInvalidDatetime: function isInvalidDatetime() {\n      return !isGreaterEndThanStart(this.startDate, this.startTime, this.endDate, this.endTime, this.allDay);\n    },\n    isInvalid: function isInvalid() {\n      return this.$v.$invalid || this.isInvaledDatetime;\n    }\n  }),\n  created: function created() {\n    this.name = this.event.name;\n    this.startDate = this.event.startDate;\n    this.startTime = this.event.startTime;\n    this.endDate = this.event.endDate;\n    this.endTime = this.event.endTime;\n    this.description = this.event.description;\n    this.color = this.event.color;\n    this.allDay = !this.event.timed;\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions('events', ['setEvent', 'setEditMode', 'createEvent', 'updateEvent'])), {}, {\n    closeDialog: function closeDialog() {\n      this.setEvent(null);\n    },\n    submit: function submit() {\n      if (this.isInvalid) {\n        return;\n      }\n\n      var params = _objectSpread(_objectSpread({}, this.event), {}, {\n        name: this.name,\n        start: \"\".concat(this.startDate, \" \").concat(this.startTime || ''),\n        end: \"\".concat(this.endDate, \" \").concat(this.endTime || ''),\n        description: this.description,\n        color: this.color,\n        timed: !this.allDay\n      });\n\n      if (params.id) {\n        this.updateEvent(params);\n      } else {\n        this.createEvent(params);\n      }\n\n      this.closeDialog();\n    }\n  })\n};","map":{"version":3,"sources":["EventFormDialog.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-card class=\"pb-12\">\n    <v-card-actions class=\"d-flex justify-end pa-2\">\n      <v-btn icon @click=\"closeDialog\">\n        <v-icon size=\"20px\">mdi-close</v-icon>\n      </v-btn>\n    </v-card-actions>\n    <v-card-text>\n      <DialogSection icon=\"mdi-square\" :color=\"color\">\n        <v-text-field v-model=\"name\" label=\"タイトル\"></v-text-field>\n      </DialogSection>\n      <DialogSection icon=\"mdi-clock-outline\">\n      <DateForm v-model=\"startDate\" />\n      <div v-show=\"!allDay\">\n        <TimeForm v-model=\"startTime\" />\n      </div>\n      <span class=\"px-2\">–</span>\n      <DateForm v-model=\"endDate\" :isError=\"isInvalidDatetime\" />\n      <div v-show=\"!allDay\">\n      <TimeForm v-model=\"endTime\" :isError=\"isInvalidDatetime\" />\n      </div>\n      </DialogSection>\n      <DialogSection>\n        <CheckBox v-model=\"allDay\" label=\"終日\" class=\"ma-0 pa-0\" />\n      </DialogSection>\n      <DialogSection icon=\"mdi-card-text-outline\">\n        <TextForm v-model=\"description\" />\n      </DialogSection>\n      <DialogSection icon=\"mdi-palette\">\n        <ColorForm v-model=\"color\" />\n      </DialogSection>\n    </v-card-text>\n    <v-card-actions class=\"d-flex justify-end\">\n      <v-btn :disabled=\"isInvalid\" @click=\"submit\">保存</v-btn>\n    </v-card-actions>\n  </v-card>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex';\nimport { validationMixin } from 'vuelidate';\nimport { required } from 'vuelidate/lib/validators';\n\nimport DialogSection from './DialogSection';\nimport DateForm from './DateForm';\nimport TimeForm from './TimeForm';\nimport TextForm from './TextForm';\nimport ColorForm from './ColorForm';\nimport CheckBox from './CheckBox';\nimport { isGreaterEndThanStart } from '../functions/datetime';\n\nexport default {\n  name: 'EventFormDialog',\n  mixins: [validationMixin],\n  components: {\n    DialogSection,\n    DateForm,\n    TimeForm,\n    TextForm,\n    ColorForm,\n    CheckBox,\n  },\n  data: () => ({\n    name: '',\n    startDate: null,\n    startTime: null,\n    endDate: null,\n    endTime: null,\n    description: '',\n    color: '',\n    allDay: false,\n  }),\n  validations: {\n  name: { required },\n  startDate: { required },\n  endDate: { required },\n  },\n  computed: {\n    ...mapGetters('events', ['event']),\n    isInvalidDatetime() {\n      return !isGreaterEndThanStart(this.startDate, this.startTime, this.endDate, this.endTime, this.allDay);\n    },\n    isInvalid() {\n      return this.$v.$invalid || this.isInvaledDatetime;\n    },\n  },\n  created() {\n    this.name = this.event.name;\n    this.startDate = this.event.startDate;\n    this.startTime = this.event.startTime;\n    this.endDate = this.event.endDate;\n    this.endTime = this.event.endTime;\n    this.description = this.event.description;\n    this.color = this.event.color;\n    this.allDay = !this.event.timed;\n  },\n  methods: {\n    ...mapActions('events', ['setEvent', 'setEditMode', 'createEvent', 'updateEvent']),\n    closeDialog() {\n      this.setEvent(null);\n    },\n    submit() {\n      if (this.isInvalid) {\n        return\n      }\n      const params = {\n        ...this.event,\n        name: this.name,\n        start: `${this.startDate} ${this.startTime || ''}`,\n        end: `${this.endDate} ${this.endTime || ''}`,\n        description: this.description,\n        color: this.color,\n        timed: !this.allDay,\n      };\n      if (params.id) {\n        this.updateEvent(params);\n      } else {\n        this.createEvent(params);\n      }\n      this.closeDialog();\n    },\n  },\n};\n</script>"],"sourceRoot":"app/javascript/components"},"metadata":{},"sourceType":"module"}