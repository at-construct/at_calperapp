{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapActions } from 'vuex';\nimport DialogSection from '../layouts/DialogSection';\nimport EventFormDialog from '../events/EventFormDialog';\nexport default {\n  name: 'EventDetailDialog',\n  components: {\n    DialogSection: DialogSection,\n    EventFormDialog: EventFormDialog\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters('events', ['event', 'isEditMode'])), mapGetters('participants', ['participants', 'isEditModeParticipantUser'])),\n  methods: _objectSpread(_objectSpread(_objectSpread({}, mapActions('events', ['setEvent', 'deleteEvent', 'setEditMode'])), mapActions('participants', ['setParticipantUsers', 'setEditModeParticipantUser'])), {}, {\n    closeDialog: function closeDialog() {\n      this.setEvent(null);\n      this.setEditMode(false);\n      this.setEditModeParticipantUser(false);\n    },\n    del: function del() {\n      this.showDeleteConfirmation = true; // 警告ダイアログを表示\n    },\n    deleteEventConfirmed: function deleteEventConfirmed() {\n      this.deleteEvent(this.event.id); // 実際の削除処理\n\n      this.showDeleteConfirmation = false; // 警告ダイアログを非表示\n    },\n    edit: function edit() {\n      this.setEditMode(true);\n      this.setEditModeParticipantUser(true);\n    }\n  })\n};","map":{"version":3,"sources":["EventDetailDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AACA,OAAA,aAAA,MAAA,0BAAA;AACA,OAAA,eAAA,MAAA,2BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,mBADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,aAAA,EAAA,aADA;AAEA,IAAA,eAAA,EAAA;AAFA,GAFA;AAMA,EAAA,QAAA,kCACA,UAAA,CAAA,QAAA,EAAA,CAAA,OAAA,EAAA,YAAA,CAAA,CADA,GAEA,UAAA,CAAA,cAAA,EAAA,CAAA,cAAA,EAAA,2BAAA,CAAA,CAFA,CANA;AAUA,EAAA,OAAA,gDACA,UAAA,CAAA,QAAA,EAAA,CAAA,UAAA,EAAA,aAAA,EAAA,aAAA,CAAA,CADA,GAEA,UAAA,CAAA,cAAA,EAAA,CAAA,qBAAA,EAAA,4BAAA,CAAA,CAFA;AAGA,IAAA,WAHA,yBAGA;AACA,WAAA,QAAA,CAAA,IAAA;AACA,WAAA,WAAA,CAAA,KAAA;AACA,WAAA,0BAAA,CAAA,KAAA;AACA,KAPA;AAQA,IAAA,GARA,iBAQA;AACA,WAAA,sBAAA,GAAA,IAAA,CADA,CACA;AACA,KAVA;AAWA,IAAA,oBAXA,kCAWA;AACA,WAAA,WAAA,CAAA,KAAA,KAAA,CAAA,EAAA,EADA,CACA;;AACA,WAAA,sBAAA,GAAA,KAAA,CAFA,CAEA;AACA,KAdA;AAeA,IAAA,IAfA,kBAeA;AACA,WAAA,WAAA,CAAA,IAAA;AACA,WAAA,0BAAA,CAAA,IAAA;AACA;AAlBA;AAVA,CAAA","sourcesContent":["<template>\n  <v-card class=\"pb-12\">\n    <v-card-actions class=\"d-flex pa-2\">\n      <v-btn icon @click=\"del\">\n        <v-icon size=\"20px\">mdi-trash-can-outline</v-icon>\n      </v-btn>\n      <v-spacer></v-spacer>\n      <v-btn icon @click=\"edit\">\n        <v-icon size=\"20px\">mdi-pencil-outline</v-icon>\n      </v-btn>\n      <v-btn icon @click=\"closeDialog\">\n        <v-icon size=\"20px\">mdi-close</v-icon>\n      </v-btn>\n      <EventFormDialog v-if=\"event !== null && isEditMode && isEditModeParticipantUser\" />\n    </v-card-actions>\n\n    <!-- ダイアログ -->\n    <v-dialog v-model=\"showDeleteConfirmation\" max-width=\"400\">\n      <v-card>\n        <v-card-title class=\"headline\">警告</v-card-title>\n        <v-card-text>\n          削除すると元に戻せませんが、それでも削除しますか？\n        </v-card-text>\n        <v-card-actions>\n          <v-btn text color=\"red\" @click=\"deleteEventConfirmed\">削除</v-btn>\n          <v-btn text @click=\"showDeleteConfirmation = false\">キャンセル</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <v-card-title>\n      <DialogSection icon=\"mdi-square\" :color=\"event.color\" class=\"event-name\">\n        {{ event.name }}\n      </DialogSection>\n    </v-card-title>\n\n    <v-card-title>\n      <DialogSection icon=\"mdi-square\" :color=\"event.color\" class=\"event-name\">\n        {{ event.name }}\n      </DialogSection>\n    </v-card-title>\n    <v-card-text>\n      <DialogSection icon=\"mdi-clock-time-three-outline\" class=\"event-date\">\n        {{ event.startDate }}{{ event.timed ? ' ' + event.startTime : ''}} ~\n        {{ event.endDate }} \n        {{ event.timed ? event.endTime : ' 終日' }}\n      </DialogSection>\n    </v-card-text>\n    <v-card-text>\n      <DialogSection icon=\"mdi-card-text-outline\" class=\"event-description\">\n        {{ event.description || '予定の説明なし' }}\n      </DialogSection>\n    </v-card-text>\n    <v-card-text>\n      <DialogSection icon=\"mdi-account-group-outline\">\n        {{ event.user || '参加予定ユーザー(※未実装機能)' }}\n      </DialogSection>\n    </v-card-text>\n    <v-card-text>\n      <DialogSection icon=\"mdi-office-building-outline\">\n        {{ event.user || '使用設備(※未実装機能)' }}\n      </DialogSection>\n    </v-card-text>\n    <v-card-text>\n      <DialogSection icon=\"mdi-head-outline\">\n        {{ event.user || 'イベント作成者の表示(※未実装機能)' }}\n      </DialogSection>\n    </v-card-text>\n  </v-card>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex';\nimport DialogSection from '../layouts/DialogSection';\nimport EventFormDialog from '../events/EventFormDialog';\n\nexport default {\n  name: 'EventDetailDialog',\n  components: {\n    DialogSection,\n    EventFormDialog\n  },\n  computed: {\n    ...mapGetters('events', ['event', 'isEditMode']),\n    ...mapGetters('participants', ['participants', 'isEditModeParticipantUser']),\n  },\n  methods: {\n    ...mapActions('events', ['setEvent', 'deleteEvent', 'setEditMode']),\n    ...mapActions('participants', ['setParticipantUsers', 'setEditModeParticipantUser']),\n    closeDialog() {\n      this.setEvent(null);\n      this.setEditMode(false);\n      this.setEditModeParticipantUser(false);\n    },\n    del() {\n      this.showDeleteConfirmation = true; // 警告ダイアログを表示\n    },\n    deleteEventConfirmed() {\n      this.deleteEvent(this.event.id); // 実際の削除処理\n      this.showDeleteConfirmation = false; // 警告ダイアログを非表示\n    },\n    edit() {\n      this.setEditMode(true);\n      this.setEditModeParticipantUser(true);\n    },\n  }\n};\n</script>\n\n<style>\n.event-name {\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.event-date {\n  font-size: 18px;\n}\n\n.event-description {\n  font-size: 12px;\n}\n</style>"],"sourceRoot":"app/javascript/components/events"},"metadata":{},"sourceType":"module"}