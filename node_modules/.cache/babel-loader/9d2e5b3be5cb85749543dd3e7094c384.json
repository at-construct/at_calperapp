{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport axios from 'axios';\nimport { serializeEvent } from '../../functions/serializers';\nvar apiUrl = 'http://localhost:5000';\nvar state = {\n  events: [],\n  event: null,\n  isEditMode: false\n};\nvar getters = {\n  events: function events(state) {\n    return state.events.map(function (event) {\n      return serializeEvent(event);\n    });\n  },\n  event: function event(state) {\n    return serializeEvent(state.event);\n  },\n  isEditMode: function isEditMode(state) {\n    return state.isEditMode;\n  }\n};\nvar mutations = {\n  setEvents: function setEvents(state, events) {\n    return state.events = events;\n  },\n  appendEvent: function appendEvent(state, event) {\n    return state.events = [].concat(_toConsumableArray(state.events), [event]);\n  },\n  setEvent: function setEvent(state, event) {\n    return state.event = event;\n  },\n  removeEvent: function removeEvent(state, event) {\n    return state.events = state.events.filter(function (e) {\n      return e.id !== event.id;\n    });\n  },\n  resetEvent: function resetEvent(state) {\n    return state.event = null;\n  },\n  setEditMode: function setEditMode(state, bool) {\n    return state.isEditMode = bool;\n  }\n};\nvar actions = {\n  fetchEvents: function fetchEvents(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return axios.get(\"\".concat(apiUrl, \"/events\"));\n\n            case 3:\n              response = _context.sent;\n              commit('setEvents', response.data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  createEvent: function createEvent(_ref2, event) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return axios.post(\"\".concat(apiUrl, \"/events\"), event);\n\n            case 3:\n              response = _context2.sent;\n              commit('appendEvent', response.data);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  deleteEvent: function deleteEvent(_ref3, id) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              _context3.next = 3;\n              return axios[\"delete\"](\"\".concat(apiUrl, \"/events/\").concat(id));\n\n            case 3:\n              response = _context3.sent;\n              commit('removeEvent', response.data);\n              commit('resetEvent');\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  updateEvent: function updateEvent(_ref4, event) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref4.commit;\n              _context4.next = 3;\n              return axios.put(\"\".concat(apiUrl, \"/events/\").concat(event.id), event);\n\n            case 3:\n              response = _context4.sent;\n              commit('updateEvent', response.data);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  },\n  setEvent: function setEvent(_ref5, event) {\n    var commit = _ref5.commit;\n    commit('setEvent', event);\n  },\n  setEditMode: function setEditMode(_ref6, bool) {\n    var commit = _ref6.commit;\n    commit('setEditMode', bool);\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"sources":["/Users/at19830906/projects/CalRailsVueApp/app/javascript/store/modules/events.js"],"names":["axios","serializeEvent","apiUrl","state","events","event","isEditMode","getters","map","mutations","setEvents","appendEvent","setEvent","removeEvent","filter","e","id","resetEvent","setEditMode","bool","actions","fetchEvents","commit","get","response","data","createEvent","post","deleteEvent","updateEvent","put","namespaced"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { serializeEvent } from '../../functions/serializers';\n\nconst apiUrl = 'http://localhost:5000';\n\nconst state = {\n  events: [],\n  event: null,\n  isEditMode: false,\n};\n\nconst getters = {\n  events: state => state.events.map(event => serializeEvent(event)),\n  event: state => serializeEvent(state.event),\n  isEditMode: state => state.isEditMode,\n};\n\nconst mutations = {\n  setEvents: (state, events) => (state.events = events),\n  appendEvent: (state, event) => (state.events = [...state.events, event]),\n  setEvent: (state, event) => (state.event = event),\n  removeEvent: (state, event) => (state.events = state.events.filter(e => e.id !== event.id)),\n  resetEvent: state => (state.event = null),\n  setEditMode: (state, bool) => (state.isEditMode = bool),\n};\n\nconst actions = {\n  async fetchEvents({ commit }) {\n    const response = await axios.get(`${apiUrl}/events`);\n    commit('setEvents', response.data);\n  },\n  async createEvent({ commit }, event) {\n    const response = await axios.post(`${apiUrl}/events`, event);\n    commit('appendEvent', response.data);\n  },\n  async deleteEvent({ commit }, id) {\n    const response = await axios.delete(`${apiUrl}/events/${id}`);\n    commit('removeEvent', response.data);\n    commit('resetEvent');\n  },\n  async updateEvent({ commit }, event) {\n    const response = await axios.put(`${apiUrl}/events/${event.id}`, event);\n    commit('updateEvent', response.data);\n  },\n  setEvent({ commit }, event) {\n    commit('setEvent', event);\n  },\n  setEditMode({ commit }, bool) {\n    commit('setEditMode', bool);\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};"]},"metadata":{},"sourceType":"module"}