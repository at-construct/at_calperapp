{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport axios from 'axios';\nvar state = {\n  groups: []\n};\nvar mutations = {\n  setGroups: function setGroups(state, groups) {\n    state.groups = groups;\n  }\n};\nvar actions = {\n  fetchGroups: function fetchGroups(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return axios.get('/api/groups');\n\n            case 3:\n              response = _context.sent;\n              commit('setGroups', response.data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n};\nvar getters = {\n  usersByCalendarId: function usersByCalendarId(state) {\n    return function (calendarId) {\n      var group = state.groups.find(function (group) {\n        return group.calendar_id === calendarId;\n      });\n\n      if (group) {\n        return group.users;\n      } else {\n        return [];\n      }\n    };\n  }\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  actions: actions,\n  getters: getters\n};","map":{"version":3,"sources":["/Users/aaattt/projects/CalRailsVueApp/app/javascript/store/modules/groups.js"],"names":["axios","state","groups","mutations","setGroups","actions","fetchGroups","commit","get","response","data","getters","usersByCalendarId","calendarId","group","find","calendar_id","users"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE;AADI,CAAd;AAIA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,SADgB,qBACNH,KADM,EACCC,MADD,EACS;AACvBD,IAAAA,KAAK,CAACC,MAAN,GAAeA,MAAf;AACD;AAHe,CAAlB;AAMA,IAAMG,OAAO,GAAG;AACRC,EAAAA,WADQ,6BACgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAVC,cAAAA,MAAU,QAAVA,MAAU;AAAA;AAAA,qBACLP,KAAK,CAACQ,GAAN,CAAU,aAAV,CADK;;AAAA;AACtBC,cAAAA,QADsB;AAE5BF,cAAAA,MAAM,CAAC,WAAD,EAAcE,QAAQ,CAACC,IAAvB,CAAN;;AAF4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG7B;AAJa,CAAhB;AAOA,IAAMC,OAAO,GAAG;AACdC,EAAAA,iBAAiB,EAAE,2BAACX,KAAD;AAAA,WAAW,UAACY,UAAD,EAAgB;AAC5C,UAAMC,KAAK,GAAGb,KAAK,CAACC,MAAN,CAAaa,IAAb,CAAkB,UAAAD,KAAK;AAAA,eAAIA,KAAK,CAACE,WAAN,KAAsBH,UAA1B;AAAA,OAAvB,CAAd;;AACA,UAAIC,KAAJ,EAAW;AACT,eAAOA,KAAK,CAACG,KAAb;AACD,OAFD,MAEO;AACL,eAAO,EAAP;AACD;AACF,KAPkB;AAAA;AADL,CAAhB;AAWA,eAAe;AACbhB,EAAAA,KAAK,EAALA,KADa;AAEbE,EAAAA,SAAS,EAATA,SAFa;AAGbE,EAAAA,OAAO,EAAPA,OAHa;AAIbM,EAAAA,OAAO,EAAPA;AAJa,CAAf","sourcesContent":["import axios from 'axios'\n\nconst state = {\n  groups: []\n}\n\nconst mutations = {\n  setGroups(state, groups) {\n    state.groups = groups\n  }\n}\n\nconst actions = {\n  async fetchGroups({ commit }) {\n    const response = await axios.get('/api/groups')\n    commit('setGroups', response.data)\n  }\n}\n\nconst getters = {\n  usersByCalendarId: (state) => (calendarId) => {\n    const group = state.groups.find(group => group.calendar_id === calendarId)\n    if (group) {\n      return group.users\n    } else {\n      return []\n    }\n  }\n}\n\nexport default {\n  state,\n  mutations,\n  actions,\n  getters\n}\n"]},"metadata":{},"sourceType":"module"}