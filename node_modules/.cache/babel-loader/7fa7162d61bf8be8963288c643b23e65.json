{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters, mapActions } from 'vuex';\nimport { validationMixin } from 'vuelidate';\nimport { required } from 'vuelidate/lib/validators';\nimport DialogSection from '../layouts/DialogSection';\nimport DateForm from '../forms/DateForm';\nimport TimeForm from '../forms/TimeForm';\nimport TextForm from '../forms/TextForm';\nimport ColorForm from '../forms/ColorForm';\nimport AlldayCheck from '../forms/AlldayCheck'; // import CalendarSelectForm from '../forms/CalendarSelectForm';\n\nimport GuestSelectForm from '../forms/GuestSelectForm';\nimport FacillitiesForm from '../forms/FacillitiesForm';\nimport { isGreaterEndThanStart } from '../../functions/datetime';\nexport default {\n  name: 'EventFormDialog',\n  mixins: [validationMixin],\n  components: {\n    DialogSection: DialogSection,\n    DateForm: DateForm,\n    TimeForm: TimeForm,\n    TextForm: TextForm,\n    ColorForm: ColorForm,\n    AlldayCheck: AlldayCheck,\n    // CalendarSelectForm,\n    GuestSelectForm: GuestSelectForm,\n    FacillitiesForm: FacillitiesForm\n  },\n  data: function data() {\n    return {\n      name: '',\n      startDate: new Date(),\n      // set default value to current date\n      startTime: null,\n      endDate: new Date(),\n      // set default value to current date\n      endTime: null,\n      description: '',\n      color: '',\n      allDay: false,\n      // calendar: null,\n      user: [],\n      // 空の配列として初期化する\n      facillities: [] // 空の配列として初期化する\n\n    };\n  },\n  validations: {\n    name: {\n      required: required\n    },\n    startDate: {\n      required: required\n    },\n    endDate: {\n      required: required\n    } // calendar: { required },\n\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, mapGetters('events', ['event'])), mapGetters('participants', ['participantUsers'])), mapGetters('users', ['users'])), {}, {\n    isInvalidDatetime: function isInvalidDatetime() {\n      return !isGreaterEndThanStart(this.startDate, this.startTime, this.endDate, this.endTime, this.allDay);\n    },\n    isInvalid: function isInvalid() {\n      return this.$v.$invalid || this.isInvaledDatetime;\n    }\n  }),\n  created: function created() {\n    var _this = this;\n\n    if (this.event !== null && this.event !== undefined) {\n      this.name = this.event.name || '';\n      this.startDate = this.event.startDate || '';\n      this.startTime = this.event.startTime || '';\n      this.endDate = this.event.endDate || '';\n      this.endTime = this.event.endTime || '';\n      this.description = this.event.description || '';\n      this.color = this.event.color || '';\n      this.allDay = this.event.timed ? false : true;\n\n      if (this.event.id && this.event.user) {\n        var userIds = this.event.user.map(function (user) {\n          return user.id;\n        });\n        this.fetchUsers().then(function () {\n          _this.user = _this.users.filter(function (user) {\n            return userIds.includes(user.id);\n          });\n        });\n      } else {\n        this.fetchUsers();\n      }\n    }\n  },\n  methods: _objectSpread(_objectSpread(_objectSpread({}, mapActions('events', ['setEvent', 'setEditMode', 'createEvent', 'updateEvent'])), mapActions('users', ['setUsers', 'setEditModeUser', 'createUser', 'fetchUsers'])), {}, {\n    closeDialog: function closeDialog() {\n      this.setEvent(null);\n      this.setEditMode(false);\n    },\n    submit: function submit() {\n      var _this2 = this;\n\n      if (this.isInvalid) {\n        return;\n      }\n\n      ;\n\n      var eventParams = _objectSpread(_objectSpread({}, this.event), {}, {\n        name: this.name,\n        start: \"\".concat(this.startDate || '', \" \").concat(this.startTime || ''),\n        end: \"\".concat(this.endDate || '', \" \").concat(this.endTime || ''),\n        description: this.description,\n        color: this.color,\n        timed: !this.allDay,\n        participant: this.user,\n        user: this.user.name,\n        facillities: this.facillities\n      });\n\n      if (this.event.id) {\n        this.updateEvent(eventParams).then(function () {\n          _this2.closeDialog();\n        })[\"catch\"](function (error) {\n          console.error(error);\n        });\n      } else {\n        this.createEvent(eventParams).then(function () {\n          _this2.closeDialog();\n        })[\"catch\"](function (error) {\n          console.error(error);\n        });\n      }\n    },\n    cancel: function cancel() {\n      this.setEditMode(false);\n\n      if (!this.event.id) {\n        this.setEvent(null);\n      }\n    } // changeCalendar(calendar) {\n    //   this.color = calendar.color;\n    //   this.calendar = calendar;\n    // },\n\n  })\n};","map":{"version":3,"sources":["EventFormDialog.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-card class=\"pb-8\">\n    <v-card-actions class=\"d-flex justify-end pa-2\">\n      <v-btn icon @click=\"closeDialog\">\n        <v-icon size=\"20px\">mdi-close</v-icon>\n      </v-btn>\n    </v-card-actions>\n\n    <v-card-text>\n      <DialogSection icon=\"mdi-square\" :color=\"color\" style=\"margin-bottom: -20px;\">\n        <v-container fluid>\n          <v-row align=\"center\">\n            <v-col cols=\"12\" md=\"6\">\n              <v-text-field v-model=\"name\" label=\"タイトル\"></v-text-field>\n            </v-col>\n          </v-row>\n        </v-container>\n      </DialogSection>\n\n      <DialogSection icon=\"mdi-palette\" style=\"margin-top: -20px;\">\n        <ColorForm v-model=\"color\" />\n      </DialogSection>\n\n      <DialogSection icon=\"mdi-clock-outline\">\n        <AlldayCheck v-model=\"allDay\" label=\"終日\" />\n      </DialogSection>\n\n      <div style=\"margin-top: -30px; margin-bottom: -30px;\">\n        <!-- 余白を追加する -->\n      </div>\n\n      <DialogSection>\n        <DateForm v-model=\"startDate\" />\n        <div v-show=\"!allDay\">\n          <TimeForm v-model=\"startTime\" />\n        </div>\n      </DialogSection>\n\n      <DialogSection>\n        <DateForm v-model=\"endDate\" :isError=\"isInvalidDatetime\" />\n        <div v-show=\"!allDay\">\n          <TimeForm v-model=\"endTime\" :isError=\"isInvalidDatetime\" />\n        </div>\n      </DialogSection>\n\n      <DialogSection icon=\"mdi-card-text-outline\">\n        <TextForm v-model=\"description\" />\n      </DialogSection>\n\n      <!-- カレンダーセレクトフォーム -->\n      <!-- <DialogSection icon=\"mdi-calendar\">\n        <CalendarSelectForm :value=\"calendar\" @input=\"changeCalendar($event)\" />\n      </DialogSection> -->\n\n      <DialogSection icon=\"mdi-account-group\">\n          <GuestSelectForm v-model=\"user\" />\n      </DialogSection>\n\n      <!-- 設備の選択機能 -->\n      <DialogSection icon=\"mdi-office-building-outline\">\n        <FacillitiesForm v-model=\"facillities\" />\n      </DialogSection>\n\n    </v-card-text>\n\n    <v-card-actions class=\"d-flex justify-end\">\n      <v-btn @click=\"cancel\" style=\"font-size: 14px;\">キャンセル</v-btn>\n      <v-btn :disabled=\"isInvalid\" @click=\"submit\" style=\"font-size: 14px;\">保存</v-btn>\n    </v-card-actions>\n  </v-card>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex';\nimport { validationMixin } from 'vuelidate';\nimport { required } from 'vuelidate/lib/validators';\n\nimport DialogSection from '../layouts/DialogSection';\nimport DateForm from '../forms/DateForm';\nimport TimeForm from '../forms/TimeForm';\nimport TextForm from '../forms/TextForm';\nimport ColorForm from '../forms/ColorForm';\nimport AlldayCheck from '../forms/AlldayCheck';\n// import CalendarSelectForm from '../forms/CalendarSelectForm';\nimport GuestSelectForm from '../forms/GuestSelectForm';\nimport FacillitiesForm from '../forms/FacillitiesForm';\nimport { isGreaterEndThanStart } from '../../functions/datetime';\n\n\nexport default {\n  name: 'EventFormDialog',\n  mixins: [validationMixin],\n  components: {\n    DialogSection,\n    DateForm,\n    TimeForm,\n    TextForm,\n    ColorForm,\n    AlldayCheck,\n    // CalendarSelectForm,\n    GuestSelectForm,\n    FacillitiesForm,\n  },\n  data: () => ({\n    name: '',\n    startDate: new Date(), // set default value to current date\n    startTime: null,\n    endDate: new Date(), // set default value to current date\n    endTime: null,\n    description: '',\n    color: '',\n    allDay: false,\n    // calendar: null,\n    user: [], // 空の配列として初期化する\n    facillities: [], // 空の配列として初期化する\n  }),\n  validations: {\n    name: { required },\n    startDate: { required },\n    endDate: { required }\n    // calendar: { required },\n  },\n  computed: {\n    ...mapGetters('events', ['event']),\n    ...mapGetters('participants', ['participantUsers']),\n    ...mapGetters('users', ['users']),\n    isInvalidDatetime() {\n      return !isGreaterEndThanStart(\n        this.startDate,\n        this.startTime,\n        this.endDate,\n        this.endTime,\n        this.allDay\n      );\n    },\n    isInvalid() {\n      return this.$v.$invalid || this.isInvaledDatetime;\n    }\n  },\n\n  created() {\n    if (this.event !== null && this.event !== undefined) {\n      this.name = this.event.name || '';\n      this.startDate = this.event.startDate || '';\n      this.startTime = this.event.startTime || '';\n      this.endDate = this.event.endDate || '';\n      this.endTime = this.event.endTime || '';\n      this.description = this.event.description || '';\n      this.color = this.event.color || '';\n      this.allDay = this.event.timed ? false : true;\n      if (this.event.id && this.event.user) {\n        const userIds = this.event.user.map(user => user.id);\n        this.fetchUsers().then(() => {\n          this.user = this.users.filter(user =>\n            userIds.includes(user.id)\n          );\n        });\n      } else {\n        this.fetchUsers();\n      }\n    }\n  },\n\n  methods: {\n    ...mapActions('events', [\n      'setEvent',\n      'setEditMode',\n      'createEvent',\n      'updateEvent'\n    ]),\n    ...mapActions('users', [\n      'setUsers',\n      'setEditModeUser',\n      'createUser',\n      'fetchUsers',\n    ]),\n    closeDialog() {\n      this.setEvent(null);\n      this.setEditMode(false);\n    },\n\n    submit() {\n      if (this.isInvalid) {\n        return;\n      };\n      const eventParams = {\n        ...this.event,\n        name: this.name,\n        start: `${this.startDate || ''} ${this.startTime || ''}`,\n        end: `${this.endDate || ''} ${this.endTime || ''}`,\n        description: this.description,\n        color: this.color,\n        timed: !this.allDay,\n        participant: this.user,\n        user: this.user.name,\n        facillities: this.facillities,\n      };\n      if (this.event.id) { \n        this.updateEvent(eventParams)\n          .then(() => {\n            this.closeDialog();\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n      else {\n        this.createEvent(eventParams)\n          .then(() => {\n            this.closeDialog();\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n      }\n    },\n    cancel() {\n      this.setEditMode(false);\n      if (!this.event.id) {\n        this.setEvent(null);\n      }\n    },\n    // changeCalendar(calendar) {\n    //   this.color = calendar.color;\n    //   this.calendar = calendar;\n    // },\n  }\n\n};\n</script>"],"sourceRoot":"app/javascript/components/events"},"metadata":{},"sourceType":"module"}