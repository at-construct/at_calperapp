{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport mixins from '../../util/mixins';\nimport header from './mixins/header';\nimport { wrapInArray, convertToUnit } from '../../util/helpers';\nexport default mixins(header).extend({\n  name: 'v-data-table-header-desktop',\n  methods: {\n    genGroupByToggle: function genGroupByToggle(header) {\n      var _this = this;\n\n      return this.$createElement('span', {\n        on: {\n          click: function click(e) {\n            e.stopPropagation();\n\n            _this.$emit('group', header.value);\n          }\n        }\n      }, ['group']);\n    },\n    getAria: function getAria(beingSorted, isDesc) {\n      var _this2 = this;\n\n      var $t = function $t(key) {\n        return _this2.$vuetify.lang.t(\"$vuetify.dataTable.ariaLabel.\".concat(key));\n      };\n\n      var ariaSort = 'none';\n      var ariaLabel = [$t('sortNone'), $t('activateAscending')];\n\n      if (!beingSorted) {\n        return {\n          ariaSort: ariaSort,\n          ariaLabel: ariaLabel.join(' ')\n        };\n      }\n\n      if (isDesc) {\n        ariaSort = 'descending';\n        ariaLabel = [$t('sortDescending'), $t(this.options.mustSort ? 'activateAscending' : 'activateNone')];\n      } else {\n        ariaSort = 'ascending';\n        ariaLabel = [$t('sortAscending'), $t('activateDescending')];\n      }\n\n      return {\n        ariaSort: ariaSort,\n        ariaLabel: ariaLabel.join(' ')\n      };\n    },\n    genHeader: function genHeader(header) {\n      var _this3 = this;\n\n      var data = {\n        attrs: {\n          role: 'columnheader',\n          scope: 'col',\n          'aria-label': header.text || ''\n        },\n        style: {\n          width: convertToUnit(header.width),\n          minWidth: convertToUnit(header.width)\n        },\n        class: [\"text-\".concat(header.align || 'start')].concat(_toConsumableArray(wrapInArray(header.class)), [header.divider && 'v-data-table__divider']),\n        on: {}\n      };\n      var children = [];\n\n      if (header.value === 'data-table-select' && !this.singleSelect) {\n        return this.$createElement('th', data, [this.genSelectAll()]);\n      }\n\n      children.push(this.$scopedSlots[header.value] ? this.$scopedSlots[header.value]({\n        header: header\n      }) : this.$createElement('span', [header.text]));\n\n      if (!this.disableSort && (header.sortable || !header.hasOwnProperty('sortable'))) {\n        data.on.click = function () {\n          return _this3.$emit('sort', header.value);\n        };\n\n        var sortIndex = this.options.sortBy.findIndex(function (k) {\n          return k === header.value;\n        });\n        var beingSorted = sortIndex >= 0;\n        var isDesc = this.options.sortDesc[sortIndex];\n        data.class.push('sortable');\n\n        var _this$getAria = this.getAria(beingSorted, isDesc),\n            ariaLabel = _this$getAria.ariaLabel,\n            ariaSort = _this$getAria.ariaSort;\n\n        data.attrs['aria-label'] += \"\".concat(header.text ? ': ' : '').concat(ariaLabel);\n        data.attrs['aria-sort'] = ariaSort;\n\n        if (beingSorted) {\n          data.class.push('active');\n          data.class.push(isDesc ? 'desc' : 'asc');\n        }\n\n        if (header.align === 'end') children.unshift(this.genSortIcon());else children.push(this.genSortIcon());\n\n        if (this.options.multiSort && beingSorted) {\n          children.push(this.$createElement('span', {\n            class: 'v-data-table-header__sort-badge'\n          }, [String(sortIndex + 1)]));\n        }\n      }\n\n      if (this.showGroupBy && header.groupable !== false) children.push(this.genGroupByToggle(header));\n      return this.$createElement('th', data, children);\n    }\n  },\n  render: function render() {\n    var _this4 = this;\n\n    return this.$createElement('thead', {\n      staticClass: 'v-data-table-header'\n    }, [this.$createElement('tr', this.headers.map(function (header) {\n      return _this4.genHeader(header);\n    }))]);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}