{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport axios from 'axios';\nvar apiUrl = 'https://calrailsvueapp.herokuapp.com';\nvar state = {\n  visibilities: []\n};\nvar getters = {\n  getVisibilityByUserId: function getVisibilityByUserId(state) {\n    return function (userId) {\n      return state.visibilities.find(function (visibility) {\n        return visibility.user_id === userId;\n      });\n    };\n  }\n};\nvar mutations = {\n  setVisibilities: function setVisibilities(state, visibilities) {\n    state.visibilities = visibilities;\n  },\n  updateVisibility: function updateVisibility(state, updatedVisibility) {\n    var index = state.visibilities.findIndex(function (visibility) {\n      return visibility.user_id === updatedVisibility.user_id;\n    });\n\n    if (index !== -1) {\n      state.visibilities.splice(index, 1, updatedVisibility);\n    }\n  }\n};\nvar actions = {\n  fetchVisibilities: function fetchVisibilities(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.prev = 1;\n              _context.next = 4;\n              return axios.get('/api/visibilities');\n\n            case 4:\n              response = _context.sent;\n              commit('setVisibilities', response.data);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.error(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8]]);\n    }))();\n  },\n  updateVisibility: function updateVisibility(_ref2, payload) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var commit, userId, targetUserId, visibility, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.prev = 1;\n              userId = payload.userId, targetUserId = payload.targetUserId, visibility = payload.visibility;\n              _context2.next = 5;\n              return axios.patch(\"/api/visibilities/\".concat(userId), {\n                target_user_id: targetUserId,\n                visibility: visibility\n              });\n\n            case 5:\n              response = _context2.sent;\n              commit('updateVisibility', response.data);\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.error(_context2.t0);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 9]]);\n    }))();\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"sources":["/Users/aaattt/projects/CalRailsVueApp/app/javascript/store/modules/visibility.js"],"names":["axios","apiUrl","state","visibilities","getters","getVisibilityByUserId","userId","find","visibility","user_id","mutations","setVisibilities","updateVisibility","updatedVisibility","index","findIndex","splice","actions","fetchVisibilities","commit","get","response","data","console","error","payload","targetUserId","patch","target_user_id","namespaced"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,MAAM,GAAG,sCAAf;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,YAAY,EAAE;AADF,CAAd;AAIA,IAAMC,OAAO,GAAG;AACdC,EAAAA,qBAAqB,EAAE,+BAACH,KAAD;AAAA,WAAW,UAACI,MAAD,EAAY;AAC5C,aAAOJ,KAAK,CAACC,YAAN,CAAmBI,IAAnB,CAAwB,UAAAC,UAAU;AAAA,eAAIA,UAAU,CAACC,OAAX,KAAuBH,MAA3B;AAAA,OAAlC,CAAP;AACD,KAFsB;AAAA;AADT,CAAhB;AAMA,IAAMI,SAAS,GAAG;AAChBC,EAAAA,eADgB,2BACAT,KADA,EACOC,YADP,EACqB;AACnCD,IAAAA,KAAK,CAACC,YAAN,GAAqBA,YAArB;AACD,GAHe;AAIhBS,EAAAA,gBAJgB,4BAICV,KAJD,EAIQW,iBAJR,EAI2B;AACzC,QAAMC,KAAK,GAAGZ,KAAK,CAACC,YAAN,CAAmBY,SAAnB,CAA6B,UAAAP,UAAU;AAAA,aAAIA,UAAU,CAACC,OAAX,KAAuBI,iBAAiB,CAACJ,OAA7C;AAAA,KAAvC,CAAd;;AACA,QAAIK,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBZ,MAAAA,KAAK,CAACC,YAAN,CAAmBa,MAAnB,CAA0BF,KAA1B,EAAiC,CAAjC,EAAoCD,iBAApC;AACD;AACF;AATe,CAAlB;AAYA,IAAMI,OAAO,GAAG;AACRC,EAAAA,iBADQ,mCACsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAVC,cAAAA,MAAU,QAAVA,MAAU;AAAA;AAAA;AAAA,qBAETnB,KAAK,CAACoB,GAAN,CAAU,mBAAV,CAFS;;AAAA;AAE1BC,cAAAA,QAF0B;AAGhCF,cAAAA,MAAM,CAAC,iBAAD,EAAoBE,QAAQ,CAACC,IAA7B,CAAN;AAHgC;AAAA;;AAAA;AAAA;AAAA;AAKhCC,cAAAA,OAAO,CAACC,KAAR;;AALgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOnC,GARa;AASRZ,EAAAA,gBATQ,mCASqBa,OATrB,EAS8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAnBN,cAAAA,MAAmB,SAAnBA,MAAmB;AAAA;AAEhCb,cAAAA,MAFgC,GAEKmB,OAFL,CAEhCnB,MAFgC,EAExBoB,YAFwB,GAEKD,OAFL,CAExBC,YAFwB,EAEVlB,UAFU,GAEKiB,OAFL,CAEVjB,UAFU;AAAA;AAAA,qBAGjBR,KAAK,CAAC2B,KAAN,6BAAiCrB,MAAjC,GAA2C;AAChEsB,gBAAAA,cAAc,EAAEF,YADgD;AAEhElB,gBAAAA,UAAU,EAAEA;AAFoD,eAA3C,CAHiB;;AAAA;AAGlCa,cAAAA,QAHkC;AAOxCF,cAAAA,MAAM,CAAC,kBAAD,EAAqBE,QAAQ,CAACC,IAA9B,CAAN;AAPwC;AAAA;;AAAA;AAAA;AAAA;AASxCC,cAAAA,OAAO,CAACC,KAAR;;AATwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW3C;AApBa,CAAhB;AAuBA,eAAe;AACbK,EAAAA,UAAU,EAAE,IADC;AAEb3B,EAAAA,KAAK,EAALA,KAFa;AAGbE,EAAAA,OAAO,EAAPA,OAHa;AAIbM,EAAAA,SAAS,EAATA,SAJa;AAKbO,EAAAA,OAAO,EAAPA;AALa,CAAf","sourcesContent":["import axios from 'axios';\n\nconst apiUrl = 'https://calrailsvueapp.herokuapp.com';\n\nconst state = {\n  visibilities: [],\n};\n\nconst getters = {\n  getVisibilityByUserId: (state) => (userId) => {\n    return state.visibilities.find(visibility => visibility.user_id === userId);\n  },\n};\n\nconst mutations = {\n  setVisibilities(state, visibilities) {\n    state.visibilities = visibilities;\n  },\n  updateVisibility(state, updatedVisibility) {\n    const index = state.visibilities.findIndex(visibility => visibility.user_id === updatedVisibility.user_id);\n    if (index !== -1) {\n      state.visibilities.splice(index, 1, updatedVisibility);\n    }\n  },\n};\n\nconst actions = {\n  async fetchVisibilities({ commit }) {\n    try {\n      const response = await axios.get('/api/visibilities');\n      commit('setVisibilities', response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  },\n  async updateVisibility({ commit }, payload) {\n    try {\n      const { userId, targetUserId, visibility } = payload;\n      const response = await axios.patch(`/api/visibilities/${userId}`, {\n        target_user_id: targetUserId,\n        visibility: visibility,\n      });\n      commit('updateVisibility', response.data);\n    } catch (error) {\n      console.error(error);\n    }\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions,\n};\n"]},"metadata":{},"sourceType":"module"}