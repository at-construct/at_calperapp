{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport calendar from './components/Calendar.vue';\nexport default {\n  name: 'app',\n  components: {\n    calendar: calendar\n  }\n};","map":{"version":3,"sources":["app.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsLA,OAAA,QAAA,MAAA,2BAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,QAAA,EAAA;AADA;AAFA,CAAA","sourcesContent":["  \n<template>\n  <v-row class=\"fill-height\">\n    <v-col>\n      <v-sheet height=\"600\">\n        <v-calendar\n          ref=\"calendar\"\n          v-model=\"value\"\n          color=\"primary\"\n          type=\"4day\"\n          :events=\"events\"\n          :event-color=\"getEventColor\"\n          :event-ripple=\"false\"\n          @change=\"getEvents\"\n          @mousedown:event=\"startDrag\"\n          @mousedown:time=\"startTime\"\n          @mousemove:time=\"mouseMove\"\n          @mouseup:time=\"endDrag\"\n          @mouseleave.native=\"cancelDrag\"\n        >\n          <template v-slot:event=\"{ event, timed, eventSummary }\">\n            <div\n              class=\"v-event-draggable\"\n              v-html=\"eventSummary()\"\n            ></div>\n            <div\n              v-if=\"timed\"\n              class=\"v-event-drag-bottom\"\n              @mousedown.stop=\"extendBottom(event)\"\n            ></div>\n          </template>\n        </v-calendar>\n      </v-sheet>\n    </v-col>\n  </v-row>\n</template>\n\n<script>\n  export default {\n    data: () => ({\n      value: '',\n      events: [],\n      colors: ['#2196F3', '#3F51B5', '#673AB7', '#00BCD4', '#4CAF50', '#FF9800', '#757575'],\n      names: ['Meeting', 'Holiday', 'PTO', 'Travel', 'Event', 'Birthday', 'Conference', 'Party'],\n      dragEvent: null,\n      dragStart: null,\n      createEvent: null,\n      createStart: null,\n      extendOriginal: null,\n    }),\n    methods: {\n      startDrag ({ event, timed }) {\n        if (event && timed) {\n          this.dragEvent = event\n          this.dragTime = null\n          this.extendOriginal = null\n        }\n      },\n      startTime (tms) {\n        const mouse = this.toTime(tms)\n        if (this.dragEvent && this.dragTime === null) {\n          const start = this.dragEvent.start\n          this.dragTime = mouse - start\n        } else {\n          this.createStart = this.roundTime(mouse)\n          this.createEvent = {\n            name: `Event #${this.events.length}`,\n            color: this.rndElement(this.colors),\n            start: this.createStart,\n            end: this.createStart,\n            timed: true,\n          }\n          this.events.push(this.createEvent)\n        }\n      },\n      extendBottom (event) {\n        this.createEvent = event\n        this.createStart = event.start\n        this.extendOriginal = event.end\n      },\n      mouseMove (tms) {\n        const mouse = this.toTime(tms)\n        if (this.dragEvent && this.dragTime !== null) {\n          const start = this.dragEvent.start\n          const end = this.dragEvent.end\n          const duration = end - start\n          const newStartTime = mouse - this.dragTime\n          const newStart = this.roundTime(newStartTime)\n          const newEnd = newStart + duration\n          this.dragEvent.start = newStart\n          this.dragEvent.end = newEnd\n        } else if (this.createEvent && this.createStart !== null) {\n          const mouseRounded = this.roundTime(mouse, false)\n          const min = Math.min(mouseRounded, this.createStart)\n          const max = Math.max(mouseRounded, this.createStart)\n          this.createEvent.start = min\n          this.createEvent.end = max\n        }\n      },\n      endDrag () {\n        this.dragTime = null\n        this.dragEvent = null\n        this.createEvent = null\n        this.createStart = null\n        this.extendOriginal = null\n      },\n      cancelDrag () {\n        if (this.createEvent) {\n          if (this.extendOriginal) {\n            this.createEvent.end = this.extendOriginal\n          } else {\n            const i = this.events.indexOf(this.createEvent)\n            if (i !== -1) {\n              this.events.splice(i, 1)\n            }\n          }\n        }\n        this.createEvent = null\n        this.createStart = null\n        this.dragTime = null\n        this.dragEvent = null\n      },\n      roundTime (time, down = true) {\n        const roundTo = 15 // minutes\n        const roundDownTime = roundTo * 60 * 1000\n        return down\n          ? time - time % roundDownTime\n          : time + (roundDownTime - (time % roundDownTime))\n      },\n      toTime (tms) {\n        return new Date(tms.year, tms.month - 1, tms.day, tms.hour, tms.minute).getTime()\n      },\n      getEventColor (event) {\n        const rgb = parseInt(event.color.substring(1), 16)\n        const r = (rgb >> 16) & 0xFF\n        const g = (rgb >> 8) & 0xFF\n        const b = (rgb >> 0) & 0xFF\n        return event === this.dragEvent\n          ? `rgba(${r}, ${g}, ${b}, 0.7)`\n          : event === this.createEvent\n            ? `rgba(${r}, ${g}, ${b}, 0.7)`\n            : event.color\n      },\n      getEvents ({ start, end }) {\n        const events = []\n        const min = new Date(`${start.date}T00:00:00`).getTime()\n        const max = new Date(`${end.date}T23:59:59`).getTime()\n        const days = (max - min) / 86400000\n        const eventCount = this.rnd(days, days + 20)\n        for (let i = 0; i < eventCount; i++) {\n          const timed = this.rnd(0, 3) !== 0\n          const firstTimestamp = this.rnd(min, max)\n          const secondTimestamp = this.rnd(2, timed ? 8 : 288) * 900000\n          const start = firstTimestamp - (firstTimestamp % 900000)\n          const end = start + secondTimestamp\n          events.push({\n            name: this.rndElement(this.names),\n            color: this.rndElement(this.colors),\n            start,\n            end,\n            timed,\n          })\n        }\n        this.events = events\n      },\n      rnd (a, b) {\n        return Math.floor((b - a + 1) * Math.random()) + a\n      },\n      rndElement (arr) {\n        return arr[this.rnd(0, arr.length - 1)]\n      },\n    },\n  }\n</script>\n\n<template>\n  <div id=\"app\">\n    <calendar/>\n  </div>\n</template>\n\n<script>\nimport calendar from './components/Calendar.vue'\n\nexport default {\n  name: 'app',\n  components: {\n    calendar\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>"],"sourceRoot":"app/javascript"},"metadata":{},"sourceType":"module"}