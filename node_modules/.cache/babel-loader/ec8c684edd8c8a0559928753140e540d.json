{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios'; // import { serializeParticipant } from '../../functions/serializers';\n\nvar apiUrl = 'https://localhost:9292/';\nvar state = {\n  participants: []\n};\nvar getters = {\n  participantEvent: function participantEvent(state) {\n    return state.participantEvent.map(function (participantEvent) {\n      return _objectSpread(_objectSpread({}, participantEvent), {}, {\n        start: new Date(participant.start),\n        end: new Date(participant.end)\n      });\n    });\n  },\n  participant: function participant(state) {\n    return state.participant;\n  }\n};\nvar mutations = {\n  setParticipants: function setParticipants(state, participantEvent) {\n    return state.participantEvent = participantEvent;\n  },\n  appendParticipant: function appendParticipant(state, participant) {\n    return state.participants = [].concat(_toConsumableArray(state.participantEvent), [participant]);\n  },\n  ADD_PARTICIPANT: function ADD_PARTICIPANT(state, participant) {\n    state.participants.push(participant);\n  },\n  REMOVE_PARTICIPANT: function REMOVE_PARTICIPANT(state, participantId) {\n    return state.participants = state.participants.filter(function (p) {\n      return p.id !== participantId;\n    });\n  },\n  updateParticipant: function updateParticipant(state, participant) {\n    return state.participants = state.participants.map(function (p) {\n      return p.id === participant.id ? participant : p;\n    });\n  }\n};\nvar actions = {\n  fetchParticipants: function fetchParticipants(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return axios.get(\"\".concat(apiUrl, \"/participants/user_except/\"));\n\n            case 3:\n              response = _context.sent;\n              commit('setParticipants', response.data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  createParticipant: function createParticipant(_ref2, participant) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              console.log('createParticipant', participant);\n              _context2.next = 4;\n              return axios.post(\"\".concat(apiUrl, \"/participants/event_excerpt/\"), participant);\n\n            case 4:\n              response = _context2.sent;\n              commit('appendParticipant', response.data);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  deleteParticipant: function deleteParticipant(_ref3, participantId) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              commit = _ref3.commit;\n              _context3.next = 3;\n              return axios[\"delete\"](\"\".concat(apiUrl, \"/participants/event_excerpt/\").concat(participantId));\n\n            case 3:\n              response = _context3.sent;\n              commit('removeParticipant', response.data);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  updateParticipant: function updateParticipant(_ref4, participant) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref4.commit;\n              _context4.next = 3;\n              return axios.put(\"\".concat(apiUrl, \"/participants/event_excerpt/\").concat(participant.id), participant);\n\n            case 3:\n              response = _context4.sent;\n              commit('updateParticipant', response.data);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  },\n  addParticipant: function addParticipant(_ref5, _ref6) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var commit, eventId, userId, response, participant;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              commit = _ref5.commit;\n              eventId = _ref6.eventId, userId = _ref6.userId;\n              _context5.next = 4;\n              return RailsAPI.addParticipant(eventId, userId);\n\n            case 4:\n              response = _context5.sent;\n              participant = response.data;\n              commit('ADD_PARTICIPANT', participant);\n\n            case 7:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }))();\n  },\n  removeParticipant: function removeParticipant(_ref7, _ref8) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var commit, eventId, userId, response, participant;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              commit = _ref7.commit;\n              eventId = _ref8.eventId, userId = _ref8.userId;\n              _context6.next = 4;\n              return RailsAPI.removeParticipant(eventId, userId);\n\n            case 4:\n              response = _context6.sent;\n              participant = response.data;\n              commit('REMOVE_PARTICIPANT', participant.id);\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"sources":["/Users/aaattt/projects/CalRailsVueApp/app/javascript/store/modules/participants.js"],"names":["axios","apiUrl","state","participants","getters","participantEvent","map","start","Date","participant","end","mutations","setParticipants","appendParticipant","ADD_PARTICIPANT","push","REMOVE_PARTICIPANT","participantId","filter","p","id","updateParticipant","actions","fetchParticipants","commit","get","response","data","createParticipant","console","log","post","deleteParticipant","put","addParticipant","eventId","userId","RailsAPI","removeParticipant","namespaced"],"mappings":"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","sourcesContent":["import axios from 'axios';\n// import { serializeParticipant } from '../../functions/serializers';\n\nconst apiUrl = 'https://localhost:9292/';\n\nconst state = {\n  participants: [],\n};\n\nconst getters = {\n  participantEvent: state =>state.participantEvent.map(participantEvent => {\n    return {\n      ...participantEvent,\n      start: new Date(participant.start),\n      end: new Date(participant.end)\n    };\n  }),\n  participant: state => state.participant\n};\n\nconst mutations = {\n  setParticipants: (state, participantEvent) => (state.participantEvent = participantEvent),\n  appendParticipant: (state, participant) =>\n    (state.participants = [...state.participantEvent, participant]),\n  ADD_PARTICIPANT(state, participant) {\n    state.participants.push(participant);\n  },\n  REMOVE_PARTICIPANT: (state, participantId) =>\n    (state.participants = state.participants.filter(\n      p => p.id !== participantId\n    )),\n  updateParticipant: (state, participant) =>\n    (state.participants = state.participants.map(p =>\n      p.id === participant.id ? participant : p\n    ))\n};\n\nconst actions = {\n  async fetchParticipants({ commit }) {\n    const response = await axios.get(`${apiUrl}/participants/user_except/`);\n    commit('setParticipants', response.data);\n  },\n  async createParticipant({ commit }, participant) {\n    console.log('createParticipant', participant);\n    const response = await axios.post(`${apiUrl}/participants/event_excerpt/`, participant);\n    commit('appendParticipant', response.data);\n  },\n  async deleteParticipant({ commit }, participantId) {\n    const response = await axios.delete(\n      `${apiUrl}/participants/event_excerpt/${participantId}`\n    );\n    commit('removeParticipant', response.data);\n  },\n  async updateParticipant({ commit }, participant) {\n    const response = await axios.put(\n      `${apiUrl}/participants/event_excerpt/${participant.id}`,\n      participant\n    );\n    commit('updateParticipant', response.data);\n  },\n  async addParticipant({ commit }, { eventId, userId }) {\n    const response = await RailsAPI.addParticipant(eventId, userId);\n    const participant = response.data;\n    commit('ADD_PARTICIPANT', participant);\n  },\n  async removeParticipant({ commit }, { eventId, userId }) {\n    const response = await RailsAPI.removeParticipant(eventId, userId);\n    const participant = response.data;\n    commit('REMOVE_PARTICIPANT', participant.id);\n  },\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};\n"]},"metadata":{},"sourceType":"module"}