{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Styles\nimport \"../../../src/components/VAutocomplete/VAutocomplete.sass\"; // Extensions\n\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect';\nimport VTextField from '../VTextField/VTextField'; // Utilities\n\nimport mergeData from '../../util/mergeData';\nimport { getObjectValueByPath, getPropertyFromItem, keyCodes } from '../../util/helpers';\n\nvar defaultMenuProps = _objectSpread(_objectSpread({}, VSelectMenuProps), {}, {\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false\n});\n/* @vue/component */\n\n\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false\n    },\n    filter: {\n      type: Function,\n      default: function _default(item, queryText, itemText) {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1;\n      }\n    },\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: function _default() {\n        return defaultMenuProps;\n      }\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String\n    }\n  },\n  data: function data() {\n    return {\n      lazySearch: this.searchInput\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread(_objectSpread({}, VSelect.options.computed.classes.call(this)), {}, {\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1\n      });\n    },\n    computedItems: function computedItems() {\n      return this.filteredItems;\n    },\n    selectedValues: function selectedValues() {\n      var _this = this;\n\n      return this.selectedItems.map(function (item) {\n        return _this.getValue(item);\n      });\n    },\n    hasDisplayedItems: function hasDisplayedItems() {\n      var _this2 = this;\n\n      return this.hideSelected ? this.filteredItems.some(function (item) {\n        return !_this2.hasItem(item);\n      }) : this.filteredItems.length > 0;\n    },\n    currentRange: function currentRange() {\n      if (this.selectedItem == null) return 0;\n      return String(this.getText(this.selectedItem)).length;\n    },\n    filteredItems: function filteredItems() {\n      var _this3 = this;\n\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems;\n      return this.allItems.filter(function (item) {\n        var value = getPropertyFromItem(item, _this3.itemText);\n        var text = value != null ? String(value) : '';\n        return _this3.filter(item, String(_this3.internalSearch), text);\n      });\n    },\n    internalSearch: {\n      get: function get() {\n        return this.lazySearch;\n      },\n      set: function set(val) {\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val;\n          this.$emit('update:search-input', val);\n        }\n      }\n    },\n    isAnyValueAllowed: function isAnyValueAllowed() {\n      return false;\n    },\n    isDirty: function isDirty() {\n      return this.searchIsDirty || this.selectedItems.length > 0;\n    },\n    isSearching: function isSearching() {\n      return this.multiple && this.searchIsDirty || this.searchIsDirty && this.internalSearch !== this.getText(this.selectedItem);\n    },\n    menuCanShow: function menuCanShow() {\n      if (!this.isFocused) return false;\n      return this.hasDisplayedItems || !this.hideNoData;\n    },\n    $_menuProps: function $_menuProps() {\n      var props = VSelect.options.computed.$_menuProps.call(this);\n      props.contentClass = \"v-autocomplete__content \".concat(props.contentClass || '').trim();\n      return _objectSpread(_objectSpread({}, defaultMenuProps), props);\n    },\n    searchIsDirty: function searchIsDirty() {\n      return this.internalSearch != null && this.internalSearch !== '';\n    },\n    selectedItem: function selectedItem() {\n      var _this4 = this;\n\n      if (this.multiple) return null;\n      return this.selectedItems.find(function (i) {\n        return _this4.valueComparator(_this4.getValue(i), _this4.getValue(_this4.internalValue));\n      });\n    },\n    listData: function listData() {\n      var data = VSelect.options.computed.listData.call(this);\n      data.props = _objectSpread(_objectSpread({}, data.props), {}, {\n        items: this.virtualizedItems,\n        noFilter: this.noFilter || !this.isSearching || !this.filteredItems.length,\n        searchInput: this.internalSearch\n      });\n      return data;\n    }\n  },\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused: function isFocused(val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy);\n        this.$refs.input && this.$refs.input.select();\n      } else {\n        document.removeEventListener('copy', this.onCopy);\n        this.$refs.input && this.$refs.input.blur();\n        this.updateSelf();\n      }\n    },\n    isMenuActive: function isMenuActive(val) {\n      if (val || !this.hasSlot) return;\n      this.lazySearch = null;\n    },\n    items: function items(val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (!(oldVal && oldVal.length) && this.hideNoData && this.isFocused && !this.isMenuActive && val.length) this.activateMenu();\n    },\n    searchInput: function searchInput(val) {\n      this.lazySearch = val;\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf'\n  },\n  created: function created() {\n    this.setSearch();\n  },\n  destroyed: function destroyed() {\n    document.removeEventListener('copy', this.onCopy);\n  },\n  methods: {\n    onFilteredItemsChanged: function onFilteredItemsChanged(val, oldVal) {\n      var _this5 = this;\n\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return;\n      this.setMenuIndex(-1);\n      this.$nextTick(function () {\n        if (!_this5.internalSearch || val.length !== 1 && !_this5.autoSelectFirst) return;\n\n        _this5.$refs.menu.getTiles();\n\n        _this5.setMenuIndex(0);\n      });\n    },\n    onInternalSearchChanged: function onInternalSearchChanged() {\n      this.updateMenuDimensions();\n    },\n    updateMenuDimensions: function updateMenuDimensions() {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions();\n    },\n    changeSelectedIndex: function changeSelectedIndex(keyCode) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return;\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1;\n        } else {\n          this.selectedIndex--;\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1;\n        } else {\n          this.selectedIndex++;\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem();\n      }\n    },\n    deleteCurrentItem: function deleteCurrentItem() {\n      var curIndex = this.selectedIndex;\n      var curItem = this.selectedItems[curIndex]; // Do nothing if input or item is disabled\n\n      if (!this.isInteractive || this.getDisabled(curItem)) return;\n      var lastIndex = this.selectedItems.length - 1; // Select the last item if\n      // there is no selection\n\n      if (this.selectedIndex === -1 && lastIndex !== 0) {\n        this.selectedIndex = lastIndex;\n        return;\n      }\n\n      var length = this.selectedItems.length;\n      var nextIndex = curIndex !== length - 1 ? curIndex : curIndex - 1;\n      var nextItem = this.selectedItems[nextIndex];\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null);\n      } else {\n        this.selectItem(curItem);\n      }\n\n      this.selectedIndex = nextIndex;\n    },\n    clearableCallback: function clearableCallback() {\n      this.internalSearch = null;\n      VSelect.options.methods.clearableCallback.call(this);\n    },\n    genInput: function genInput() {\n      var input = VTextField.options.methods.genInput.call(this);\n      input.data = mergeData(input.data, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data, 'attrs.autocomplete', 'off')\n        },\n        domProps: {\n          value: this.internalSearch\n        }\n      });\n      return input;\n    },\n    genInputSlot: function genInputSlot() {\n      var slot = VSelect.options.methods.genInputSlot.call(this);\n      slot.data.attrs.role = 'combobox';\n      return slot;\n    },\n    genSelections: function genSelections() {\n      return this.hasSlot || this.multiple ? VSelect.options.methods.genSelections.call(this) : [];\n    },\n    onClick: function onClick(e) {\n      if (!this.isInteractive) return;\n      this.selectedIndex > -1 ? this.selectedIndex = -1 : this.onFocus();\n      if (!this.isAppendInner(e.target)) this.activateMenu();\n    },\n    onInput: function onInput(e) {\n      if (this.selectedIndex > -1 || !e.target) return;\n      var target = e.target;\n      var value = target.value; // If typing and menu is not currently active\n\n      if (target.value) this.activateMenu();\n      this.internalSearch = value;\n      this.badInput = target.validity && target.validity.badInput;\n    },\n    onKeyDown: function onKeyDown(e) {\n      var keyCode = e.keyCode;\n\n      if (e.ctrlKey || ![keyCodes.home, keyCodes.end].includes(keyCode)) {\n        VSelect.options.methods.onKeyDown.call(this, e);\n      } // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n\n\n      this.changeSelectedIndex(keyCode);\n    },\n    onSpaceDown: function onSpaceDown(e) {},\n    onTabDown: function onTabDown(e) {\n      VSelect.options.methods.onTabDown.call(this, e);\n      this.updateSelf();\n    },\n    onUpDown: function onUpDown(e) {\n      // Prevent screen from scrolling\n      e.preventDefault(); // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n\n      this.activateMenu();\n    },\n    selectItem: function selectItem(item) {\n      VSelect.options.methods.selectItem.call(this, item);\n      this.setSearch();\n    },\n    setSelectedItems: function setSelectedItems() {\n      VSelect.options.methods.setSelectedItems.call(this); // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n\n      if (!this.isFocused) this.setSearch();\n    },\n    setSearch: function setSearch() {\n      var _this6 = this;\n\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(function () {\n        if (!_this6.multiple || !_this6.internalSearch || !_this6.isMenuActive) {\n          _this6.internalSearch = !_this6.selectedItems.length || _this6.multiple || _this6.hasSlot ? null : _this6.getText(_this6.selectedItem);\n        }\n      });\n    },\n    updateSelf: function updateSelf() {\n      if (!this.searchIsDirty && !this.internalValue) return;\n\n      if (!this.valueComparator(this.internalSearch, this.getValue(this.internalValue))) {\n        this.setSearch();\n      }\n    },\n    hasItem: function hasItem(item) {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1;\n    },\n    onCopy: function onCopy(event) {\n      var _event$clipboardData, _event$clipboardData2;\n\n      if (this.selectedIndex === -1) return;\n      var currentItem = this.selectedItems[this.selectedIndex];\n      var currentItemText = this.getText(currentItem);\n      (_event$clipboardData = event.clipboardData) == null ? void 0 : _event$clipboardData.setData('text/plain', currentItemText);\n      (_event$clipboardData2 = event.clipboardData) == null ? void 0 : _event$clipboardData2.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText);\n      event.preventDefault();\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}