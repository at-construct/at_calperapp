{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { attachedRoot } from '../../util/dom';\n\nfunction defaultConditional() {\n  return true;\n}\n\nfunction checkEvent(e, el, binding) {\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || checkIsActive(e, binding) === false) return false; // If we're clicking inside the shadowroot, then the app root doesn't get the same\n  // level of introspection as to _what_ we're clicking. We want to check to see if\n  // our target is the shadowroot parent container, and if it is, ignore.\n\n  var root = attachedRoot(el);\n  if (root instanceof ShadowRoot && root.host === e.target) return false; // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n\n  var elements = (_typeof(binding.value) === 'object' && binding.value.include || function () {\n    return [];\n  })(); // Add the root element for the component this directive was defined on\n\n\n  elements.push(el); // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n\n  return !elements.some(function (el) {\n    return el.contains(e.target);\n  });\n}\n\nfunction checkIsActive(e, binding) {\n  var isActive = _typeof(binding.value) === 'object' && binding.value.closeConditional || defaultConditional;\n  return isActive(e);\n}\n\nfunction directive(e, el, binding) {\n  var handler = typeof binding.value === 'function' ? binding.value : binding.value.handler;\n  el._clickOutside.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(function () {\n    checkIsActive(e, binding) && handler && handler(e);\n  }, 0);\n}\n\nfunction handleShadow(el, callback) {\n  var root = attachedRoot(el);\n  callback(document.body);\n\n  if (root instanceof ShadowRoot) {\n    callback(root);\n  }\n}\n\nexport var ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted: function inserted(el, binding) {\n    var onClick = function onClick(e) {\n      return directive(e, el, binding);\n    };\n\n    var onMousedown = function onMousedown(e) {\n      el._clickOutside.lastMousedownWasOutside = checkEvent(e, el, binding);\n    };\n\n    handleShadow(el, function (app) {\n      app.addEventListener('click', onClick, true);\n      app.addEventListener('mousedown', onMousedown, true);\n    });\n    el._clickOutside = {\n      lastMousedownWasOutside: true,\n      onClick: onClick,\n      onMousedown: onMousedown\n    };\n  },\n  unbind: function unbind(el) {\n    if (!el._clickOutside) return;\n    handleShadow(el, function (app) {\n      if (!app || !el._clickOutside) return;\n      app.removeEventListener('click', el._clickOutside.onClick, true);\n      app.removeEventListener('mousedown', el._clickOutside.onMousedown, true);\n    });\n    delete el._clickOutside;\n  }\n};\nexport default ClickOutside;","map":null,"metadata":{},"sourceType":"module"}