{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport axios from 'axios';\nvar apiUrl = 'https://localhost:9292/';\nvar state = {\n  groups: []\n};\nvar getters = {\n  groups: function groups(state) {\n    return state.groups;\n  }\n};\nvar mutations = {\n  setGroups: function setGroups(state, groups) {\n    state.groups = groups;\n  },\n  updateGroup: function updateGroup(state, updatedGroup) {\n    var index = state.groups.findIndex(function (group) {\n      return group.id === updatedGroup.id;\n    });\n\n    if (index !== -1) {\n      state.groups.splice(index, 1, updatedGroup);\n    }\n  }\n};\nvar actions = {\n  fetchGroups: function fetchGroups(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return axios.get(\"\".concat(apiUrl, \"/groups\"));\n\n            case 3:\n              response = _context.sent;\n              commit('setGroups', response.data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  updateGroup: function updateGroup(_ref2, group) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var commit, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context2.next = 3;\n              return axios.put(\"\".concat(apiUrl, \"/groups/\").concat(group.id), group);\n\n            case 3:\n              response = _context2.sent;\n              commit('updateGroup', response.data);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n};\nexport default {\n  namespaced: true,\n  getters: getters,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};","map":{"version":3,"sources":["/Users/aaattt/projects/CalRailsVueApp/app/javascript/store/modules/groups.js"],"names":["axios","apiUrl","state","groups","getters","mutations","setGroups","updateGroup","updatedGroup","index","findIndex","group","id","splice","actions","fetchGroups","commit","get","response","data","put","namespaced"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,MAAM,GAAG,yBAAf;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE;AADI,CAAd;AAIA,IAAMC,OAAO,GAAG;AACdD,EAAAA,MAAM,EAAE,gBAAAD,KAAK;AAAA,WAAIA,KAAK,CAACC,MAAV;AAAA;AADC,CAAhB;AAIA,IAAME,SAAS,GAAG;AAChBC,EAAAA,SADgB,qBACNJ,KADM,EACCC,MADD,EACS;AACvBD,IAAAA,KAAK,CAACC,MAAN,GAAeA,MAAf;AACD,GAHe;AAIhBI,EAAAA,WAJgB,uBAIJL,KAJI,EAIGM,YAJH,EAIiB;AAC/B,QAAMC,KAAK,GAAGP,KAAK,CAACC,MAAN,CAAaO,SAAb,CAAuB,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACC,EAAN,KAAaJ,YAAY,CAACI,EAA9B;AAAA,KAA5B,CAAd;;AACA,QAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBP,MAAAA,KAAK,CAACC,MAAN,CAAaU,MAAb,CAAoBJ,KAApB,EAA2B,CAA3B,EAA8BD,YAA9B;AACD;AACF;AATe,CAAlB;AAYA,IAAMM,OAAO,GAAG;AACRC,EAAAA,WADQ,6BACgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAVC,cAAAA,MAAU,QAAVA,MAAU;AAAA;AAAA,qBACLhB,KAAK,CAACiB,GAAN,WAAahB,MAAb,aADK;;AAAA;AACtBiB,cAAAA,QADsB;AAE5BF,cAAAA,MAAM,CAAC,WAAD,EAAcE,QAAQ,CAACC,IAAvB,CAAN;;AAF4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG7B,GAJa;AAKRZ,EAAAA,WALQ,8BAKgBI,KALhB,EAKuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAjBK,cAAAA,MAAiB,SAAjBA,MAAiB;AAAA;AAAA,qBACZhB,KAAK,CAACoB,GAAN,WAAanB,MAAb,qBAA8BU,KAAK,CAACC,EAApC,GAA0CD,KAA1C,CADY;;AAAA;AAC7BO,cAAAA,QAD6B;AAEnCF,cAAAA,MAAM,CAAC,aAAD,EAAgBE,QAAQ,CAACC,IAAzB,CAAN;;AAFmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGpC;AARa,CAAhB;AAWA,eAAe;AACbE,EAAAA,UAAU,EAAE,IADC;AAEbjB,EAAAA,OAAO,EAAPA,OAFa;AAGbF,EAAAA,KAAK,EAALA,KAHa;AAIbG,EAAAA,SAAS,EAATA,SAJa;AAKbS,EAAAA,OAAO,EAAPA;AALa,CAAf","sourcesContent":["import axios from 'axios';\n\nconst apiUrl = 'https://localhost:9292/';\n\nconst state = {\n  groups: [],\n};\n\nconst getters = {\n  groups: state => state.groups\n};\n\nconst mutations = {\n  setGroups(state, groups) {\n    state.groups = groups\n  },\n  updateGroup(state, updatedGroup) {\n    const index = state.groups.findIndex(group => group.id === updatedGroup.id);\n    if (index !== -1) {\n      state.groups.splice(index, 1, updatedGroup);\n    }\n  },\n};\n\nconst actions = {\n  async fetchGroups({ commit }) {\n    const response = await axios.get(`${apiUrl}/groups`);\n    commit('setGroups', response.data);\n  },\n  async updateGroup({ commit }, group) {\n    const response = await axios.put(`${apiUrl}/groups/${group.id}`, group);\n    commit('updateGroup', response.data);\n  },\n};\n\nexport default {\n  namespaced: true,\n  getters,\n  state,\n  mutations,\n  actions,\n};\n"]},"metadata":{},"sourceType":"module"}