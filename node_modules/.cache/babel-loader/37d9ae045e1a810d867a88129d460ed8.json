{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport { install } from './install'; // Services\n\nimport * as services from './services';\n\nvar Vuetify = /*#__PURE__*/function () {\n  function Vuetify() {\n    var userPreset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Vuetify);\n\n    this.framework = {\n      isHydrating: false\n    };\n    this.installed = [];\n    this.preset = {};\n    this.userPreset = {};\n    this.userPreset = userPreset;\n    this.use(services.Presets);\n    this.use(services.Application);\n    this.use(services.Breakpoint);\n    this.use(services.Goto);\n    this.use(services.Icons);\n    this.use(services.Lang);\n    this.use(services.Theme);\n  } // Called on the new vuetify instance\n  // bootstrap in install beforeCreate\n  // Exposes ssrContext if available\n\n\n  _createClass(Vuetify, [{\n    key: \"init\",\n    value: function init(root, ssrContext) {\n      var _this = this;\n\n      this.installed.forEach(function (property) {\n        var service = _this.framework[property];\n        service.framework = _this.framework;\n        service.init(root, ssrContext);\n      }); // rtl is not installed and\n      // will never be called by\n      // the init process\n\n      this.framework.rtl = Boolean(this.preset.rtl);\n    } // Instantiate a VuetifyService\n\n  }, {\n    key: \"use\",\n    value: function use(Service) {\n      var property = Service.property;\n      if (this.installed.includes(property)) return; // TODO maybe a specific type for arg 2?\n\n      this.framework[property] = new Service(this.preset, this);\n      this.installed.push(property);\n    }\n  }]);\n\n  return Vuetify;\n}();\n\nexport { Vuetify as default };\nVuetify.install = install;\nVuetify.installed = false;\nVuetify.version = \"2.5.0\";\nVuetify.config = {\n  silent: false\n};","map":null,"metadata":{},"sourceType":"module"}