{"ast":null,"code":"import { f as isFunction_1, E as on, F as off, D as _toConsumableArray, n as _objectSpread2, I as elementContains, B as omit_1 } from './helpers-8d5d752d.js';\nimport { h } from 'vue';\nimport { createPopper } from '@popperjs/core';\nimport script$1 from './CustomTransition.js';\nimport { s as styleInject } from './style-inject.es-1f59c1d0.js'; // Can't just rely on 'click' event because of oddities in mobile Safari\n\nvar addTapOrClickHandler = function addTapOrClickHandler(element, handler) {\n  if (!element || !element.addEventListener || !isFunction_1(handler)) {\n    return null;\n  } // State variables\n\n\n  var tap = false;\n  var disableClick = false;\n\n  var touchstart = function touchstart() {\n    return tap = true;\n  };\n\n  var touchmove = function touchmove() {\n    return tap = false;\n  };\n\n  var touchend = function touchend(event) {\n    if (tap) {\n      // Reset state\n      tap = false; // Disable click so we don't call handler twice\n\n      disableClick = true;\n      handler(event);\n      return;\n    } // Make sure tap event hasn't disabled click\n\n\n    if (event.type === 'click' && !disableClick) {\n      handler(event);\n    } // Reset state\n\n\n    disableClick = false;\n  }; // Add event handlers\n\n\n  on(element, 'touchstart', touchstart, {\n    passive: true\n  });\n  on(element, 'touchmove', touchmove, {\n    passive: true\n  });\n  on(element, 'click', touchend, {\n    passive: true\n  });\n  on(element, 'touchend', touchend, {\n    passive: true\n  }); // Return function that removes event handlers\n\n  return function () {\n    off(element, 'touchstart', touchstart);\n    off(element, 'touchmove', touchmove);\n    off(element, 'click', touchend);\n    off(element, 'touchend', touchend);\n  };\n};\n\nvar addHorizontalSwipeHandler = function addHorizontalSwipeHandler(element, handler, _ref) {\n  var maxSwipeTime = _ref.maxSwipeTime,\n      minHorizontalSwipeDistance = _ref.minHorizontalSwipeDistance,\n      maxVerticalSwipeDistance = _ref.maxVerticalSwipeDistance;\n\n  if (!element || !element.addEventListener || !isFunction_1(handler)) {\n    return null;\n  } // State variables\n\n\n  var startX = 0;\n  var startY = 0;\n  var startTime = null;\n  var isSwiping = false; // Touch start handler\n\n  function touchStart(e) {\n    var t = e.changedTouches[0];\n    startX = t.screenX;\n    startY = t.screenY;\n    startTime = new Date().getTime();\n    isSwiping = true;\n  } // Touch end handler\n\n\n  function touchEnd(e) {\n    if (!isSwiping) return;\n    isSwiping = false;\n    var t = e.changedTouches[0];\n    var deltaX = t.screenX - startX;\n    var deltaY = t.screenY - startY;\n    var deltaTime = new Date().getTime() - startTime;\n\n    if (deltaTime < maxSwipeTime) {\n      if (Math.abs(deltaX) >= minHorizontalSwipeDistance && Math.abs(deltaY) <= maxVerticalSwipeDistance) {\n        var arg = {\n          toLeft: false,\n          toRight: false\n        };\n\n        if (deltaX < 0) {\n          // Swipe to the left\n          arg.toLeft = true;\n        } else {\n          // Swipe to the right\n          arg.toRight = true;\n        }\n\n        handler(arg);\n      }\n    }\n  } // Add event handlers\n\n\n  on(element, 'touchstart', touchStart, {\n    passive: true\n  }); // on(element, 'touchmove', touchmove);\n\n  on(element, 'touchend', touchEnd, {\n    passive: true\n  }); // Return function that removes event handlers\n\n  return function () {\n    off(element, 'touchstart', touchStart); // off(element, 'touchmove', touchmove);\n\n    off(element, 'touchend', touchEnd);\n  };\n};\n\nvar script = {\n  name: 'Popover',\n  emits: ['before-show', 'after-show', 'before-hide', 'after-hide'],\n  render: function render() {\n    var _this = this;\n\n    return h('div', {\n      class: ['vc-popover-content-wrapper', {\n        'is-interactive': this.isInteractive\n      }],\n      ref: 'popover'\n    }, [h(script$1, {\n      name: this.transition,\n      appear: true,\n      'on-before-enter': this.beforeEnter,\n      'on-after-enter': this.afterEnter,\n      'on-before-leave': this.beforeLeave,\n      'on-after-leave': this.afterLeave\n    }, {\n      default: function _default() {\n        return _this.isVisible ? h('div', {\n          tabindex: -1,\n          class: ['vc-popover-content', \"direction-\".concat(_this.direction), _this.contentClass],\n          style: _this.contentStyle\n        }, [_this.content, h('span', {\n          class: ['vc-popover-caret', \"direction-\".concat(_this.direction), \"align-\".concat(_this.alignment)]\n        })]) : null;\n      }\n    })]);\n  },\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    contentClass: String\n  },\n  data: function data() {\n    return {\n      ref: null,\n      opts: null,\n      data: null,\n      transition: 'slide-fade',\n      transitionTranslate: '15px',\n      transitionDuration: '0.15s',\n      placement: 'bottom',\n      positionFixed: false,\n      modifiers: [],\n      isInteractive: false,\n      isHovered: false,\n      isFocused: false,\n      showDelay: 0,\n      hideDelay: 110,\n      autoHide: false,\n      popperEl: null\n    };\n  },\n  computed: {\n    content: function content() {\n      var _this2 = this;\n\n      return isFunction_1(this.$slots.default) && this.$slots.default({\n        direction: this.direction,\n        alignment: this.alignment,\n        data: this.data,\n        updateLayout: this.setupPopper,\n        hide: function hide(opts) {\n          return _this2.hide(opts);\n        }\n      }) || this.$slots.default;\n    },\n    contentStyle: function contentStyle() {\n      return {\n        '--slide-translate': this.transitionTranslate,\n        '--slide-duration': this.transitionDuration\n      };\n    },\n    popperOptions: function popperOptions() {\n      return {\n        placement: this.placement,\n        strategy: this.positionFixed ? 'fixed' : 'absolute',\n        modifiers: [{\n          name: 'onUpdate',\n          enabled: true,\n          phase: 'afterWrite',\n          fn: this.onPopperUpdate\n        }].concat(_toConsumableArray(this.modifiers || [])),\n        onFirstUpdate: this.onPopperUpdate\n      };\n    },\n    isVisible: function isVisible() {\n      return !!(this.ref && this.content);\n    },\n    direction: function direction() {\n      return this.placement && this.placement.split('-')[0] || 'bottom';\n    },\n    alignment: function alignment() {\n      var isLeftRight = this.direction === 'left' || this.direction === 'right';\n      var alignment = this.placement.split('-');\n      alignment = alignment.length > 1 ? alignment[1] : '';\n\n      if (['start', 'top', 'left'].includes(alignment)) {\n        return isLeftRight ? 'top' : 'left';\n      }\n\n      if (['end', 'bottom', 'right'].includes(alignment)) {\n        return isLeftRight ? 'bottom' : 'right';\n      }\n\n      return isLeftRight ? 'middle' : 'center';\n    }\n  },\n  watch: {\n    opts: function opts(val, oldVal) {\n      if (oldVal && oldVal.callback) {\n        oldVal.callback(_objectSpread2(_objectSpread2({}, oldVal), {}, {\n          completed: !val,\n          reason: val ? 'Overridden by action' : null\n        }));\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.popoverEl = this.$refs.popover;\n    this.addEvents();\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.removeEvents();\n  },\n  methods: {\n    addEvents: function addEvents() {\n      on(this.popoverEl, 'click', this.onClick);\n      on(this.popoverEl, 'mouseover', this.onMouseOver);\n      on(this.popoverEl, 'mouseleave', this.onMouseLeave);\n      on(this.popoverEl, 'focusin', this.onFocusIn);\n      on(this.popoverEl, 'focusout', this.onFocusOut);\n      on(document, 'keydown', this.onDocumentKeydown);\n      this.removeDocHandler = addTapOrClickHandler(document, this.onDocumentClick);\n      on(document, 'show-popover', this.onDocumentShowPopover);\n      on(document, 'hide-popover', this.onDocumentHidePopover);\n      on(document, 'toggle-popover', this.onDocumentTogglePopover);\n      on(document, 'update-popover', this.onDocumentUpdatePopover);\n    },\n    removeEvents: function removeEvents() {\n      off(this.popoverEl, 'click', this.onClick);\n      off(this.popoverEl, 'mouseover', this.onMouseOver);\n      off(this.popoverEl, 'mouseleave', this.onMouseLeave);\n      off(this.popoverEl, 'focusin', this.onFocusIn);\n      off(this.popoverEl, 'focusout', this.onFocusOut);\n      off(document, 'keydown', this.onDocumentKeydown);\n      if (this.removeDocHandler) this.removeDocHandler();\n      off(document, 'show-popover', this.onDocumentShowPopover);\n      off(document, 'hide-popover', this.onDocumentHidePopover);\n      off(document, 'toggle-popover', this.onDocumentTogglePopover);\n      off(document, 'update-popover', this.onDocumentUpdatePopover);\n    },\n    onClick: function onClick(e) {\n      e.stopPropagation();\n    },\n    onMouseOver: function onMouseOver() {\n      this.isHovered = true;\n      if (this.isInteractive) this.show();\n    },\n    onMouseLeave: function onMouseLeave() {\n      this.isHovered = false;\n\n      if (this.autoHide && !this.isFocused && (!this.ref || this.ref !== document.activeElement)) {\n        this.hide();\n      }\n    },\n    onFocusIn: function onFocusIn() {\n      this.isFocused = true;\n      if (this.isInteractive) this.show();\n    },\n    onFocusOut: function onFocusOut(e) {\n      if (!e.relatedTarget || !elementContains(this.popoverEl, e.relatedTarget)) {\n        this.isFocused = false;\n        if (!this.isHovered && this.autoHide) this.hide();\n      }\n    },\n    onDocumentClick: function onDocumentClick(e) {\n      if (!this.$refs.popover || !this.ref) {\n        return;\n      } // Don't hide if target element is contained within popover ref or content\n\n\n      if (elementContains(this.popoverEl, e.target) || elementContains(this.ref, e.target)) {\n        return;\n      } // Hide the popover\n\n\n      this.hide();\n    },\n    onDocumentKeydown: function onDocumentKeydown(e) {\n      if (e.key === 'Esc' || e.key === 'Escape') {\n        this.hide();\n      }\n    },\n    onDocumentShowPopover: function onDocumentShowPopover(_ref) {\n      var detail = _ref.detail;\n      if (!detail.id || detail.id !== this.id) return;\n      this.show(detail);\n    },\n    onDocumentHidePopover: function onDocumentHidePopover(_ref2) {\n      var detail = _ref2.detail;\n      if (!detail.id || detail.id !== this.id) return;\n      this.hide(detail);\n    },\n    onDocumentTogglePopover: function onDocumentTogglePopover(_ref3) {\n      var detail = _ref3.detail;\n      if (!detail.id || detail.id !== this.id) return;\n      this.toggle(detail);\n    },\n    onDocumentUpdatePopover: function onDocumentUpdatePopover(_ref4) {\n      var detail = _ref4.detail;\n      if (!detail.id || detail.id !== this.id) return;\n      this.update(detail);\n    },\n    show: function show() {\n      var _this3 = this;\n\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      opts.action = 'show';\n      var ref = opts.ref || this.ref;\n      var delay = opts.showDelay >= 0 ? opts.showDelay : this.showDelay; // Validate options\n\n      if (!ref) {\n        if (opts.callback) {\n          opts.callback({\n            completed: false,\n            reason: 'Invalid reference element provided'\n          });\n        }\n\n        return;\n      }\n\n      clearTimeout(this.timeout);\n      this.opts = opts;\n\n      var fn = function fn() {\n        Object.assign(_this3, omit_1(opts, ['id']));\n\n        _this3.setupPopper();\n\n        _this3.opts = null;\n      };\n\n      if (delay > 0) {\n        this.timeout = setTimeout(function () {\n          return fn();\n        }, delay);\n      } else {\n        fn();\n      }\n    },\n    hide: function hide() {\n      var _this4 = this;\n\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      opts.action = 'hide';\n      var ref = opts.ref || this.ref;\n      var delay = opts.hideDelay >= 0 ? opts.hideDelay : this.hideDelay;\n\n      if (!this.ref || ref !== this.ref) {\n        if (opts.callback) {\n          opts.callback(_objectSpread2(_objectSpread2({}, opts), {}, {\n            completed: false,\n            reason: this.ref ? 'Invalid reference element provided' : 'Popover already hidden'\n          }));\n        }\n\n        return;\n      }\n\n      var fn = function fn() {\n        _this4.ref = null;\n        _this4.opts = null;\n      };\n\n      clearTimeout(this.timeout);\n      this.opts = opts;\n\n      if (delay > 0) {\n        this.timeout = setTimeout(fn, delay);\n      } else {\n        fn();\n      }\n    },\n    toggle: function toggle() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this.isVisible && opts.ref === this.ref) {\n        this.hide(opts);\n      } else {\n        this.show(opts);\n      }\n    },\n    update: function update() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      Object.assign(this, omit_1(opts, ['id']));\n      this.setupPopper();\n    },\n    setupPopper: function setupPopper() {\n      var _this5 = this;\n\n      this.$nextTick(function () {\n        if (!_this5.ref || !_this5.$refs.popover) return;\n\n        if (_this5.popper && _this5.popper.reference !== _this5.ref) {\n          _this5.destroyPopper();\n        }\n\n        if (!_this5.popper) {\n          _this5.popper = createPopper(_this5.ref, _this5.popoverEl, _this5.popperOptions);\n        } else {\n          _this5.popper.update();\n        }\n      });\n    },\n    onPopperUpdate: function onPopperUpdate(args) {\n      if (args.placement) {\n        this.placement = args.placement;\n      } else if (args.state) {\n        this.placement = args.state.placement;\n      }\n    },\n    beforeEnter: function beforeEnter(e) {\n      this.$emit('before-show', e);\n    },\n    afterEnter: function afterEnter(e) {\n      this.$emit('after-show', e);\n    },\n    beforeLeave: function beforeLeave(e) {\n      this.$emit('before-hide', e);\n    },\n    afterLeave: function afterLeave(e) {\n      this.destroyPopper();\n      this.$emit('after-hide', e);\n    },\n    destroyPopper: function destroyPopper() {\n      if (this.popper) {\n        this.popper.destroy();\n        this.popper = null;\n      }\n    }\n  }\n};\nvar css_248z = \".vc-popover-content-wrapper {\\n  --popover-horizontal-content-offset: 8px;\\n  --popover-vertical-content-offset: 10px;\\n  --popover-caret-horizontal-offset: 18px;\\n  --popover-caret-vertical-offset: 8px;\\n\\n  position: absolute;\\n  display: block;\\n  outline: none;\\n  z-index: 10;\\n}\\n.vc-popover-content-wrapper:not(.is-interactive) {\\n    pointer-events: none;\\n}\\n.vc-popover-content {\\n  position: relative;\\n  outline: none;\\n  z-index: 10;\\n  box-shadow: var(--shadow-lg);\\n}\\n.vc-popover-content.direction-bottom {\\n    margin-top: var(--popover-vertical-content-offset);\\n}\\n.vc-popover-content.direction-top {\\n    margin-bottom: var(--popover-vertical-content-offset);\\n}\\n.vc-popover-content.direction-left {\\n    margin-right: var(--popover-horizontal-content-offset);\\n}\\n.vc-popover-content.direction-right {\\n    margin-left: var(--popover-horizontal-content-offset);\\n}\\n.vc-popover-caret {\\n  content: '';\\n  position: absolute;\\n  display: block;\\n  width: 12px;\\n  height: 12px;\\n  border-top: inherit;\\n  border-left: inherit;\\n  background-color: inherit;\\n  z-index: -1;\\n}\\n.vc-popover-caret.direction-bottom {\\n    top: 0;\\n}\\n.vc-popover-caret.direction-bottom.align-left {\\n      -webkit-transform: translateY(-50%) rotate(45deg);\\n              transform: translateY(-50%) rotate(45deg);\\n}\\n.vc-popover-caret.direction-bottom.align-center {\\n      -webkit-transform: translateX(-50%) translateY(-50%) rotate(45deg);\\n              transform: translateX(-50%) translateY(-50%) rotate(45deg);\\n}\\n.vc-popover-caret.direction-bottom.align-right {\\n      -webkit-transform: translateY(-50%) rotate(45deg);\\n              transform: translateY(-50%) rotate(45deg);\\n}\\n.vc-popover-caret.direction-top {\\n    top: 100%;\\n}\\n.vc-popover-caret.direction-top.align-left {\\n      -webkit-transform: translateY(-50%) rotate(-135deg);\\n              transform: translateY(-50%) rotate(-135deg);\\n}\\n.vc-popover-caret.direction-top.align-center {\\n      -webkit-transform: translateX(-50%) translateY(-50%) rotate(-135deg);\\n              transform: translateX(-50%) translateY(-50%) rotate(-135deg);\\n}\\n.vc-popover-caret.direction-top.align-right {\\n      -webkit-transform: translateY(-50%) rotate(-135deg);\\n              transform: translateY(-50%) rotate(-135deg);\\n}\\n.vc-popover-caret.direction-left {\\n    left: 100%;\\n}\\n.vc-popover-caret.direction-left.align-top {\\n      -webkit-transform: translateX(-50%) rotate(135deg);\\n              transform: translateX(-50%) rotate(135deg);\\n}\\n.vc-popover-caret.direction-left.align-middle {\\n      -webkit-transform: translateY(-50%) translateX(-50%) rotate(135deg);\\n              transform: translateY(-50%) translateX(-50%) rotate(135deg);\\n}\\n.vc-popover-caret.direction-left.align-bottom {\\n      -webkit-transform: translateX(-50%) rotate(135deg);\\n              transform: translateX(-50%) rotate(135deg);\\n}\\n.vc-popover-caret.direction-right {\\n    left: 0;\\n}\\n.vc-popover-caret.direction-right.align-top {\\n      -webkit-transform: translateX(-50%) rotate(-45deg);\\n              transform: translateX(-50%) rotate(-45deg);\\n}\\n.vc-popover-caret.direction-right.align-middle {\\n      -webkit-transform: translateY(-50%) translateX(-50%) rotate(-45deg);\\n              transform: translateY(-50%) translateX(-50%) rotate(-45deg);\\n}\\n.vc-popover-caret.direction-right.align-bottom {\\n      -webkit-transform: translateX(-50%) rotate(-45deg);\\n              transform: translateX(-50%) rotate(-45deg);\\n}\\n.vc-popover-caret.align-left {\\n    left: var(--popover-caret-horizontal-offset);\\n}\\n.vc-popover-caret.align-center {\\n    left: 50%;\\n}\\n.vc-popover-caret.align-right {\\n    right: var(--popover-caret-horizontal-offset);\\n}\\n.vc-popover-caret.align-top {\\n    top: var(--popover-caret-vertical-offset);\\n}\\n.vc-popover-caret.align-middle {\\n    top: 50%;\\n}\\n.vc-popover-caret.align-bottom {\\n    bottom: var(--popover-caret-vertical-offset);\\n}\\n\";\nstyleInject(css_248z);\nexport { addHorizontalSwipeHandler as a, addTapOrClickHandler as b, script as s };","map":null,"metadata":{},"sourceType":"module"}